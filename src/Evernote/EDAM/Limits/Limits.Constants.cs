/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;

namespace Evernote.EDAM.Limits
{
  public static class LimitsConstants
  {
    /// <summary>
    /// Minimum length of any string-based attribute, in Unicode chars
    /// </summary>
    public const int EDAM_ATTRIBUTE_LEN_MIN = 1;
    /// <summary>
    /// Maximum length of any string-based attribute, in Unicode chars
    /// </summary>
    public const int EDAM_ATTRIBUTE_LEN_MAX = 4096;
    /// <summary>
    /// Any string-based attribute must match the provided regular expression.
    /// This excludes all Unicode line endings and control characters.
    /// </summary>
    public const string EDAM_ATTRIBUTE_REGEX = "^[^\\p{Cc}\\p{Zl}\\p{Zp}]{1,4096}$";
    /// <summary>
    /// The maximum number of values that can be stored in a list-based attribute
    /// (e.g. see UserAttributes.recentMailedAddresses)
    /// </summary>
    public const int EDAM_ATTRIBUTE_LIST_MAX = 100;
    /// <summary>
    /// The maximum number of entries that can be stored in a map-based attribute
    /// such as applicationData fields in Resources and Notes.
    /// </summary>
    public const int EDAM_ATTRIBUTE_MAP_MAX = 100;
    /// <summary>
    /// The minimum length of a GUID generated by the Evernote service
    /// </summary>
    public const int EDAM_GUID_LEN_MIN = 36;
    /// <summary>
    /// The maximum length of a GUID generated by the Evernote service
    /// </summary>
    public const int EDAM_GUID_LEN_MAX = 36;
    /// <summary>
    /// GUIDs generated by the Evernote service will match the provided pattern
    /// </summary>
    public const string EDAM_GUID_REGEX = "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$";
    /// <summary>
    /// The minimum length of any email address
    /// </summary>
    public const int EDAM_EMAIL_LEN_MIN = 6;
    /// <summary>
    /// The maximum length of any email address
    /// </summary>
    public const int EDAM_EMAIL_LEN_MAX = 255;
    /// <summary>
    /// A regular expression that matches the part of an email address before
    /// the '@' symbol.
    /// </summary>
    public const string EDAM_EMAIL_LOCAL_REGEX = "^[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(\\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*$";
    /// <summary>
    /// A regular expression that matches the part of an email address after
    /// the '@' symbol.
    /// </summary>
    public const string EDAM_EMAIL_DOMAIN_REGEX = "^[A-Za-z0-9-]*[A-Za-z0-9](\\.[A-Za-z0-9-]*[A-Za-z0-9])*\\.([A-Za-z]{2,})$";
    /// <summary>
    /// A regular expression that must match any email address given to Evernote.
    /// Email addresses must comply with RFC 2821 and 2822.
    /// </summary>
    public const string EDAM_EMAIL_REGEX = "^[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(\\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*@[A-Za-z0-9-]*[A-Za-z0-9](\\.[A-Za-z0-9-]*[A-Za-z0-9])*\\.([A-Za-z]{2,})$";
    /// <summary>
    /// A regular expression that must match any VAT ID given to Evernote.
    /// ref http://en.wikipedia.org/wiki/VAT_identification_number
    /// ref http://my.safaribooksonline.com/book/programming/regular-expressions/9780596802837/4dot-validation-and-formatting/id2995136
    /// </summary>
    public const string EDAM_VAT_REGEX = "^(AT)?U[0-9]{8}$|^(BE)?0?[0-9]{9}$|^(BG)?[0-9]{9,10}$|^(CY)?[0-9]{8}L$|^(CZ)?[0-9]{8,10}$|^(DE)?[0-9]{9}$|^(DK)?[0-9]{8}$|^(EE)?[0-9]{9}$|^(EL|GR)?[0-9]{9}$|^(ES)?[0-9A-Z][0-9]{7}[0-9A-Z]$|^(FI)?[0-9]{8}$|^(FR)?[0-9A-Z]{2}[0-9]{9}$|^(GB)?([0-9]{9}([0-9]{3})?|[A-Z]{2}[0-9]{3})$|^(HU)?[0-9]{8}$|^(IE)?[0-9]{7}[A-Z]{1,2}$|^(IT)?[0-9]{11}$|^(LT)?([0-9]{9}|[0-9]{12})$|^(LU)?[0-9]{8}$|^(LV)?[0-9]{11}$|^(MT)?[0-9]{8}$|^(NL)?[0-9]{9}B[0-9]{2}$|^(PL)?[0-9]{10}$|^(PT)?[0-9]{9}$|^(RO)?[0-9]{2,10}$|^(SE)?[0-9]{12}$|^(SI)?[0-9]{8}$|^(SK)?[0-9]{10}$|^[0-9]{9}MVA$|^[0-9]{6}$|^CHE[0-9]{9}(TVA|MWST|IVA)$";
    /// <summary>
    /// The minimum length of a timezone specification string
    /// </summary>
    public const int EDAM_TIMEZONE_LEN_MIN = 1;
    /// <summary>
    /// The maximum length of a timezone specification string
    /// </summary>
    public const int EDAM_TIMEZONE_LEN_MAX = 32;
    /// <summary>
    /// Any timezone string given to Evernote must match the provided pattern.
    /// This permits either a locale-based standard timezone or a GMT offset.
    /// E.g.:<ul>
    ///    <li>America/Los_Angeles</li>
    ///    <li>GMT+08:00</li>
    /// </ul>
    /// </summary>
    public const string EDAM_TIMEZONE_REGEX = "^([A-Za-z_-]+(/[A-Za-z_-]+)*)|(GMT(-|\\+)[0-9]{1,2}(:[0-9]{2})?)$";
    /// <summary>
    /// The minimum length of any MIME type string given to Evernote
    /// </summary>
    public const int EDAM_MIME_LEN_MIN = 3;
    /// <summary>
    /// The maximum length of any MIME type string given to Evernote
    /// </summary>
    public const int EDAM_MIME_LEN_MAX = 255;
    /// <summary>
    /// Any MIME type string given to Evernote must match the provided pattern.
    /// E.g.:  image/gif
    /// </summary>
    public const string EDAM_MIME_REGEX = "^[A-Za-z]+/[A-Za-z0-9._+-]+$";
    /// <summary>
    /// Canonical MIME type string for GIF image resources
    /// </summary>
    public const string EDAM_MIME_TYPE_GIF = "image/gif";
    /// <summary>
    /// Canonical MIME type string for JPEG image resources
    /// </summary>
    public const string EDAM_MIME_TYPE_JPEG = "image/jpeg";
    /// <summary>
    /// Canonical MIME type string for PNG image resources
    /// </summary>
    public const string EDAM_MIME_TYPE_PNG = "image/png";
    /// <summary>
    /// Canonical MIME type string for TIFF image resources
    /// </summary>
    public const string EDAM_MIME_TYPE_TIFF = "image/tiff";
    /// <summary>
    /// Canonical MIME type string for BMP image resources
    /// </summary>
    public const string EDAM_MIME_TYPE_BMP = "image/bmp";
    /// <summary>
    /// Canonical MIME type string for WAV audio resources
    /// </summary>
    public const string EDAM_MIME_TYPE_WAV = "audio/wav";
    /// <summary>
    /// Canonical MIME type string for MP3 audio resources
    /// </summary>
    public const string EDAM_MIME_TYPE_MP3 = "audio/mpeg";
    /// <summary>
    /// Canonical MIME type string for AMR audio resources
    /// </summary>
    public const string EDAM_MIME_TYPE_AMR = "audio/amr";
    /// <summary>
    /// Canonical MIME type string for AAC audio resources
    /// </summary>
    public const string EDAM_MIME_TYPE_AAC = "audio/aac";
    /// <summary>
    /// Canonical MIME type string for MP4 audio resources
    /// </summary>
    public const string EDAM_MIME_TYPE_M4A = "audio/mp4";
    /// <summary>
    /// Canonical MIME type string for MP4 video resources
    /// </summary>
    public const string EDAM_MIME_TYPE_MP4_VIDEO = "video/mp4";
    /// <summary>
    /// Canonical MIME type string for Evernote Ink resources
    /// </summary>
    public const string EDAM_MIME_TYPE_INK = "application/vnd.evernote.ink";
    /// <summary>
    /// Canonical MIME type string for PDF resources
    /// </summary>
    public const string EDAM_MIME_TYPE_PDF = "application/pdf";
    /// <summary>
    /// MIME type used for attachments of an unspecified type
    /// </summary>
    public const string EDAM_MIME_TYPE_DEFAULT = "application/octet-stream";
    /// <summary>
    /// The set of resource MIME types that are expected to be handled
    /// correctly by all of the major Evernote client applications.
    /// </summary>
    public static THashSet<string> EDAM_MIME_TYPES = new THashSet<string>();
    /// <summary>
    /// The set of MIME types that Evernote will parse and index for
    /// searching. With exception of images, PDFs and plain text files,
    /// which are handled in a different way.
    /// </summary>
    public static THashSet<string> EDAM_INDEXABLE_RESOURCE_MIME_TYPES = new THashSet<string>();
    /// <summary>
    /// The set of plain text MIME types that Evernote will parse and index
    /// for searching. The MIME types which start with "text/" will be handled
    /// separately by each client (i.e. hard-coded in each client).
    /// </summary>
    public static THashSet<string> EDAM_INDEXABLE_PLAINTEXT_MIME_TYPES = new THashSet<string>();
    /// <summary>
    /// The minimum length of a user search query string in Unicode chars
    /// </summary>
    public const int EDAM_SEARCH_QUERY_LEN_MIN = 0;
    /// <summary>
    /// The maximum length of a user search query string in Unicode chars
    /// </summary>
    public const int EDAM_SEARCH_QUERY_LEN_MAX = 1024;
    /// <summary>
    /// Search queries must match the provided pattern.  This is used for
    /// both ad-hoc queries and SavedSearch.query fields.
    /// This excludes all control characters and line/paragraph separators.
    /// </summary>
    public const string EDAM_SEARCH_QUERY_REGEX = "^[^\\p{Cc}\\p{Zl}\\p{Zp}]{0,1024}$";
    /// <summary>
    /// The exact length of a MD5 hash checksum, in binary bytes.
    /// This is the exact length that must be matched for any binary hash
    /// value.
    /// </summary>
    public const int EDAM_HASH_LEN = 16;
    /// <summary>
    /// The minimum length of an Evernote username
    /// </summary>
    public const int EDAM_USER_USERNAME_LEN_MIN = 1;
    /// <summary>
    /// The maximum length of an Evernote username
    /// </summary>
    public const int EDAM_USER_USERNAME_LEN_MAX = 64;
    /// <summary>
    /// Any Evernote User.username field must match this pattern.  This
    /// restricts usernames to a format that could permit use as a domain
    /// name component.  E.g. "username.whatever.evernote.com"
    /// </summary>
    public const string EDAM_USER_USERNAME_REGEX = "^[a-z0-9]([a-z0-9_-]{0,62}[a-z0-9])?$";
    /// <summary>
    /// Minimum length of the User.name field
    /// </summary>
    public const int EDAM_USER_NAME_LEN_MIN = 1;
    /// <summary>
    /// Maximum length of the User.name field
    /// </summary>
    public const int EDAM_USER_NAME_LEN_MAX = 255;
    /// <summary>
    /// The User.name field must match this pattern, which excludes line
    /// endings and control characters.
    /// </summary>
    public const string EDAM_USER_NAME_REGEX = "^[^\\p{Cc}\\p{Zl}\\p{Zp}]{1,255}$";
    /// <summary>
    /// The minimum length of a Tag.name, in Unicode characters
    /// </summary>
    public const int EDAM_TAG_NAME_LEN_MIN = 1;
    /// <summary>
    /// The maximum length of a Tag.name, in Unicode characters
    /// </summary>
    public const int EDAM_TAG_NAME_LEN_MAX = 100;
    /// <summary>
    /// All Tag.name fields must match this pattern.
    /// This excludes control chars, commas or line/paragraph separators.
    /// The string may not begin or end with whitespace.
    /// </summary>
    public const string EDAM_TAG_NAME_REGEX = "^[^,\\p{Cc}\\p{Z}]([^,\\p{Cc}\\p{Zl}\\p{Zp}]{0,98}[^,\\p{Cc}\\p{Z}])?$";
    /// <summary>
    /// The minimum length of a Note.title, in Unicode characters
    /// </summary>
    public const int EDAM_NOTE_TITLE_LEN_MIN = 1;
    /// <summary>
    /// The maximum length of a Note.title, in Unicode characters
    /// </summary>
    public const int EDAM_NOTE_TITLE_LEN_MAX = 255;
    /// <summary>
    /// All Note.title fields must match this pattern.
    /// This excludes control chars or line/paragraph separators.
    /// The string may not begin or end with whitespace.
    /// </summary>
    public const string EDAM_NOTE_TITLE_REGEX = "^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,253}[^\\p{Cc}\\p{Z}])?$";
    /// <summary>
    /// Minimum length of a Note.content field.
    /// Note.content fields must comply with the ENML DTD.
    /// </summary>
    public const int EDAM_NOTE_CONTENT_LEN_MIN = 0;
    /// <summary>
    /// Maximum length of a Note.content field
    /// Note.content fields must comply with the ENML DTD.
    /// </summary>
    public const int EDAM_NOTE_CONTENT_LEN_MAX = 5242880;
    /// <summary>
    /// Minimum length of an application name, which is the key in an
    /// applicationData LazyMap found in entities such as Resources and
    /// Notes.
    /// </summary>
    public const int EDAM_APPLICATIONDATA_NAME_LEN_MIN = 3;
    /// <summary>
    /// Maximum length of an application name, which is the key in an
    /// applicationData LazyMap found in entities such as Resources and
    /// Notes.
    /// </summary>
    public const int EDAM_APPLICATIONDATA_NAME_LEN_MAX = 32;
    /// <summary>
    /// Minimum length of an applicationData value in a LazyMap, found
    /// in entities such as Resources and Notes.
    /// </summary>
    public const int EDAM_APPLICATIONDATA_VALUE_LEN_MIN = 0;
    /// <summary>
    /// Maximum length of an applicationData value in a LazyMap, found
    /// in entities such as Resources and Notes.  Note, however, that
    /// the sum of the size of hte key and value is constrained by
    /// EDAM_APPLICATIONDATA_ENTRY_LEN_MAX, so the maximum length, in
    /// practice, depends upon the key value being used.
    /// </summary>
    public const int EDAM_APPLICATIONDATA_VALUE_LEN_MAX = 4092;
    /// <summary>
    /// The total length of an entry in an applicationData LazyMap, which
    /// is the sum of the length of the key and the value for the entry.
    /// </summary>
    public const int EDAM_APPLICATIONDATA_ENTRY_LEN_MAX = 4095;
    /// <summary>
    /// An application name must match this regex.  An application
    /// name is the key portion of an entry in an applicationData
    /// map as found in entities such as Resources and Notes.
    /// Note that even if both the name and value regexes match,
    /// it is still necessary to check the sum of the lengths
    /// against EDAM_APPLICATIONDATA_ENTRY_LEN_MAX.
    /// </summary>
    public const string EDAM_APPLICATIONDATA_NAME_REGEX = "^[A-Za-z0-9_.-]{3,32}$";
    /// <summary>
    /// An applicationData map value must match this regex.
    /// Note that even if both the name and value regexes match,
    /// it is still necessary to check the sum of the lengths
    /// against EDAM_APPLICATIONDATA_ENTRY_LEN_MAX.
    /// </summary>
    public const string EDAM_APPLICATIONDATA_VALUE_REGEX = "^[\\p{Space}[^\\p{Cc}]]{0,4092}$";
    /// <summary>
    /// The minimum length of a Notebook.name, in Unicode characters
    /// </summary>
    public const int EDAM_NOTEBOOK_NAME_LEN_MIN = 1;
    /// <summary>
    /// The maximum length of a Notebook.name, in Unicode characters
    /// </summary>
    public const int EDAM_NOTEBOOK_NAME_LEN_MAX = 100;
    /// <summary>
    /// All Notebook.name fields must match this pattern.
    /// This excludes control chars or line/paragraph separators.
    /// The string may not begin or end with whitespace.
    /// </summary>
    public const string EDAM_NOTEBOOK_NAME_REGEX = "^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,98}[^\\p{Cc}\\p{Z}])?$";
    /// <summary>
    /// The minimum length of a Notebook.stack, in Unicode characters
    /// </summary>
    public const int EDAM_NOTEBOOK_STACK_LEN_MIN = 1;
    /// <summary>
    /// The maximum length of a Notebook.stack, in Unicode characters
    /// </summary>
    public const int EDAM_NOTEBOOK_STACK_LEN_MAX = 100;
    /// <summary>
    /// All Notebook.stack fields must match this pattern.
    /// This excludes control chars or line/paragraph separators.
    /// The string may not begin or end with whitespace.
    /// </summary>
    public const string EDAM_NOTEBOOK_STACK_REGEX = "^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,98}[^\\p{Cc}\\p{Z}])?$";
    /// <summary>
    /// The minimum length of a Workspace.name, in Unicode characters
    /// </summary>
    public const int EDAM_WORKSPACE_NAME_LEN_MIN = 1;
    /// <summary>
    /// The maximum length of a Workspace.name, in Unicode characters
    /// </summary>
    public const int EDAM_WORKSPACE_NAME_LEN_MAX = 100;
    /// <summary>
    /// The maximum length of a Workspace.description, in Unicode characters
    /// </summary>
    public const int EDAM_WORKSPACE_DESCRIPTION_LEN_MAX = 600;
    /// <summary>
    /// All Workspace.name fields must match this pattern.
    /// This excludes control chars or line/paragraph separators.
    /// The string may not begin or end with whitespace.
    /// </summary>
    public const string EDAM_WORKSPACE_NAME_REGEX = "^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,98}[^\\p{Cc}\\p{Z}])?$";
    /// <summary>
    /// The minimum length of a public notebook URI component
    /// </summary>
    public const int EDAM_PUBLISHING_URI_LEN_MIN = 1;
    /// <summary>
    /// The maximum length of a public notebook URI component
    /// </summary>
    public const int EDAM_PUBLISHING_URI_LEN_MAX = 255;
    /// <summary>
    /// A public notebook URI component must match the provided pattern
    /// </summary>
    public const string EDAM_PUBLISHING_URI_REGEX = "^[a-zA-Z0-9.~_+-]{1,255}$";
    /// <summary>
    /// The set of strings that may not be used as a publishing URI
    /// </summary>
    public static THashSet<string> EDAM_PUBLISHING_URI_PROHIBITED = new THashSet<string>();
    /// <summary>
    /// The minimum length of a Publishing.publicDescription field.
    /// </summary>
    public const int EDAM_PUBLISHING_DESCRIPTION_LEN_MIN = 1;
    /// <summary>
    /// The maximum length of a Publishing.publicDescription field.
    /// </summary>
    public const int EDAM_PUBLISHING_DESCRIPTION_LEN_MAX = 200;
    /// <summary>
    /// Any public notebook's Publishing.publicDescription field must match
    /// this pattern.
    /// No control chars or line/paragraph separators, and can't start or
    /// end with whitespace.
    /// </summary>
    public const string EDAM_PUBLISHING_DESCRIPTION_REGEX = "^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,198}[^\\p{Cc}\\p{Z}])?$";
    /// <summary>
    /// The minimum length of a SavedSearch.name field
    /// </summary>
    public const int EDAM_SAVED_SEARCH_NAME_LEN_MIN = 1;
    /// <summary>
    /// The maximum length of a SavedSearch.name field
    /// </summary>
    public const int EDAM_SAVED_SEARCH_NAME_LEN_MAX = 100;
    /// <summary>
    /// SavedSearch.name fields must match this pattern.
    /// No control chars or line/paragraph separators, and can't start or
    /// end with whitespace.
    /// </summary>
    public const string EDAM_SAVED_SEARCH_NAME_REGEX = "^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,98}[^\\p{Cc}\\p{Z}])?$";
    /// <summary>
    /// The minimum length of an Evernote user password
    /// </summary>
    public const int EDAM_USER_PASSWORD_LEN_MIN = 6;
    /// <summary>
    /// The maximum length of an Evernote user password
    /// </summary>
    public const int EDAM_USER_PASSWORD_LEN_MAX = 64;
    /// <summary>
    /// Evernote user passwords must match this regular expression
    /// </summary>
    public const string EDAM_USER_PASSWORD_REGEX = "^[A-Za-z0-9!#$%&'()*+,./:;<=>?@^_`{|}~\\[\\]\\\\-]{6,64}$";
    /// <summary>
    /// The maximum length of an Evernote Business URI
    /// </summary>
    public const int EDAM_BUSINESS_URI_LEN_MAX = 32;
    /// <summary>
    /// Valid Evernote Business marketing code / affiliate code format.
    /// </summary>
    public const string EDAM_BUSINESS_MARKETING_CODE_REGEX_PATTERN = "[A-Za-z0-9-]{1,128}";
    /// <summary>
    /// The maximum number of Tags per Note
    /// </summary>
    public const int EDAM_NOTE_TAGS_MAX = 100;
    /// <summary>
    /// The maximum number of Resources per Note
    /// </summary>
    public const int EDAM_NOTE_RESOURCES_MAX = 1000;
    /// <summary>
    /// Maximum number of Tags per account
    /// </summary>
    public const int EDAM_USER_TAGS_MAX = 100000;
    /// <summary>
    /// Maximum number of Tags per business account.
    /// </summary>
    public const int EDAM_BUSINESS_TAGS_MAX = 100000;
    /// <summary>
    /// Maximum number of SavedSearches per account
    /// </summary>
    public const int EDAM_USER_SAVED_SEARCHES_MAX = 100;
    /// <summary>
    /// Maximum number of Notes per user
    /// </summary>
    public const int EDAM_USER_NOTES_MAX = 100000;
    /// <summary>
    /// Maximum number of Notes per business account
    /// </summary>
    public const int EDAM_BUSINESS_NOTES_MAX = 500000;
    /// <summary>
    /// Maximum number of Notebooks per user
    /// </summary>
    public const int EDAM_USER_NOTEBOOKS_MAX = 250;
    /// <summary>
    /// Maximum number of Workspaces per user
    /// </summary>
    public const int EDAM_USER_WORKSPACES_MAX = 0;
    /// <summary>
    /// Maximum number of Notebooks in a business account
    /// </summary>
    public const int EDAM_BUSINESS_NOTEBOOKS_MAX = 10000;
    /// <summary>
    /// Maximum number of Workspaces in a business account
    /// </summary>
    public const int EDAM_BUSINESS_WORKSPACES_MAX = 1000;
    /// <summary>
    /// Maximum number of recent email addresses that are maintained
    /// (see UserAttributes.recentMailedAddresses)
    /// </summary>
    public const int EDAM_USER_RECENT_MAILED_ADDRESSES_MAX = 10;
    /// <summary>
    /// The number of emails of any type that can be sent by a user with a Free
    /// account from the service per day.  If an email is sent to two different
    /// recipients, this counts as two emails.
    /// </summary>
    public const int EDAM_USER_MAIL_LIMIT_DAILY_FREE = 50;
    /// <summary>
    /// The number of emails of any type that can be sent by a user with a Premium
    /// account from the service per day.  If an email is sent to two different
    /// recipients, this counts as two emails.
    /// </summary>
    public const int EDAM_USER_MAIL_LIMIT_DAILY_PREMIUM = 200;
    /// <summary>
    /// The number of bytes of new data that may be uploaded to a Free user's
    /// account each month.
    /// </summary>
    public const long EDAM_USER_UPLOAD_LIMIT_FREE = 62914560;
    /// <summary>
    /// The number of bytes of new data that may be uploaded to a Premium user's
    /// account each month.
    /// </summary>
    public const long EDAM_USER_UPLOAD_LIMIT_PREMIUM = 10737418240;
    /// <summary>
    /// The number of bytes of new data that may be uploaded to new business
    /// account during the first month. 50GB.
    /// </summary>
    public const long EDAM_USER_UPLOAD_LIMIT_BUSINESS_FIRST_MONTH = 53687091200;
    /// <summary>
    /// The number of bytes of new data that may be uploaded to a business
    /// account for the next month. 20GB.
    /// </summary>
    public const long EDAM_USER_UPLOAD_LIMIT_BUSINESS_NEXT_MONTH = 21474836480;
    /// <summary>
    /// The number of bytes of new data that may be uploaded each month to an account at
    /// a Plus service level.
    /// </summary>
    public const long EDAM_USER_UPLOAD_LIMIT_PLUS = 1073741824;
    /// <summary>
    /// The number of bytes of new data uploaded in a monthly quota cycle at which point
    /// users should be prompted with a survey to gather information on how they are using
    /// Evernote.
    /// </summary>
    public const long EDAM_USER_UPLOAD_SURVEY_THRESHOLD = 5368709120;
    /// <summary>
    /// The number of bytes of new data that may be uploaded to a Business user's
    /// personal account each month. Note that content uploaded into the Business
    /// notebooks by the user does not count against this limit.
    /// </summary>
    public const long EDAM_USER_UPLOAD_LIMIT_BUSINESS = 10737418240;
    /// <summary>
    /// The number of bytes of new data that may be uploaded to a Business for each
    /// member of the business per month. The total bytes available can be determined
    /// by multiplying this with the number of business users.
    /// </summary>
    public const long EDAM_USER_UPLOAD_LIMIT_BUSINESS_PER_USER = 2147483647;
    /// <summary>
    /// Maximum total size of a Note that can be added to a Free account.
    /// The size of a note is calculated as:
    /// ENML content length (in Unicode characters) plus the sum of all resource
    /// sizes (in bytes).
    /// </summary>
    public const int EDAM_NOTE_SIZE_MAX_FREE = 26214400;
    /// <summary>
    /// Maximum total size of a Note that can be added to a Premium account.
    /// The size of a note is calculated as:
    /// ENML content length (in Unicode characters) plus the sum of all resource
    /// sizes (in bytes).
    /// </summary>
    public const int EDAM_NOTE_SIZE_MAX_PREMIUM = 209715200;
    /// <summary>
    /// Maximum size of a resource, in bytes, for Free accounts
    /// </summary>
    public const int EDAM_RESOURCE_SIZE_MAX_FREE = 26214400;
    /// <summary>
    /// Maximum size of a resource, in bytes, for Premium accounts
    /// </summary>
    public const int EDAM_RESOURCE_SIZE_MAX_PREMIUM = 209715200;
    /// <summary>
    /// Maximum number of linked notebooks per account, for a free
    /// account.
    /// </summary>
    public const int EDAM_USER_LINKED_NOTEBOOK_MAX = 100;
    /// <summary>
    /// Maximum number of linked notebooks per account, for a premium
    /// account.  Users who are part of an active business are also
    /// covered under "premium".
    /// </summary>
    public const int EDAM_USER_LINKED_NOTEBOOK_MAX_PREMIUM = 500;
    /// <summary>
    /// Maximum number of shared notebooks per business notebook
    /// </summary>
    public const int EDAM_NOTEBOOK_BUSINESS_SHARED_NOTEBOOK_MAX = 5000;
    /// <summary>
    /// Maximum number of shared notebooks per personal notebook
    /// </summary>
    public const int EDAM_NOTEBOOK_PERSONAL_SHARED_NOTEBOOK_MAX = 500;
    /// <summary>
    /// Maximum number of SharedNote records per business note
    /// </summary>
    public const int EDAM_NOTE_BUSINESS_SHARED_NOTE_MAX = 1000;
    /// <summary>
    /// Maximum number of SharedNote records per personal note
    /// </summary>
    public const int EDAM_NOTE_PERSONAL_SHARED_NOTE_MAX = 100;
    /// <summary>
    /// The minimum length of the content class attribute of a note.
    /// </summary>
    public const int EDAM_NOTE_CONTENT_CLASS_LEN_MIN = 3;
    /// <summary>
    /// The maximum length of the content class attribute of a note.
    /// </summary>
    public const int EDAM_NOTE_CONTENT_CLASS_LEN_MAX = 32;
    /// <summary>
    /// The regular expression that the content class of a note must match
    /// to be valid.
    /// </summary>
    public const string EDAM_NOTE_CONTENT_CLASS_REGEX = "^[A-Za-z0-9_.-]{3,32}$";
    /// <summary>
    /// The content class prefix used for all notes created by Evernote Hello.
    /// This prefix can be used to assemble individual content class strings,
    /// or can be used to create a wildcard search to get all notes created by
    /// Hello. When performing a wildcard search via filtered sync chunks or
    /// search strings, the * character must be appended to this constant.
    /// </summary>
    public const string EDAM_HELLO_APP_CONTENT_CLASS_PREFIX = "evernote.hello.";
    /// <summary>
    /// The content class prefix used for all notes created by Evernote Food.
    /// This prefix can be used to assemble individual content class strings,
    /// or can be used to create a wildcard search to get all notes created by
    /// Food. When performing a wildcard search via filtered sync chunks or
    /// search strings, the * character must be appended to this constant.
    /// </summary>
    public const string EDAM_FOOD_APP_CONTENT_CLASS_PREFIX = "evernote.food.";
    /// <summary>
    /// The content class prefix used for structured notes created by Evernote
    /// Hello that represents an encounter with a person. When performing a
    /// wildcard search via filtered sync chunks or search strings, the *
    /// character must be appended to this constant.
    /// </summary>
    public const string EDAM_CONTENT_CLASS_HELLO_ENCOUNTER = "evernote.hello.encounter";
    /// <summary>
    /// The content class prefix used for structured notes created by Evernote
    /// Hello that represents the user's profile. When performing a
    /// wildcard search via filtered sync chunks or search strings, the *
    /// character must be appended to this constant.
    /// </summary>
    public const string EDAM_CONTENT_CLASS_HELLO_PROFILE = "evernote.hello.profile";
    /// <summary>
    /// The content class prefix used for structured notes created by
    /// Evernote Food that captures the experience of a particular meal.
    /// When performing a wildcard search via filtered sync chunks or search
    /// strings, the * character must be appended to this constant.
    /// </summary>
    public const string EDAM_CONTENT_CLASS_FOOD_MEAL = "evernote.food.meal";
    /// <summary>
    /// The content class prefix used for structured notes created by Evernote
    /// Skitch. When performing a wildcard search via filtered sync chunks
    /// or search strings, the * character must be appended to this constant.
    /// </summary>
    public const string EDAM_CONTENT_CLASS_SKITCH_PREFIX = "evernote.skitch";
    /// <summary>
    /// The content class value used for structured image notes created by Evernote
    /// Skitch.
    /// </summary>
    public const string EDAM_CONTENT_CLASS_SKITCH = "evernote.skitch";
    /// <summary>
    /// The content class value used for structured PDF notes created by Evernote
    /// Skitch.
    /// </summary>
    public const string EDAM_CONTENT_CLASS_SKITCH_PDF = "evernote.skitch.pdf";
    /// <summary>
    /// The content class prefix used for structured notes created by Evernote
    /// Penultimate. When performing a wildcard search via filtered sync chunks
    /// or search strings, the * character must be appended to this constant.
    /// </summary>
    public const string EDAM_CONTENT_CLASS_PENULTIMATE_PREFIX = "evernote.penultimate.";
    /// <summary>
    /// The content class value used for structured notes created by Evernote
    /// Penultimate that represents a Penultimate notebook.
    /// </summary>
    public const string EDAM_CONTENT_CLASS_PENULTIMATE_NOTEBOOK = "evernote.penultimate.notebook";
    /// <summary>
    /// The NoteAttributes.sourceApplication value used for notes captured by the Post-it
    /// camera.
    /// </summary>
    public const string EDAM_SOURCE_APPLICATION_POSTIT = "postit";
    /// <summary>
    /// The NoteAttributes.sourceApplication value used for notes captured by the Moleskine
    /// page camera.
    /// </summary>
    public const string EDAM_SOURCE_APPLICATION_MOLESKINE = "moleskine";
    /// <summary>
    /// The NoteAttributes.sourceApplication value used for notes captured by
    /// PFU ScanSnap Evernote Edition.
    /// </summary>
    public const string EDAM_SOURCE_APPLICATION_EN_SCANSNAP = "scanner.scansnap.evernote";
    /// <summary>
    /// The NoteAttributes.sourceApplication value used for notes captured with the Embedded
    /// Web Clipper.
    /// </summary>
    public const string EDAM_SOURCE_APPLICATION_EWC = "clipncite.web";
    /// <summary>
    /// The NoteAttributes.sourceApplication value used for notes captured with the Android
    /// share extension.
    /// </summary>
    public const string EDAM_SOURCE_APPLICATION_ANDROID_SHARE_EXTENSION = "android.clipper.evernote";
    /// <summary>
    /// The NoteAttributes.sourceApplication value used for notes captured with the iOS share
    /// extension.
    /// </summary>
    public const string EDAM_SOURCE_APPLICATION_IOS_SHARE_EXTENSION = "ios.clipper.evernote";
    /// <summary>
    /// The NoteAttributes.sourceApplication value used for notes captured with the Evernote
    /// Web Clipper.
    /// </summary>
    public const string EDAM_SOURCE_APPLICATION_WEB_CLIPPER = "webclipper.evernote";
    /// <summary>
    /// The NoteAttributes.source value used for notes captured by the Microsoft Outlook clipper.
    /// </summary>
    public const string EDAM_SOURCE_OUTLOOK_CLIPPER = "app.ms.outlook";
    /// <summary>
    /// A NoteAttributes.noteTitleQuality value indicating that a note has no meaningful title,
    /// only a placeholder value such as "Untitled Note".
    /// </summary>
    public const int EDAM_NOTE_TITLE_QUALITY_UNTITLED = 0;
    /// <summary>
    /// A NoteAttributes.noteTitleQuality value indicating that the quality of an automatically
    /// generated note title is low. Examples of low quality titles include those based on a
    /// note's type and location, such as "Snapshot from 123 Sesame Street in New York".
    /// </summary>
    public const int EDAM_NOTE_TITLE_QUALITY_LOW = 1;
    /// <summary>
    /// A NoteAttributes.noteTitleQuality value indicating that the quality of an automatically
    /// generated note title is medium. Examples of medium quality titles include those based on a
    /// calendar entry, such as "Note from Weekly Staff Meeting".
    /// </summary>
    public const int EDAM_NOTE_TITLE_QUALITY_MEDIUM = 2;
    /// <summary>
    /// A NoteAttributes.noteTitleQuality value indicating that the quality of an automatically
    /// generated note title is high. Examples of high quality titles include those based on a
    /// scanned business card, such as "John Doe - Scanned Business Card".
    /// </summary>
    public const int EDAM_NOTE_TITLE_QUALITY_HIGH = 3;
    /// <summary>
    /// The minimum length of the plain text in a findRelated query, assuming that
    /// plaintext is being provided.
    /// </summary>
    public const int EDAM_RELATED_PLAINTEXT_LEN_MIN = 1;
    /// <summary>
    /// The maximum length of the plain text in a findRelated query, assuming that
    /// plaintext is being provided.
    /// </summary>
    public const int EDAM_RELATED_PLAINTEXT_LEN_MAX = 131072;
    /// <summary>
    /// The maximum number of notes that will be returned from a findRelated()
    /// query.
    /// </summary>
    public const int EDAM_RELATED_MAX_NOTES = 25;
    /// <summary>
    /// The maximum number of notebooks that will be returned from a findRelated()
    /// query.
    /// </summary>
    public const int EDAM_RELATED_MAX_NOTEBOOKS = 1;
    /// <summary>
    /// The maximum number of tags that will be returned from a findRelated() query.
    /// </summary>
    public const int EDAM_RELATED_MAX_TAGS = 25;
    /// <summary>
    /// The maximum number of experts that will be returned from a findRelated() query
    /// </summary>
    public const int EDAM_RELATED_MAX_EXPERTS = 10;
    /// <summary>
    /// The maximum number of related content snippets that will be returned from a
    /// findRelated() query.
    /// </summary>
    public const int EDAM_RELATED_MAX_RELATED_CONTENT = 10;
    /// <summary>
    /// The minimum length, in Unicode characters, of a description for a business
    /// notebook.
    /// </summary>
    public const int EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MIN = 1;
    /// <summary>
    /// The maximum length, in Unicode characters, of a description for a business
    /// notebook.
    /// </summary>
    public const int EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MAX = 200;
    /// <summary>
    /// All business notebook descriptions must match this pattern.
    /// This excludes control chars or line/paragraph separators.
    /// The string may not begin or end with whitespace.
    /// </summary>
    public const string EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_REGEX = "^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,198}[^\\p{Cc}\\p{Z}])?$";
    /// <summary>
    /// The maximum length of a business phone number.
    /// </summary>
    public const int EDAM_BUSINESS_PHONE_NUMBER_LEN_MAX = 20;
    /// <summary>
    /// Minimum length of a preference name
    /// </summary>
    public const int EDAM_PREFERENCE_NAME_LEN_MIN = 3;
    /// <summary>
    /// Maximum length of a preference name
    /// </summary>
    public const int EDAM_PREFERENCE_NAME_LEN_MAX = 32;
    /// <summary>
    /// Minimum length of a preference value
    /// </summary>
    public const int EDAM_PREFERENCE_VALUE_LEN_MIN = 1;
    /// <summary>
    /// Maximum length of a preference value
    /// </summary>
    public const int EDAM_PREFERENCE_VALUE_LEN_MAX = 1024;
    /// <summary>
    /// Maximum number of name/value pairs allowed
    /// </summary>
    public const int EDAM_MAX_PREFERENCES = 100;
    /// <summary>
    /// Maximum number of values per preference name when using
    /// values of size no greater than EDAM_PREFERENCE_VALUE_LEN_MAX.
    /// </summary>
    public const int EDAM_MAX_VALUES_PER_PREFERENCE = 256;
    /// <summary>
    /// The maximum length of a preference value if you only use one value
    /// per preference rather than up to EDAM_MAX_VALUES_PER_PREFERENCE.
    /// This option is useful if you want a single string that is larger
    /// than EDAM_PREFERENCE_VALUE_LEN_MAX and would otherwise need to
    /// split the string into multiple pieces to store it.
    /// </summary>
    public const int EDAM_PREFERENCE_ONLY_ONE_VALUE_LEN_MAX = 16384;
    /// <summary>
    /// A preference name must match this regex.
    /// </summary>
    public const string EDAM_PREFERENCE_NAME_REGEX = "^[A-Za-z0-9_.-]{3,32}$";
    /// <summary>
    /// A preference value must match this regex if you are using more
    /// than a single value for a preference.
    /// </summary>
    public const string EDAM_PREFERENCE_VALUE_REGEX = "^[^\\p{Cc}]{1,1024}$";
    /// <summary>
    /// A preference value must match this regex if you are using a single
    /// value for a preference.
    /// </summary>
    public const string EDAM_PREFERENCE_ONLY_ONE_VALUE_REGEX = "^[^\\p{Cc}]{1,16384}$";
    /// <summary>
    /// The name of the preferences entry that contains shortcuts.
    /// </summary>
    public const string EDAM_PREFERENCE_SHORTCUTS = "evernote.shortcuts";
    /// <summary>
    /// The name of the preferences entry that contains the notebook GUID (not the linked notebook) of
    /// the default business notebook. It must be in the format EDAM_GUID_REGEX.
    /// If a default business notebook is not set and the user is a business user
    /// the user should be prompted to set the default business notebook.
    /// The default business notebook must be a read/write notebook.
    /// Whenever the default business notebook guid is used, it must be revalidiated as a writable
    /// notebook. If it is not valid, the user should be re-prompted to set the value.
    /// This value is used by clients only.
    /// </summary>
    public const string EDAM_PREFERENCE_BUSINESS_DEFAULT_NOTEBOOK = "evernote.business.notebook";
    /// <summary>
    /// The name of the preferences entry that contains a boolean indicating that default
    /// quicknotes should go into a business notebook. The EDAM_PREFERENCE_BUSINESS_DEFAULT_NOTEBOOK
    /// must be set correctly for this preference to be honored.
    /// The quicknote preferences should only be set to "true", if quicknote should use a business
    /// notebook.
    /// Any value other than "true" (or the omission of a value) should be treated as "false".
    /// In this case, quicknotes should be created in in the user's personal default notebook.
    /// The interface should not allow users to set quicknote to a business notebook
    /// without a valid default business notebook selected, however, clients should handle the edge
    /// case of an invalid business notebook guid.  If a user stops being a business user or
    /// does not have write access to any business notebooks the quicknote preference should be
    /// ignored.
    /// </summary>
    public const string EDAM_PREFERENCE_BUSINESS_QUICKNOTE = "evernote.business.quicknote";
    /// <summary>
    /// The maximum number of shortcuts that a user may have.
    /// </summary>
    public const int EDAM_PREFERENCE_SHORTCUTS_MAX_VALUES = 250;
    /// <summary>
    /// Maximum length of the device identifier string associated with long sessions.
    /// </summary>
    public const int EDAM_DEVICE_ID_LEN_MAX = 32;
    /// <summary>
    /// Regular expression for device identifier strings associated with long sessions.
    /// </summary>
    public const string EDAM_DEVICE_ID_REGEX = "^[^\\p{Cc}]{1,32}$";
    /// <summary>
    /// Maximum length of the device description string associated with long sessions.
    /// </summary>
    public const int EDAM_DEVICE_DESCRIPTION_LEN_MAX = 64;
    /// <summary>
    /// Regular expression for device description strings associated with long sessions.
    /// </summary>
    public const string EDAM_DEVICE_DESCRIPTION_REGEX = "^[^\\p{Cc}]{1,64}$";
    /// <summary>
    /// Maximum number of search suggestions that can be returned
    /// </summary>
    public const int EDAM_SEARCH_SUGGESTIONS_MAX = 10;
    /// <summary>
    /// Maximum length of the search suggestion prefix
    /// </summary>
    public const int EDAM_SEARCH_SUGGESTIONS_PREFIX_LEN_MAX = 1024;
    /// <summary>
    /// Minimum length of the search suggestion prefix
    /// </summary>
    public const int EDAM_SEARCH_SUGGESTIONS_PREFIX_LEN_MIN = 2;
    /// <summary>
    /// Default maximum number of results the service will return for findContact
    /// </summary>
    public const int EDAM_FIND_CONTACT_DEFAULT_MAX_RESULTS = 100;
    /// <summary>
    /// Absolute maximum number of results the service will return for findContact
    /// </summary>
    public const int EDAM_FIND_CONTACT_MAX_RESULTS = 256;
    /// <summary>
    /// The maximum number of separate notes that may be queried in a single call to
    /// NoteStore.getViewersForNotes.
    /// </summary>
    public const int EDAM_NOTE_LOCK_VIEWERS_NOTES_MAX = 150;
    /// <summary>
    /// Absolute maximum number of results the servce will return for PersistentInternalMarket.getOrders()
    /// </summary>
    public const int EDAM_GET_ORDERS_MAX_RESULTS = 2000;
    /// <summary>
    /// The maximum length of a message body in unicode characters.
    /// </summary>
    public const int EDAM_MESSAGE_BODY_LEN_MAX = 2048;
    /// <summary>
    /// The regex to validate message.body against
    /// </summary>
    public const string EDAM_MESSAGE_BODY_REGEX = "^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,2046}[^\\p{Cc}\\p{Z}])?$";
    /// <summary>
    /// The maximum number of recipients on a MessageThread.
    /// </summary>
    public const int EDAM_MESSAGE_RECIPIENTS_MAX = 50;
    /// <summary>
    /// The maximum number of attachments a Message can have.
    /// </summary>
    public const int EDAM_MESSAGE_ATTACHMENTS_MAX = 100;
    /// <summary>
    /// The maximum length of a message attachment title in unicode characters.
    /// </summary>
    public const int EDAM_MESSAGE_ATTACHMENT_TITLE_LEN_MAX = 255;
    /// <summary>
    /// The regex to validate message attachment titles against
    /// </summary>
    public const string EDAM_MESSAGE_ATTACHMENT_TITLE_REGEX = "^[^\\p{Cc}\\p{Z}]([^\\p{Cc}\\p{Zl}\\p{Zp}]{0,253}[^\\p{Cc}\\p{Z}])?$";
    /// <summary>
    /// The maximum length of a message attachment snippet in unicode characters.
    /// </summary>
    public const int EDAM_MESSAGE_ATTACHMENT_SNIPPET_LEN_MAX = 2048;
    /// <summary>
    /// The regex to validate message attachment snippets against
    /// </summary>
    public const string EDAM_MESSAGE_ATTACHMENT_SNIPPET_REGEX = "^[^\\p{Cc}\\p{Z}]([\\n[^\\p{Cc}\\p{Zl}\\p{Zp}]]{0,2046}[^\\p{Cc}\\p{Z}])?$";
    /// <summary>
    /// Maximum user profile photo size, in bytes, that clients may send to the service.
    /// Photos may be resized before being stored on the service.
    /// </summary>
    public const int EDAM_USER_PROFILE_PHOTO_MAX_BYTES = 716800;
    /// <summary>
    /// The maximum length of a promotion ID in unicode characters.
    /// </summary>
    public const int EDAM_PROMOTION_ID_LEN_MAX = 32;
    /// <summary>
    /// The regex to validate promotion IDs against.
    /// </summary>
    public const string EDAM_PROMOTION_ID_REGEX = "^[A-Za-z0-9_.-]{1,32}$";
    /// <summary>
    /// App Feedback Rating range
    /// </summary>
    public const short EDAM_APP_RATING_MIN = 1;
    public const short EDAM_APP_RATING_MAX = 5;
    /// <summary>
    /// The maximium number of note snippets you can retrieve in a single request
    /// </summary>
    public const int EDAM_SNIPPETS_NOTES_MAX = 24;
    /// <summary>
    /// The maximum number of connected identities a client can request.
    /// </summary>
    public const int EDAM_CONNECTED_IDENTITY_REQUEST_MAX = 100;
    /// <summary>
    /// Maximum length for OpenID token. There is no official enforced limit. The length of the Token ID depends
    /// on the provider. 1000 seems to be the safest value at this time.
    /// </summary>
    public const int EDAM_OPEN_ID_ACCESS_TOKEN_MAX = 1000;
    static LimitsConstants()
    {
      EDAM_MIME_TYPES.Add("image/gif");
      EDAM_MIME_TYPES.Add("image/jpeg");
      EDAM_MIME_TYPES.Add("image/png");
      EDAM_MIME_TYPES.Add("audio/wav");
      EDAM_MIME_TYPES.Add("audio/mpeg");
      EDAM_MIME_TYPES.Add("audio/amr");
      EDAM_MIME_TYPES.Add("application/vnd.evernote.ink");
      EDAM_MIME_TYPES.Add("application/pdf");
      EDAM_MIME_TYPES.Add("video/mp4");
      EDAM_MIME_TYPES.Add("audio/aac");
      EDAM_MIME_TYPES.Add("audio/mp4");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/msword");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/mspowerpoint");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/excel");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/vnd.ms-word");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/vnd.ms-powerpoint");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/vnd.ms-excel");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/vnd.openxmlformats-officedocument.wordprocessingml.document");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/vnd.openxmlformats-officedocument.presentationml.presentation");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/vnd.apple.pages");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/vnd.apple.numbers");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/vnd.apple.keynote");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/x-iwork-pages-sffpages");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/x-iwork-numbers-sffnumbers");
      EDAM_INDEXABLE_RESOURCE_MIME_TYPES.Add("application/x-iwork-keynote-sffkey");
      EDAM_INDEXABLE_PLAINTEXT_MIME_TYPES.Add("application/x-sh");
      EDAM_INDEXABLE_PLAINTEXT_MIME_TYPES.Add("application/x-bsh");
      EDAM_INDEXABLE_PLAINTEXT_MIME_TYPES.Add("application/sql");
      EDAM_INDEXABLE_PLAINTEXT_MIME_TYPES.Add("application/x-sql");
      EDAM_PUBLISHING_URI_PROHIBITED.Add(".");
      EDAM_PUBLISHING_URI_PROHIBITED.Add("..");
    }
  }
}
