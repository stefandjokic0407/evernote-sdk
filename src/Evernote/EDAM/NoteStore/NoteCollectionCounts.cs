/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  ///  A data structure representing the number of notes for each notebook
  ///  and tag with a non-zero set of applicable notes.
  /// 
  /// <dl>
  ///  <dt>notebookCounts</dt>
  ///    <dd>
  ///    A mapping from the Notebook GUID to the number of
  ///    notes (from some selection) that are in the corresponding notebook.
  ///    </dd>
  /// 
  ///  <dt>tagCounts</dt>
  ///    <dd>
  ///    A mapping from the Tag GUID to the number of notes (from some
  ///    selection) that have the corresponding tag.
  ///    </dd>
  /// 
  ///  <dt>trashCount</dt>
  ///    <dd>
  ///    If this is set, then this is the number of notes that are in the trash.
  ///    If this is not set, then the number of notes in the trash hasn't been
  ///    reported.  (I.e. if there are no notes in the trash, this will be set
  ///    to 0.)
  ///    </dd>
  ///  </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NoteCollectionCounts : TBase
  {
    private Dictionary<string, int> _notebookCounts;
    private Dictionary<string, int> _tagCounts;
    private int _trashCount;

    public Dictionary<string, int> NotebookCounts
    {
      get
      {
        return _notebookCounts;
      }
      set
      {
        __isset.notebookCounts = true;
        this._notebookCounts = value;
      }
    }

    public Dictionary<string, int> TagCounts
    {
      get
      {
        return _tagCounts;
      }
      set
      {
        __isset.tagCounts = true;
        this._tagCounts = value;
      }
    }

    public int TrashCount
    {
      get
      {
        return _trashCount;
      }
      set
      {
        __isset.trashCount = true;
        this._trashCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool notebookCounts;
      public bool tagCounts;
      public bool trashCount;
    }

    public NoteCollectionCounts() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  NotebookCounts = new Dictionary<string, int>();
                  TMap _map80 = iprot.ReadMapBegin();
                  for( int _i81 = 0; _i81 < _map80.Count; ++_i81)
                  {
                    string _key82;
                    int _val83;
                    _key82 = iprot.ReadString();
                    _val83 = iprot.ReadI32();
                    NotebookCounts[_key82] = _val83;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Map) {
                {
                  TagCounts = new Dictionary<string, int>();
                  TMap _map84 = iprot.ReadMapBegin();
                  for( int _i85 = 0; _i85 < _map84.Count; ++_i85)
                  {
                    string _key86;
                    int _val87;
                    _key86 = iprot.ReadString();
                    _val87 = iprot.ReadI32();
                    TagCounts[_key86] = _val87;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                TrashCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NoteCollectionCounts");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NotebookCounts != null && __isset.notebookCounts) {
          field.Name = "notebookCounts";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I32, NotebookCounts.Count));
            foreach (string _iter88 in NotebookCounts.Keys)
            {
              oprot.WriteString(_iter88);
              oprot.WriteI32(NotebookCounts[_iter88]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (TagCounts != null && __isset.tagCounts) {
          field.Name = "tagCounts";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.I32, TagCounts.Count));
            foreach (string _iter89 in TagCounts.Keys)
            {
              oprot.WriteString(_iter89);
              oprot.WriteI32(TagCounts[_iter89]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.trashCount) {
          field.Name = "trashCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(TrashCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NoteCollectionCounts(");
      bool __first = true;
      if (NotebookCounts != null && __isset.notebookCounts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NotebookCounts: ");
        __sb.Append(NotebookCounts);
      }
      if (TagCounts != null && __isset.tagCounts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TagCounts: ");
        __sb.Append(TagCounts);
      }
      if (__isset.trashCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TrashCount: ");
        __sb.Append(TrashCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
