/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// This structure is used by the service to communicate to clients, via
  /// getNoteShareRelationships, which privilege levels are assignable to the
  /// target of a note share relationship.
  /// 
  /// <dl>
  /// <dt>noSetReadNote</dt>
  /// <dd>This value is true if the user is not allowed to set the privilege
  /// level to SharedNotePrivilegeLevel.READ_NOTE.</dd>
  /// 
  /// <dt>noSetModifyNote</dt>
  /// <dd>This value is true if the user is not allowed to set the privilege
  /// level to SharedNotePrivilegeLevel.MODIFY_NOTE.</dd>
  /// 
  /// <dt>noSetFullAccess</dt>
  /// <dd>This value is true if the user is not allowed to set the
  /// privilege level to SharedNotePrivilegeLevel.FULL_ACCESS.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NoteShareRelationshipRestrictions : TBase
  {
    private bool _noSetReadNote;
    private bool _noSetModifyNote;
    private bool _noSetFullAccess;

    public bool NoSetReadNote
    {
      get
      {
        return _noSetReadNote;
      }
      set
      {
        __isset.noSetReadNote = true;
        this._noSetReadNote = value;
      }
    }

    public bool NoSetModifyNote
    {
      get
      {
        return _noSetModifyNote;
      }
      set
      {
        __isset.noSetModifyNote = true;
        this._noSetModifyNote = value;
      }
    }

    public bool NoSetFullAccess
    {
      get
      {
        return _noSetFullAccess;
      }
      set
      {
        __isset.noSetFullAccess = true;
        this._noSetFullAccess = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool noSetReadNote;
      public bool noSetModifyNote;
      public bool noSetFullAccess;
    }

    public NoteShareRelationshipRestrictions() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                NoSetReadNote = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                NoSetModifyNote = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                NoSetFullAccess = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NoteShareRelationshipRestrictions");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.noSetReadNote) {
          field.Name = "noSetReadNote";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoSetReadNote);
          oprot.WriteFieldEnd();
        }
        if (__isset.noSetModifyNote) {
          field.Name = "noSetModifyNote";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoSetModifyNote);
          oprot.WriteFieldEnd();
        }
        if (__isset.noSetFullAccess) {
          field.Name = "noSetFullAccess";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoSetFullAccess);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NoteShareRelationshipRestrictions(");
      bool __first = true;
      if (__isset.noSetReadNote) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoSetReadNote: ");
        __sb.Append(NoSetReadNote);
      }
      if (__isset.noSetModifyNote) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoSetModifyNote: ");
        __sb.Append(NoSetModifyNote);
      }
      if (__isset.noSetFullAccess) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoSetFullAccess: ");
        __sb.Append(NoSetFullAccess);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
