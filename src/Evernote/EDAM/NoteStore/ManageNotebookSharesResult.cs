/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// The return value of a call to the manageNotebookShares method.
  /// 
  /// <dl>
  /// <dt>errors</dt>
  /// <dd>If the method completed without throwing exceptions, some errors
  /// might still have occurred, and in that case, this field will contain
  /// the list of those errors the occurred.
  /// </dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ManageNotebookSharesResult : TBase
  {
    private List<ManageNotebookSharesError> _errors;

    public List<ManageNotebookSharesError> Errors
    {
      get
      {
        return _errors;
      }
      set
      {
        __isset.errors = true;
        this._errors = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool errors;
    }

    public ManageNotebookSharesResult() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Errors = new List<ManageNotebookSharesError>();
                  TList _list146 = iprot.ReadListBegin();
                  for( int _i147 = 0; _i147 < _list146.Count; ++_i147)
                  {
                    ManageNotebookSharesError _elem148;
                    _elem148 = new ManageNotebookSharesError();
                    _elem148.Read(iprot);
                    Errors.Add(_elem148);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ManageNotebookSharesResult");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Errors != null && __isset.errors) {
          field.Name = "errors";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Errors.Count));
            foreach (ManageNotebookSharesError _iter149 in Errors)
            {
              _iter149.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ManageNotebookSharesResult(");
      bool __first = true;
      if (Errors != null && __isset.errors) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Errors: ");
        __sb.Append(Errors);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
