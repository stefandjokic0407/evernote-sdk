/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// A structure used to share a notebook with one or more recipients at a given privilege.
  /// 
  /// <dl>
  ///   <dt>notebookGuid</dt>
  ///   <dd>The GUID of the notebook.</dd>
  /// 
  ///   <dt>recipientThreadId</dt>
  ///   <dd>The recipients of the notebook share specified as a messaging thread ID. If you
  ///       have an existing messaging thread to share the note with, specify its ID
  ///       here instead of recipientContacts in order to properly support defunct
  ///       identities. The sharer must be a participant of the thread. Either this field
  ///       or recipientContacts must be set.</dd>
  /// 
  ///   <dt>recipientContacts</dt>
  ///   <dd>The recipients of the notebook share specified as a list of contacts. This should
  ///       only be set if the sharing takes place before the thread is created. Use
  ///       recipientThreadId instead when sharing with an existing thread. Either this
  ///       field or recipientThreadId must be set.</dd>
  /// 
  ///   <dt>privilege</dt>
  ///   <dd>The privilege level to be granted.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NotebookShareTemplate : TBase
  {
    private string _notebookGuid;
    private long _recipientThreadId;
    private List<Evernote.EDAM.Type.Contact> _recipientContacts;
    private Evernote.EDAM.Type.SharedNotebookPrivilegeLevel _privilege;

    public string NotebookGuid
    {
      get
      {
        return _notebookGuid;
      }
      set
      {
        __isset.notebookGuid = true;
        this._notebookGuid = value;
      }
    }

    public long RecipientThreadId
    {
      get
      {
        return _recipientThreadId;
      }
      set
      {
        __isset.recipientThreadId = true;
        this._recipientThreadId = value;
      }
    }

    public List<Evernote.EDAM.Type.Contact> RecipientContacts
    {
      get
      {
        return _recipientContacts;
      }
      set
      {
        __isset.recipientContacts = true;
        this._recipientContacts = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="Evernote.EDAM.Type.SharedNotebookPrivilegeLevel"/>
    /// </summary>
    public Evernote.EDAM.Type.SharedNotebookPrivilegeLevel Privilege
    {
      get
      {
        return _privilege;
      }
      set
      {
        __isset.privilege = true;
        this._privilege = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool notebookGuid;
      public bool recipientThreadId;
      public bool recipientContacts;
      public bool privilege;
    }

    public NotebookShareTemplate() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                NotebookGuid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                RecipientThreadId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  RecipientContacts = new List<Evernote.EDAM.Type.Contact>();
                  TList _list154 = iprot.ReadListBegin();
                  for( int _i155 = 0; _i155 < _list154.Count; ++_i155)
                  {
                    Evernote.EDAM.Type.Contact _elem156;
                    _elem156 = new Evernote.EDAM.Type.Contact();
                    _elem156.Read(iprot);
                    RecipientContacts.Add(_elem156);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Privilege = (Evernote.EDAM.Type.SharedNotebookPrivilegeLevel)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NotebookShareTemplate");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NotebookGuid != null && __isset.notebookGuid) {
          field.Name = "notebookGuid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NotebookGuid);
          oprot.WriteFieldEnd();
        }
        if (RecipientContacts != null && __isset.recipientContacts) {
          field.Name = "recipientContacts";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, RecipientContacts.Count));
            foreach (Evernote.EDAM.Type.Contact _iter157 in RecipientContacts)
            {
              _iter157.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.privilege) {
          field.Name = "privilege";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Privilege);
          oprot.WriteFieldEnd();
        }
        if (__isset.recipientThreadId) {
          field.Name = "recipientThreadId";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(RecipientThreadId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NotebookShareTemplate(");
      bool __first = true;
      if (NotebookGuid != null && __isset.notebookGuid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NotebookGuid: ");
        __sb.Append(NotebookGuid);
      }
      if (__isset.recipientThreadId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RecipientThreadId: ");
        __sb.Append(RecipientThreadId);
      }
      if (RecipientContacts != null && __isset.recipientContacts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RecipientContacts: ");
        __sb.Append(RecipientContacts);
      }
      if (__isset.privilege) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Privilege: ");
        __sb.Append(Privilege);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
