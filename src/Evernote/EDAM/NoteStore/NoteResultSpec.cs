/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// This structure is provided to the getNoteWithResultSpec function to specify the subset of
  /// fields that should be included in the Note that is returned. This allows clients to request
  /// the minimum set of information that they require when retrieving a note, reducing the size
  /// of the response and improving the response time.
  /// 
  /// If one of the fields in this spec is not set, then it will be treated as 'false' by the service,
  /// so that the default behavior is to include none of the fields below in the Note.
  /// 
  /// <dl>
  ///   <dt>includeContent</dt>
  ///   <dd>If true, the Note.content field will be populated with the note's ENML contents.</dd>
  /// 
  ///   <dt>includeResourcesData</dt>
  ///   <dd>If true, any Resource elements will include the binary contents of their 'data' field's
  ///     body.</dd>
  /// 
  ///   <dt>includeResourcesRecognition</dt>
  ///   <dd>If true, any Resource elements will include the binary contents of their 'recognition'
  ///     field's body if recognition data is available.</dd>
  /// 
  ///   <dt>includeResourcesAlternateData</dt>
  ///   <dd>If true, any Resource elements will include the binary contents of their 'alternateData'
  ///     field's body, if an alternate form is available.</dd>
  /// 
  ///   <dt>includeSharedNotes</dt>
  ///   <dd>If true, the Note.sharedNotes field will be populated with the note's shares.</dd>
  /// 
  ///   <dt>includeNoteAppDataValues</dt>
  ///   <dd>If true, the Note.attributes.applicationData.fullMap field will be populated.</dd>
  /// 
  ///   <dt>includeResourceAppDataValues</dt>
  ///   <dd>If true, the Note.resource.attributes.applicationData.fullMap field will be populated.</dd>
  /// 
  ///   <dt>includeAccountLimits</dt>
  ///   <dd>If true, the Note.limits field will be populated with the note owner's account limits.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NoteResultSpec : TBase
  {
    private bool _includeContent;
    private bool _includeResourcesData;
    private bool _includeResourcesRecognition;
    private bool _includeResourcesAlternateData;
    private bool _includeSharedNotes;
    private bool _includeNoteAppDataValues;
    private bool _includeResourceAppDataValues;
    private bool _includeAccountLimits;

    public bool IncludeContent
    {
      get
      {
        return _includeContent;
      }
      set
      {
        __isset.includeContent = true;
        this._includeContent = value;
      }
    }

    public bool IncludeResourcesData
    {
      get
      {
        return _includeResourcesData;
      }
      set
      {
        __isset.includeResourcesData = true;
        this._includeResourcesData = value;
      }
    }

    public bool IncludeResourcesRecognition
    {
      get
      {
        return _includeResourcesRecognition;
      }
      set
      {
        __isset.includeResourcesRecognition = true;
        this._includeResourcesRecognition = value;
      }
    }

    public bool IncludeResourcesAlternateData
    {
      get
      {
        return _includeResourcesAlternateData;
      }
      set
      {
        __isset.includeResourcesAlternateData = true;
        this._includeResourcesAlternateData = value;
      }
    }

    public bool IncludeSharedNotes
    {
      get
      {
        return _includeSharedNotes;
      }
      set
      {
        __isset.includeSharedNotes = true;
        this._includeSharedNotes = value;
      }
    }

    public bool IncludeNoteAppDataValues
    {
      get
      {
        return _includeNoteAppDataValues;
      }
      set
      {
        __isset.includeNoteAppDataValues = true;
        this._includeNoteAppDataValues = value;
      }
    }

    public bool IncludeResourceAppDataValues
    {
      get
      {
        return _includeResourceAppDataValues;
      }
      set
      {
        __isset.includeResourceAppDataValues = true;
        this._includeResourceAppDataValues = value;
      }
    }

    public bool IncludeAccountLimits
    {
      get
      {
        return _includeAccountLimits;
      }
      set
      {
        __isset.includeAccountLimits = true;
        this._includeAccountLimits = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool includeContent;
      public bool includeResourcesData;
      public bool includeResourcesRecognition;
      public bool includeResourcesAlternateData;
      public bool includeSharedNotes;
      public bool includeNoteAppDataValues;
      public bool includeResourceAppDataValues;
      public bool includeAccountLimits;
    }

    public NoteResultSpec() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                IncludeContent = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                IncludeResourcesData = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                IncludeResourcesRecognition = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                IncludeResourcesAlternateData = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                IncludeSharedNotes = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                IncludeNoteAppDataValues = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                IncludeResourceAppDataValues = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                IncludeAccountLimits = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NoteResultSpec");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.includeContent) {
          field.Name = "includeContent";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeContent);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeResourcesData) {
          field.Name = "includeResourcesData";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeResourcesData);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeResourcesRecognition) {
          field.Name = "includeResourcesRecognition";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeResourcesRecognition);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeResourcesAlternateData) {
          field.Name = "includeResourcesAlternateData";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeResourcesAlternateData);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeSharedNotes) {
          field.Name = "includeSharedNotes";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeSharedNotes);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeNoteAppDataValues) {
          field.Name = "includeNoteAppDataValues";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeNoteAppDataValues);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeResourceAppDataValues) {
          field.Name = "includeResourceAppDataValues";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeResourceAppDataValues);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeAccountLimits) {
          field.Name = "includeAccountLimits";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeAccountLimits);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NoteResultSpec(");
      bool __first = true;
      if (__isset.includeContent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeContent: ");
        __sb.Append(IncludeContent);
      }
      if (__isset.includeResourcesData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeResourcesData: ");
        __sb.Append(IncludeResourcesData);
      }
      if (__isset.includeResourcesRecognition) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeResourcesRecognition: ");
        __sb.Append(IncludeResourcesRecognition);
      }
      if (__isset.includeResourcesAlternateData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeResourcesAlternateData: ");
        __sb.Append(IncludeResourcesAlternateData);
      }
      if (__isset.includeSharedNotes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeSharedNotes: ");
        __sb.Append(IncludeSharedNotes);
      }
      if (__isset.includeNoteAppDataValues) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeNoteAppDataValues: ");
        __sb.Append(IncludeNoteAppDataValues);
      }
      if (__isset.includeResourceAppDataValues) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeResourceAppDataValues: ");
        __sb.Append(IncludeResourceAppDataValues);
      }
      if (__isset.includeAccountLimits) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeAccountLimits: ");
        __sb.Append(IncludeAccountLimits);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
