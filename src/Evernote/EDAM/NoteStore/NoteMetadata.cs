/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// This structure is used in the set of results returned by the
  /// findNotesMetadata function.  It represents the high-level information about
  /// a single Note, without some of the larger deep structure.  This allows
  /// for the information about a list of Notes to be returned relatively quickly
  /// with less marshalling and data transfer to remote clients.
  /// Most fields in this structure are identical to the corresponding field in
  /// the Note structure, with the exception of:
  /// 
  /// <dl>
  /// <dt>largestResourceMime</dt>
  ///   <dd>If set, then this will contain the MIME type of the largest Resource
  ///   (in bytes) within the Note.  This may be useful, for example, to choose
  ///   an appropriate icon or thumbnail to represent the Note.
  ///   </dd>
  /// 
  /// <dt>largestResourceSize</dt>
  ///  <dd>If set, this will contain the size of the largest Resource file, in
  ///  bytes, within the Note.  This may be useful, for example, to decide whether
  ///  to ask the server for a thumbnail to represent the Note.
  ///  </dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NoteMetadata : TBase
  {
    private string _title;
    private int _contentLength;
    private long _created;
    private long _updated;
    private long _deleted;
    private int _updateSequenceNum;
    private string _notebookGuid;
    private List<string> _tagGuids;
    private Evernote.EDAM.Type.NoteAttributes _attributes;
    private string _largestResourceMime;
    private int _largestResourceSize;

    public string Guid { get; set; }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public int ContentLength
    {
      get
      {
        return _contentLength;
      }
      set
      {
        __isset.contentLength = true;
        this._contentLength = value;
      }
    }

    public long Created
    {
      get
      {
        return _created;
      }
      set
      {
        __isset.created = true;
        this._created = value;
      }
    }

    public long Updated
    {
      get
      {
        return _updated;
      }
      set
      {
        __isset.updated = true;
        this._updated = value;
      }
    }

    public long Deleted
    {
      get
      {
        return _deleted;
      }
      set
      {
        __isset.deleted = true;
        this._deleted = value;
      }
    }

    public int UpdateSequenceNum
    {
      get
      {
        return _updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this._updateSequenceNum = value;
      }
    }

    public string NotebookGuid
    {
      get
      {
        return _notebookGuid;
      }
      set
      {
        __isset.notebookGuid = true;
        this._notebookGuid = value;
      }
    }

    public List<string> TagGuids
    {
      get
      {
        return _tagGuids;
      }
      set
      {
        __isset.tagGuids = true;
        this._tagGuids = value;
      }
    }

    public Evernote.EDAM.Type.NoteAttributes Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }

    public string LargestResourceMime
    {
      get
      {
        return _largestResourceMime;
      }
      set
      {
        __isset.largestResourceMime = true;
        this._largestResourceMime = value;
      }
    }

    public int LargestResourceSize
    {
      get
      {
        return _largestResourceSize;
      }
      set
      {
        __isset.largestResourceSize = true;
        this._largestResourceSize = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool title;
      public bool contentLength;
      public bool created;
      public bool updated;
      public bool deleted;
      public bool updateSequenceNum;
      public bool notebookGuid;
      public bool tagGuids;
      public bool attributes;
      public bool largestResourceMime;
      public bool largestResourceSize;
    }

    public NoteMetadata() {
    }

    public NoteMetadata(string guid) : this() {
      this.Guid = guid;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_guid = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Guid = iprot.ReadString();
                isset_guid = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Title = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                ContentLength = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                Created = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Updated = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Deleted = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                UpdateSequenceNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                NotebookGuid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.List) {
                {
                  TagGuids = new List<string>();
                  TList _list64 = iprot.ReadListBegin();
                  for( int _i65 = 0; _i65 < _list64.Count; ++_i65)
                  {
                    string _elem66;
                    _elem66 = iprot.ReadString();
                    TagGuids.Add(_elem66);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Struct) {
                Attributes = new Evernote.EDAM.Type.NoteAttributes();
                Attributes.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.String) {
                LargestResourceMime = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.I32) {
                LargestResourceSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_guid)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Guid not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NoteMetadata");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Guid == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Guid not set");
        field.Name = "guid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Guid);
        oprot.WriteFieldEnd();
        if (Title != null && __isset.title) {
          field.Name = "title";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Title);
          oprot.WriteFieldEnd();
        }
        if (__isset.contentLength) {
          field.Name = "contentLength";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ContentLength);
          oprot.WriteFieldEnd();
        }
        if (__isset.created) {
          field.Name = "created";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Created);
          oprot.WriteFieldEnd();
        }
        if (__isset.updated) {
          field.Name = "updated";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Updated);
          oprot.WriteFieldEnd();
        }
        if (__isset.deleted) {
          field.Name = "deleted";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Deleted);
          oprot.WriteFieldEnd();
        }
        if (__isset.updateSequenceNum) {
          field.Name = "updateSequenceNum";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UpdateSequenceNum);
          oprot.WriteFieldEnd();
        }
        if (NotebookGuid != null && __isset.notebookGuid) {
          field.Name = "notebookGuid";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NotebookGuid);
          oprot.WriteFieldEnd();
        }
        if (TagGuids != null && __isset.tagGuids) {
          field.Name = "tagGuids";
          field.Type = TType.List;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, TagGuids.Count));
            foreach (string _iter67 in TagGuids)
            {
              oprot.WriteString(_iter67);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Attributes != null && __isset.attributes) {
          field.Name = "attributes";
          field.Type = TType.Struct;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          Attributes.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (LargestResourceMime != null && __isset.largestResourceMime) {
          field.Name = "largestResourceMime";
          field.Type = TType.String;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LargestResourceMime);
          oprot.WriteFieldEnd();
        }
        if (__isset.largestResourceSize) {
          field.Name = "largestResourceSize";
          field.Type = TType.I32;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LargestResourceSize);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NoteMetadata(");
      __sb.Append(", Guid: ");
      __sb.Append(Guid);
      if (Title != null && __isset.title) {
        __sb.Append(", Title: ");
        __sb.Append(Title);
      }
      if (__isset.contentLength) {
        __sb.Append(", ContentLength: ");
        __sb.Append(ContentLength);
      }
      if (__isset.created) {
        __sb.Append(", Created: ");
        __sb.Append(Created);
      }
      if (__isset.updated) {
        __sb.Append(", Updated: ");
        __sb.Append(Updated);
      }
      if (__isset.deleted) {
        __sb.Append(", Deleted: ");
        __sb.Append(Deleted);
      }
      if (__isset.updateSequenceNum) {
        __sb.Append(", UpdateSequenceNum: ");
        __sb.Append(UpdateSequenceNum);
      }
      if (NotebookGuid != null && __isset.notebookGuid) {
        __sb.Append(", NotebookGuid: ");
        __sb.Append(NotebookGuid);
      }
      if (TagGuids != null && __isset.tagGuids) {
        __sb.Append(", TagGuids: ");
        __sb.Append(TagGuids);
      }
      if (Attributes != null && __isset.attributes) {
        __sb.Append(", Attributes: ");
        __sb.Append(Attributes== null ? "<null>" : Attributes.ToString());
      }
      if (LargestResourceMime != null && __isset.largestResourceMime) {
        __sb.Append(", LargestResourceMime: ");
        __sb.Append(LargestResourceMime);
      }
      if (__isset.largestResourceSize) {
        __sb.Append(", LargestResourceSize: ");
        __sb.Append(LargestResourceSize);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
