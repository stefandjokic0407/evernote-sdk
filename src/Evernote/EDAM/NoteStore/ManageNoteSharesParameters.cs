/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// Captures parameters used by clients to manage the shares for a given
  /// note via the manageNoteShares function. This is used only to manage
  /// the existing memberships and invitations for a note. To invite a new
  /// recipient, use NoteStore.createOrUpdateSharedNotes.
  /// 
  /// The only field of an existing membership or invitation that can be
  /// updated by this function is the share privilege.
  /// 
  /// <dl>
  ///   <dt>noteGuid</dt>
  ///   <dd>The GUID of the note whose shares are being managed.</dd>
  /// 
  ///   <dt>membershipsToUpdate</dt>
  ///   <dd>A list of existing memberships to update. This field is not
  ///     meant to be the full set of memberships for the note. Clients
  ///     should only include those existing memberships that they wish
  ///     to modify. To remove an existing membership, see the unshares
  ///     field.</dd>
  /// 
  ///   <dt>invitationsToUpdate</dt>
  ///   <dd>The list of outstanding invitations to update, as matched by the
  ///     identity field of the NoteInvitationShareRelatioship instances.
  ///     This field is not meant to be the full set of invitations for the
  ///     note. Clients should only include those existing invitations that
  ///     they wish to modify.</dd>
  /// 
  ///   <dt>membershipsToUnshare</dt>
  ///   <dd>A list of existing memberships to expunge from the service.</dd>
  /// 
  ///   <dt>invitationsToUnshare</dt>
  ///   <dd>A list of outstanding invitations to expunge from the service.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ManageNoteSharesParameters : TBase
  {
    private string _noteGuid;
    private List<NoteMemberShareRelationship> _membershipsToUpdate;
    private List<NoteInvitationShareRelationship> _invitationsToUpdate;
    private List<int> _membershipsToUnshare;
    private List<long> _invitationsToUnshare;

    public string NoteGuid
    {
      get
      {
        return _noteGuid;
      }
      set
      {
        __isset.noteGuid = true;
        this._noteGuid = value;
      }
    }

    public List<NoteMemberShareRelationship> MembershipsToUpdate
    {
      get
      {
        return _membershipsToUpdate;
      }
      set
      {
        __isset.membershipsToUpdate = true;
        this._membershipsToUpdate = value;
      }
    }

    public List<NoteInvitationShareRelationship> InvitationsToUpdate
    {
      get
      {
        return _invitationsToUpdate;
      }
      set
      {
        __isset.invitationsToUpdate = true;
        this._invitationsToUpdate = value;
      }
    }

    public List<int> MembershipsToUnshare
    {
      get
      {
        return _membershipsToUnshare;
      }
      set
      {
        __isset.membershipsToUnshare = true;
        this._membershipsToUnshare = value;
      }
    }

    public List<long> InvitationsToUnshare
    {
      get
      {
        return _invitationsToUnshare;
      }
      set
      {
        __isset.invitationsToUnshare = true;
        this._invitationsToUnshare = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool noteGuid;
      public bool membershipsToUpdate;
      public bool invitationsToUpdate;
      public bool membershipsToUnshare;
      public bool invitationsToUnshare;
    }

    public ManageNoteSharesParameters() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                NoteGuid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  MembershipsToUpdate = new List<NoteMemberShareRelationship>();
                  TList _list170 = iprot.ReadListBegin();
                  for( int _i171 = 0; _i171 < _list170.Count; ++_i171)
                  {
                    NoteMemberShareRelationship _elem172;
                    _elem172 = new NoteMemberShareRelationship();
                    _elem172.Read(iprot);
                    MembershipsToUpdate.Add(_elem172);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  InvitationsToUpdate = new List<NoteInvitationShareRelationship>();
                  TList _list173 = iprot.ReadListBegin();
                  for( int _i174 = 0; _i174 < _list173.Count; ++_i174)
                  {
                    NoteInvitationShareRelationship _elem175;
                    _elem175 = new NoteInvitationShareRelationship();
                    _elem175.Read(iprot);
                    InvitationsToUpdate.Add(_elem175);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  MembershipsToUnshare = new List<int>();
                  TList _list176 = iprot.ReadListBegin();
                  for( int _i177 = 0; _i177 < _list176.Count; ++_i177)
                  {
                    int _elem178;
                    _elem178 = iprot.ReadI32();
                    MembershipsToUnshare.Add(_elem178);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  InvitationsToUnshare = new List<long>();
                  TList _list179 = iprot.ReadListBegin();
                  for( int _i180 = 0; _i180 < _list179.Count; ++_i180)
                  {
                    long _elem181;
                    _elem181 = iprot.ReadI64();
                    InvitationsToUnshare.Add(_elem181);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ManageNoteSharesParameters");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NoteGuid != null && __isset.noteGuid) {
          field.Name = "noteGuid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NoteGuid);
          oprot.WriteFieldEnd();
        }
        if (MembershipsToUpdate != null && __isset.membershipsToUpdate) {
          field.Name = "membershipsToUpdate";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, MembershipsToUpdate.Count));
            foreach (NoteMemberShareRelationship _iter182 in MembershipsToUpdate)
            {
              _iter182.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (InvitationsToUpdate != null && __isset.invitationsToUpdate) {
          field.Name = "invitationsToUpdate";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, InvitationsToUpdate.Count));
            foreach (NoteInvitationShareRelationship _iter183 in InvitationsToUpdate)
            {
              _iter183.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (MembershipsToUnshare != null && __isset.membershipsToUnshare) {
          field.Name = "membershipsToUnshare";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, MembershipsToUnshare.Count));
            foreach (int _iter184 in MembershipsToUnshare)
            {
              oprot.WriteI32(_iter184);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (InvitationsToUnshare != null && __isset.invitationsToUnshare) {
          field.Name = "invitationsToUnshare";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I64, InvitationsToUnshare.Count));
            foreach (long _iter185 in InvitationsToUnshare)
            {
              oprot.WriteI64(_iter185);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ManageNoteSharesParameters(");
      bool __first = true;
      if (NoteGuid != null && __isset.noteGuid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoteGuid: ");
        __sb.Append(NoteGuid);
      }
      if (MembershipsToUpdate != null && __isset.membershipsToUpdate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MembershipsToUpdate: ");
        __sb.Append(MembershipsToUpdate);
      }
      if (InvitationsToUpdate != null && __isset.invitationsToUpdate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InvitationsToUpdate: ");
        __sb.Append(InvitationsToUpdate);
      }
      if (MembershipsToUnshare != null && __isset.membershipsToUnshare) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MembershipsToUnshare: ");
        __sb.Append(MembershipsToUnshare);
      }
      if (InvitationsToUnshare != null && __isset.invitationsToUnshare) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InvitationsToUnshare: ");
        __sb.Append(InvitationsToUnshare);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
