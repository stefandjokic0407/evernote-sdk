/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// Captures errors that occur during a call to manageNoteShares. That
  /// function can be run best-effort, meaning that some change requests can
  /// be applied while others fail. Note that some errors such as system
  /// exceptions may still cause the entire call to fail.
  /// 
  /// Only one of the two ID fields will be set on a given error.
  /// 
  /// Only one of the two exception fields will be set on a given error.
  /// 
  /// <dl>
  ///   <dt>identityID</dt>
  ///   <dd>The identity ID of an outstanding invitation that was not updated
  ///     due to the error.</dd>
  /// 
  ///   <dt>userID</dt>
  ///   <dd>The user ID of an existing membership that was not updated due
  ///     to the error.</dd>
  /// 
  ///   <dt>userException</dt>
  ///   <dd>If the error is represented as an EDAMUserException that would
  ///     have otherwise been thrown without best-effort execution.</dd>
  /// 
  ///   <dt>notFoundException</dt>
  ///   <dd>If the error is represented as an EDAMNotFoundException that
  ///     would have otherwise been thrown without best-effort execution.
  ///     The identifier field of the exception will be either "Identity.id"
  ///     or "User.id", indicating that no existing share could be found for
  ///     the specified recipient.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ManageNoteSharesError : TBase
  {
    private long _identityID;
    private int _userID;
    private Evernote.EDAM.Error.EDAMUserException _userException;
    private Evernote.EDAM.Error.EDAMNotFoundException _notFoundException;

    public long IdentityID
    {
      get
      {
        return _identityID;
      }
      set
      {
        __isset.identityID = true;
        this._identityID = value;
      }
    }

    public int UserID
    {
      get
      {
        return _userID;
      }
      set
      {
        __isset.userID = true;
        this._userID = value;
      }
    }

    public Evernote.EDAM.Error.EDAMUserException UserException
    {
      get
      {
        return _userException;
      }
      set
      {
        __isset.userException = true;
        this._userException = value;
      }
    }

    public Evernote.EDAM.Error.EDAMNotFoundException NotFoundException
    {
      get
      {
        return _notFoundException;
      }
      set
      {
        __isset.notFoundException = true;
        this._notFoundException = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool identityID;
      public bool userID;
      public bool userException;
      public bool notFoundException;
    }

    public ManageNoteSharesError() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                IdentityID = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                UserID = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                UserException = new Evernote.EDAM.Error.EDAMUserException();
                UserException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();
                NotFoundException.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ManageNoteSharesError");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.identityID) {
          field.Name = "identityID";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(IdentityID);
          oprot.WriteFieldEnd();
        }
        if (__isset.userID) {
          field.Name = "userID";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserID);
          oprot.WriteFieldEnd();
        }
        if (UserException != null && __isset.userException) {
          field.Name = "userException";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          UserException.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (NotFoundException != null && __isset.notFoundException) {
          field.Name = "notFoundException";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          NotFoundException.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ManageNoteSharesError(");
      bool __first = true;
      if (__isset.identityID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdentityID: ");
        __sb.Append(IdentityID);
      }
      if (__isset.userID) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserID: ");
        __sb.Append(UserID);
      }
      if (UserException != null && __isset.userException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserException: ");
        __sb.Append(UserException== null ? "<null>" : UserException.ToString());
      }
      if (NotFoundException != null && __isset.notFoundException) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NotFoundException: ");
        __sb.Append(NotFoundException== null ? "<null>" : NotFoundException.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
