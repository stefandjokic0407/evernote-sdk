/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// Describes an invitation to a person to use their Evernote
  /// credentials to become a member of a notebook.
  /// 
  /// <dl>
  /// <dt>displayName</dt>
  /// <dd>The string that clients should show to users to represent this
  /// invitation.</dd>
  /// 
  /// <dt>recipientUserIdentity</dt>
  /// <dd>Identifies the recipient of the invitation. The user identity
  /// type can be either EMAIL, EVERNOTE or IDENTITYID. If the
  /// invitation was created using the classic notebook sharing APIs it will be EMAIL. If it
  /// was created using the new identity-based notebook sharing APIs it will either be
  /// EVERNOTE or IDENTITYID, depending on whether we can map the identity to an Evernote
  /// user at the time of creation.
  /// </dd>
  /// 
  /// <dt>privilege</dt>
  /// <dd>The privilege level at which the member will be joined, if it
  /// turns out that the member is not already joined at a higher level.
  /// Note that the <tt>identity</tt> field may not uniquely identify an
  /// Evernote User ID, and so we won't know until the invitation is
  /// redeemed whether or not the recipient already has privilege.</dd>
  /// 
  /// <dt>sharerUserId</dt>
  /// <dd>The user id of the user who most recently shared this notebook
  /// to this identity. This field is used by the service to convey information
  /// to the user, so clients should treat it as read-only.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class InvitationShareRelationship : TBase
  {
    private string _displayName;
    private Evernote.EDAM.Type.UserIdentity _recipientUserIdentity;
    private ShareRelationshipPrivilegeLevel _privilege;
    private int _sharerUserId;

    public string DisplayName
    {
      get
      {
        return _displayName;
      }
      set
      {
        __isset.displayName = true;
        this._displayName = value;
      }
    }

    public Evernote.EDAM.Type.UserIdentity RecipientUserIdentity
    {
      get
      {
        return _recipientUserIdentity;
      }
      set
      {
        __isset.recipientUserIdentity = true;
        this._recipientUserIdentity = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ShareRelationshipPrivilegeLevel"/>
    /// </summary>
    public ShareRelationshipPrivilegeLevel Privilege
    {
      get
      {
        return _privilege;
      }
      set
      {
        __isset.privilege = true;
        this._privilege = value;
      }
    }

    public int SharerUserId
    {
      get
      {
        return _sharerUserId;
      }
      set
      {
        __isset.sharerUserId = true;
        this._sharerUserId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool displayName;
      public bool recipientUserIdentity;
      public bool privilege;
      public bool sharerUserId;
    }

    public InvitationShareRelationship() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                DisplayName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                RecipientUserIdentity = new Evernote.EDAM.Type.UserIdentity();
                RecipientUserIdentity.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Privilege = (ShareRelationshipPrivilegeLevel)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                SharerUserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("InvitationShareRelationship");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DisplayName != null && __isset.displayName) {
          field.Name = "displayName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DisplayName);
          oprot.WriteFieldEnd();
        }
        if (RecipientUserIdentity != null && __isset.recipientUserIdentity) {
          field.Name = "recipientUserIdentity";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          RecipientUserIdentity.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.privilege) {
          field.Name = "privilege";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Privilege);
          oprot.WriteFieldEnd();
        }
        if (__isset.sharerUserId) {
          field.Name = "sharerUserId";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SharerUserId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("InvitationShareRelationship(");
      bool __first = true;
      if (DisplayName != null && __isset.displayName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DisplayName: ");
        __sb.Append(DisplayName);
      }
      if (RecipientUserIdentity != null && __isset.recipientUserIdentity) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RecipientUserIdentity: ");
        __sb.Append(RecipientUserIdentity== null ? "<null>" : RecipientUserIdentity.ToString());
      }
      if (__isset.privilege) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Privilege: ");
        __sb.Append(Privilege);
      }
      if (__isset.sharerUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SharerUserId: ");
        __sb.Append(SharerUserId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
