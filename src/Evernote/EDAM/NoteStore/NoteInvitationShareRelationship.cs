/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// Describes an invitation to a person to use their Evernote credentials
  /// to gain access to a note belonging to another user.
  /// 
  /// <dl>
  /// <dt>displayName</dt>
  /// <dd>The string that clients should show to users to represent this
  /// invitation.</dd>
  /// 
  /// <dt>recipientIdentityId</dt>
  /// <dd>Identifies the identity of the invitation recipient. Once the
  /// identity has been claimed by an Evernote user and they have accessed
  /// the note at least once, the invitation will be used up and will no
  /// longer be returned by the service to clients. Instead, that recipient
  /// will be included in the list of NoteMemberShareRelationships.</dd>
  /// 
  /// <dt>privilege</dt>
  /// <dd>The privilege level that the recipient will be granted when they
  /// accept this invitation. If the user already has a higher privilege to
  /// access this note then this will not affect the recipient's privileges.</dd>
  /// 
  /// <dt>sharerUserId</dt>
  /// <dd>The user id of the user who most recently shared this note to this
  /// recipient. This field is used by the service to convey information
  /// to the user, so clients should treat it as read-only.</dd>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NoteInvitationShareRelationship : TBase
  {
    private string _displayName;
    private long _recipientIdentityId;
    private Evernote.EDAM.Type.SharedNotePrivilegeLevel _privilege;
    private int _sharerUserId;

    public string DisplayName
    {
      get
      {
        return _displayName;
      }
      set
      {
        __isset.displayName = true;
        this._displayName = value;
      }
    }

    public long RecipientIdentityId
    {
      get
      {
        return _recipientIdentityId;
      }
      set
      {
        __isset.recipientIdentityId = true;
        this._recipientIdentityId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="Evernote.EDAM.Type.SharedNotePrivilegeLevel"/>
    /// </summary>
    public Evernote.EDAM.Type.SharedNotePrivilegeLevel Privilege
    {
      get
      {
        return _privilege;
      }
      set
      {
        __isset.privilege = true;
        this._privilege = value;
      }
    }

    public int SharerUserId
    {
      get
      {
        return _sharerUserId;
      }
      set
      {
        __isset.sharerUserId = true;
        this._sharerUserId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool displayName;
      public bool recipientIdentityId;
      public bool privilege;
      public bool sharerUserId;
    }

    public NoteInvitationShareRelationship() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                DisplayName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                RecipientIdentityId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Privilege = (Evernote.EDAM.Type.SharedNotePrivilegeLevel)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                SharerUserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NoteInvitationShareRelationship");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DisplayName != null && __isset.displayName) {
          field.Name = "displayName";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DisplayName);
          oprot.WriteFieldEnd();
        }
        if (__isset.recipientIdentityId) {
          field.Name = "recipientIdentityId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(RecipientIdentityId);
          oprot.WriteFieldEnd();
        }
        if (__isset.privilege) {
          field.Name = "privilege";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Privilege);
          oprot.WriteFieldEnd();
        }
        if (__isset.sharerUserId) {
          field.Name = "sharerUserId";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SharerUserId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NoteInvitationShareRelationship(");
      bool __first = true;
      if (DisplayName != null && __isset.displayName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DisplayName: ");
        __sb.Append(DisplayName);
      }
      if (__isset.recipientIdentityId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RecipientIdentityId: ");
        __sb.Append(RecipientIdentityId);
      }
      if (__isset.privilege) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Privilege: ");
        __sb.Append(Privilege);
      }
      if (__isset.sharerUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SharerUserId: ");
        __sb.Append(SharerUserId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
