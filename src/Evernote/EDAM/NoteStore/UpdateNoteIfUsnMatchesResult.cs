/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// The result of a call to updateNoteIfUsnMatches, which optionally updates a note
  /// based on the current value of the note's update sequence number on the service.
  /// 
  /// <dl>
  /// <dt>note</dt>
  /// <dd>Either the current state of the note if <tt>updated</tt> is false or the
  /// result of updating the note as would be done via the <tt>updateNote</tt> method.
  /// If the note was not updated, you will receive a Note that does not include note
  /// content, resources data, resources recognition data, or resources alternate data.
  /// You can check for updates to these large objects by checking the Data.bodyHash
  /// values and downloading accordingly.</dd>
  /// 
  /// <dt>updated</dt>
  /// <dd>Whether or not the note was updated by the operation.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UpdateNoteIfUsnMatchesResult : TBase
  {
    private Evernote.EDAM.Type.Note _note;
    private bool _updated;

    public Evernote.EDAM.Type.Note Note
    {
      get
      {
        return _note;
      }
      set
      {
        __isset.note = true;
        this._note = value;
      }
    }

    public bool Updated
    {
      get
      {
        return _updated;
      }
      set
      {
        __isset.updated = true;
        this._updated = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool note;
      public bool updated;
    }

    public UpdateNoteIfUsnMatchesResult() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Note = new Evernote.EDAM.Type.Note();
                Note.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Updated = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UpdateNoteIfUsnMatchesResult");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Note != null && __isset.note) {
          field.Name = "note";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Note.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.updated) {
          field.Name = "updated";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Updated);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UpdateNoteIfUsnMatchesResult(");
      bool __first = true;
      if (Note != null && __isset.note) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Note: ");
        __sb.Append(Note== null ? "<null>" : Note.ToString());
      }
      if (__isset.updated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Updated: ");
        __sb.Append(Updated);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
