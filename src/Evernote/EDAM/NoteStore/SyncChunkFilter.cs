/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  ///  This structure is used with the 'getFilteredSyncChunk' call to provide
  ///  fine-grained control over the data that's returned when a client needs
  ///  to synchronize with the service. Each flag in this structure specifies
  ///  whether to include one class of data in the results of that call.
  /// 
  /// <dl>
  ///  <dt>includeNotes</dt>
  ///    <dd>
  ///    If true, then the server will include the SyncChunks.notes field
  ///    </dd>
  /// 
  ///  <dt>includeNoteResources</dt>
  ///    <dd>
  ///    If true, then the server will include the 'resources' field on all of
  ///    the Notes that are in SyncChunk.notes.
  ///    If 'includeNotes' is false, then this will have no effect.
  ///    </dd>
  /// 
  ///  <dt>includeNoteAttributes</dt>
  ///    <dd>
  ///    If true, then the server will include the 'attributes' field on all of
  ///    the Notes that are in SyncChunks.notes.
  ///    If 'includeNotes' is false, then this will have no effect.
  ///    </dd>
  /// 
  ///  <dt>includeNotebooks</dt>
  ///    <dd>
  ///    If true, then the server will include the SyncChunks.notebooks field
  ///    </dd>
  /// 
  ///  <dt>includeTags</dt>
  ///    <dd>
  ///    If true, then the server will include the SyncChunks.tags field
  ///    </dd>
  /// 
  ///  <dt>includeSearches</dt>
  ///    <dd>
  ///    If true, then the server will include the SyncChunks.searches field
  ///    </dd>
  /// 
  ///  <dt>includeResources</dt>
  ///    <dd>
  ///    If true, then the server will include the SyncChunks.resources field.
  ///    Since the Resources are also provided with their Note
  ///    (in the Notes.resources list), this is primarily useful for clients that
  ///    want to watch for changes to individual Resources due to recognition data
  ///    being added.
  ///    </dd>
  /// 
  ///  <dt>includeLinkedNotebooks</dt>
  ///    <dd>
  ///    If true, then the server will include the SyncChunks.linkedNotebooks field.
  ///    </dd>
  /// 
  ///  <dt>includeExpunged</dt>
  ///    <dd>
  ///    If true, then the server will include the 'expunged' data for any type
  ///    of included data.  For example, if 'includeTags' and 'includeExpunged'
  ///    are both true, then the SyncChunks.expungedTags field will be set with
  ///    the GUIDs of tags that have been expunged from the server.
  ///    </dd>
  /// 
  ///  <dt>includeNoteApplicationDataFullMap</dt>
  ///    <dd>
  ///    If true, then the values for the applicationData map will be filled
  ///    in, assuming notes and note attributes are being returned.  Otherwise,
  ///    only the keysOnly field will be filled in.
  ///    </dd>
  /// 
  ///  <dt>includeResourceApplicationDataFullMap</dt>
  ///    <dd>
  ///    If true, then the fullMap values for the applicationData map will be
  ///    filled in, assuming resources and resource attributes are being returned
  ///    (includeResources is true).  Otherwise, only the keysOnly field will be
  ///    filled in.
  ///    </dd>
  /// 
  ///  <dt>includeNoteResourceApplicationDataFullMap</dt>
  ///    <dd>
  ///    If true, then the fullMap values for the applicationData map will be
  ///    filled in for resources found inside of notes, assuming resources are
  ///    being returned in notes (includeNoteResources is true).  Otherwise,
  ///    only the keysOnly field will be filled in.
  ///    </dd>
  /// 
  ///  <dt>omitSharedNotebooks<dt>
  ///    <dd>
  ///    Normally, if 'includeNotebooks' is true, then the SyncChunks will
  ///    include Notebooks that may include a set of SharedNotebook
  ///    invitations via Notebook.sharedNotebookIds and Notebook.sharedNotebooks.
  ///    However, if omitSharedNotebooks is set to true, then the Notebooks
  ///    will omit those two fields and leave them unset. This should be used
  ///    by clients who want to know their own set of Notebooks (and the
  ///    associated permissions via Notebook.recipientSettings), and who
  ///    do not need to know the full set of other people who can also see
  ///    that same notebook.
  ///    </dd>
  /// 
  ///  <dt>requireNoteContentClass</dt>
  ///    <dd>
  ///    If set, then only send notes whose content class matches this value.
  ///    The value can be a literal match or, if the last character is an
  ///    asterisk, a prefix match.
  ///    </dd>
  /// 
  ///  <dt>notebookGuids</dt>
  ///    <dd>
  ///    If set, then restrict the returned notebooks, notes, and
  ///    resources to those associated with one of the notebooks whose
  ///    GUID is provided in this list.  If not set, then no filtering on
  ///    notebook GUID will be performed.  If you set this field, you may
  ///    not also set includeExpunged else an EDAMUserException with an
  ///    error code of DATA_CONFLICT will be thrown.  You only need to set
  ///    this field if you want to restrict the returned entities more
  ///    than what your authentication token allows you to access.  For
  ///    example, there is no need to set this field for single notebook
  ///    tokens such as for shared notebooks.  You can use this field to
  ///    synchronize a newly discovered business notebook while
  ///    incrementally synchronizing a business account, in which case you
  ///    will only need to consider setting includeNotes,
  ///    includeNotebooks, includeNoteAttributes, includeNoteResources,
  ///    and maybe some of the "FullMap" fields.
  ///    </dd>
  /// 
  ///  <dt>includeSharedNotes</dt>
  ///    <dd>
  ///    If true, then the service will include the sharedNotes field on all
  ///    notes that are in SyncChunk.notes. If 'includeNotes' is false, then
  ///    this will have no effect.
  ///    </dd>
  ///  </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SyncChunkFilter : TBase
  {
    private bool _includeNotes;
    private bool _includeNoteResources;
    private bool _includeNoteAttributes;
    private bool _includeNotebooks;
    private bool _includeTags;
    private bool _includeSearches;
    private bool _includeResources;
    private bool _includeLinkedNotebooks;
    private bool _includeExpunged;
    private bool _includeNoteApplicationDataFullMap;
    private bool _includeResourceApplicationDataFullMap;
    private bool _includeNoteResourceApplicationDataFullMap;
    private bool _includeSharedNotes;
    private bool _omitSharedNotebooks;
    private string _requireNoteContentClass;
    private THashSet<string> _notebookGuids;

    public bool IncludeNotes
    {
      get
      {
        return _includeNotes;
      }
      set
      {
        __isset.includeNotes = true;
        this._includeNotes = value;
      }
    }

    public bool IncludeNoteResources
    {
      get
      {
        return _includeNoteResources;
      }
      set
      {
        __isset.includeNoteResources = true;
        this._includeNoteResources = value;
      }
    }

    public bool IncludeNoteAttributes
    {
      get
      {
        return _includeNoteAttributes;
      }
      set
      {
        __isset.includeNoteAttributes = true;
        this._includeNoteAttributes = value;
      }
    }

    public bool IncludeNotebooks
    {
      get
      {
        return _includeNotebooks;
      }
      set
      {
        __isset.includeNotebooks = true;
        this._includeNotebooks = value;
      }
    }

    public bool IncludeTags
    {
      get
      {
        return _includeTags;
      }
      set
      {
        __isset.includeTags = true;
        this._includeTags = value;
      }
    }

    public bool IncludeSearches
    {
      get
      {
        return _includeSearches;
      }
      set
      {
        __isset.includeSearches = true;
        this._includeSearches = value;
      }
    }

    public bool IncludeResources
    {
      get
      {
        return _includeResources;
      }
      set
      {
        __isset.includeResources = true;
        this._includeResources = value;
      }
    }

    public bool IncludeLinkedNotebooks
    {
      get
      {
        return _includeLinkedNotebooks;
      }
      set
      {
        __isset.includeLinkedNotebooks = true;
        this._includeLinkedNotebooks = value;
      }
    }

    public bool IncludeExpunged
    {
      get
      {
        return _includeExpunged;
      }
      set
      {
        __isset.includeExpunged = true;
        this._includeExpunged = value;
      }
    }

    public bool IncludeNoteApplicationDataFullMap
    {
      get
      {
        return _includeNoteApplicationDataFullMap;
      }
      set
      {
        __isset.includeNoteApplicationDataFullMap = true;
        this._includeNoteApplicationDataFullMap = value;
      }
    }

    public bool IncludeResourceApplicationDataFullMap
    {
      get
      {
        return _includeResourceApplicationDataFullMap;
      }
      set
      {
        __isset.includeResourceApplicationDataFullMap = true;
        this._includeResourceApplicationDataFullMap = value;
      }
    }

    public bool IncludeNoteResourceApplicationDataFullMap
    {
      get
      {
        return _includeNoteResourceApplicationDataFullMap;
      }
      set
      {
        __isset.includeNoteResourceApplicationDataFullMap = true;
        this._includeNoteResourceApplicationDataFullMap = value;
      }
    }

    public bool IncludeSharedNotes
    {
      get
      {
        return _includeSharedNotes;
      }
      set
      {
        __isset.includeSharedNotes = true;
        this._includeSharedNotes = value;
      }
    }

    public bool OmitSharedNotebooks
    {
      get
      {
        return _omitSharedNotebooks;
      }
      set
      {
        __isset.omitSharedNotebooks = true;
        this._omitSharedNotebooks = value;
      }
    }

    public string RequireNoteContentClass
    {
      get
      {
        return _requireNoteContentClass;
      }
      set
      {
        __isset.requireNoteContentClass = true;
        this._requireNoteContentClass = value;
      }
    }

    public THashSet<string> NotebookGuids
    {
      get
      {
        return _notebookGuids;
      }
      set
      {
        __isset.notebookGuids = true;
        this._notebookGuids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool includeNotes;
      public bool includeNoteResources;
      public bool includeNoteAttributes;
      public bool includeNotebooks;
      public bool includeTags;
      public bool includeSearches;
      public bool includeResources;
      public bool includeLinkedNotebooks;
      public bool includeExpunged;
      public bool includeNoteApplicationDataFullMap;
      public bool includeResourceApplicationDataFullMap;
      public bool includeNoteResourceApplicationDataFullMap;
      public bool includeSharedNotes;
      public bool omitSharedNotebooks;
      public bool requireNoteContentClass;
      public bool notebookGuids;
    }

    public SyncChunkFilter() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                IncludeNotes = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                IncludeNoteResources = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                IncludeNoteAttributes = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                IncludeNotebooks = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                IncludeTags = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                IncludeSearches = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                IncludeResources = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                IncludeLinkedNotebooks = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                IncludeExpunged = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                IncludeNoteApplicationDataFullMap = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Bool) {
                IncludeResourceApplicationDataFullMap = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Bool) {
                IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Bool) {
                IncludeSharedNotes = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.Bool) {
                OmitSharedNotebooks = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                RequireNoteContentClass = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Set) {
                {
                  NotebookGuids = new THashSet<string>();
                  TSet _set44 = iprot.ReadSetBegin();
                  for( int _i45 = 0; _i45 < _set44.Count; ++_i45)
                  {
                    string _elem46;
                    _elem46 = iprot.ReadString();
                    NotebookGuids.Add(_elem46);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SyncChunkFilter");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.includeNotes) {
          field.Name = "includeNotes";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeNotes);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeNoteResources) {
          field.Name = "includeNoteResources";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeNoteResources);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeNoteAttributes) {
          field.Name = "includeNoteAttributes";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeNoteAttributes);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeNotebooks) {
          field.Name = "includeNotebooks";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeNotebooks);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeTags) {
          field.Name = "includeTags";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeTags);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeSearches) {
          field.Name = "includeSearches";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeSearches);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeResources) {
          field.Name = "includeResources";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeResources);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeLinkedNotebooks) {
          field.Name = "includeLinkedNotebooks";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeLinkedNotebooks);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeExpunged) {
          field.Name = "includeExpunged";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeExpunged);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeNoteApplicationDataFullMap) {
          field.Name = "includeNoteApplicationDataFullMap";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeNoteApplicationDataFullMap);
          oprot.WriteFieldEnd();
        }
        if (RequireNoteContentClass != null && __isset.requireNoteContentClass) {
          field.Name = "requireNoteContentClass";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RequireNoteContentClass);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeResourceApplicationDataFullMap) {
          field.Name = "includeResourceApplicationDataFullMap";
          field.Type = TType.Bool;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeResourceApplicationDataFullMap);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeNoteResourceApplicationDataFullMap) {
          field.Name = "includeNoteResourceApplicationDataFullMap";
          field.Type = TType.Bool;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeNoteResourceApplicationDataFullMap);
          oprot.WriteFieldEnd();
        }
        if (NotebookGuids != null && __isset.notebookGuids) {
          field.Name = "notebookGuids";
          field.Type = TType.Set;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, NotebookGuids.Count));
            foreach (string _iter47 in NotebookGuids)
            {
              oprot.WriteString(_iter47);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.omitSharedNotebooks) {
          field.Name = "omitSharedNotebooks";
          field.Type = TType.Bool;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(OmitSharedNotebooks);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeSharedNotes) {
          field.Name = "includeSharedNotes";
          field.Type = TType.Bool;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeSharedNotes);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SyncChunkFilter(");
      bool __first = true;
      if (__isset.includeNotes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeNotes: ");
        __sb.Append(IncludeNotes);
      }
      if (__isset.includeNoteResources) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeNoteResources: ");
        __sb.Append(IncludeNoteResources);
      }
      if (__isset.includeNoteAttributes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeNoteAttributes: ");
        __sb.Append(IncludeNoteAttributes);
      }
      if (__isset.includeNotebooks) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeNotebooks: ");
        __sb.Append(IncludeNotebooks);
      }
      if (__isset.includeTags) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeTags: ");
        __sb.Append(IncludeTags);
      }
      if (__isset.includeSearches) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeSearches: ");
        __sb.Append(IncludeSearches);
      }
      if (__isset.includeResources) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeResources: ");
        __sb.Append(IncludeResources);
      }
      if (__isset.includeLinkedNotebooks) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeLinkedNotebooks: ");
        __sb.Append(IncludeLinkedNotebooks);
      }
      if (__isset.includeExpunged) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeExpunged: ");
        __sb.Append(IncludeExpunged);
      }
      if (__isset.includeNoteApplicationDataFullMap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeNoteApplicationDataFullMap: ");
        __sb.Append(IncludeNoteApplicationDataFullMap);
      }
      if (__isset.includeResourceApplicationDataFullMap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeResourceApplicationDataFullMap: ");
        __sb.Append(IncludeResourceApplicationDataFullMap);
      }
      if (__isset.includeNoteResourceApplicationDataFullMap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeNoteResourceApplicationDataFullMap: ");
        __sb.Append(IncludeNoteResourceApplicationDataFullMap);
      }
      if (__isset.includeSharedNotes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeSharedNotes: ");
        __sb.Append(IncludeSharedNotes);
      }
      if (__isset.omitSharedNotebooks) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OmitSharedNotebooks: ");
        __sb.Append(OmitSharedNotebooks);
      }
      if (RequireNoteContentClass != null && __isset.requireNoteContentClass) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequireNoteContentClass: ");
        __sb.Append(RequireNoteContentClass);
      }
      if (NotebookGuids != null && __isset.notebookGuids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NotebookGuids: ");
        __sb.Append(NotebookGuids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
