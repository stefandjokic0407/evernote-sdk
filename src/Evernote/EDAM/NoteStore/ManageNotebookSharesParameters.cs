/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// A structure that captures parameters used by clients to manage the
  /// shares for a given notebook via the manageNotebookShares method.
  /// 
  /// <dl>
  /// <dt>notebookGuid</dt>
  /// <dd>The GUID of the notebook whose shares are being managed.</dd>
  /// 
  /// <dt>inviteMessage</dt>
  /// <dd>If the service sends a message to invitees, this parameter will
  /// be used to form the actual message that is sent.</dd>
  /// 
  /// <dt>membershipsToUpdate</dt>
  /// <dd>The list of existing memberships to update.  This field is not
  /// intended to be the full set of memberships for the notebook and
  /// should only include those already-existing memberships that you
  /// actually want to change.  If you want to remove shares, see the
  /// unshares fields.  If you want to create a membership,
  /// i.e. auto-join a business user, you can do this via the
  /// invitationsToCreateOrUpdate field using an Evernote UserID of a
  /// fellow business member (the created invitation is automatically
  /// joined by the service, so the client is creating an
  /// invitation, not a membership).</dd>
  /// 
  /// <dt>invitationsToCreateOrUpdate</dt>
  /// <dd>The list of invitations to update, as matched by the identity
  /// field of the InvitationShareRelationship instances, or to create if
  /// an existing invitation does not exist.  This field is not intended
  /// to be the full set of invitations on the notebook and should only
  /// include those invitations that you wish to create or update.  Note
  /// that your invitation could convert into a membership via a
  /// service-supported auto-join operation.  This happens, for example,
  /// when you use an invitation with an Evernote UserID type for a
  /// recipient who is a member of the business to which the notebook
  /// belongs.  Note that to discover the user IDs for business members,
  /// the sharer must also be part of the business.</dd>
  /// 
  /// <dt>unshares</dt>
  /// <dd>The list of share relationships to expunge from the service.
  /// If the user identity is for an Evernote UserID, then matching invitations or
  /// memberships will be removed. If it's an e-mail, then e-mail based shared notebook
  /// invitations will be removed. If it's for an Identity ID, then any invitations that
  /// match the identity (by identity ID or user ID or e-mail for legacy invitations) will be
  /// removed.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ManageNotebookSharesParameters : TBase
  {
    private string _notebookGuid;
    private string _inviteMessage;
    private List<MemberShareRelationship> _membershipsToUpdate;
    private List<InvitationShareRelationship> _invitationsToCreateOrUpdate;
    private List<Evernote.EDAM.Type.UserIdentity> _unshares;

    public string NotebookGuid
    {
      get
      {
        return _notebookGuid;
      }
      set
      {
        __isset.notebookGuid = true;
        this._notebookGuid = value;
      }
    }

    public string InviteMessage
    {
      get
      {
        return _inviteMessage;
      }
      set
      {
        __isset.inviteMessage = true;
        this._inviteMessage = value;
      }
    }

    public List<MemberShareRelationship> MembershipsToUpdate
    {
      get
      {
        return _membershipsToUpdate;
      }
      set
      {
        __isset.membershipsToUpdate = true;
        this._membershipsToUpdate = value;
      }
    }

    public List<InvitationShareRelationship> InvitationsToCreateOrUpdate
    {
      get
      {
        return _invitationsToCreateOrUpdate;
      }
      set
      {
        __isset.invitationsToCreateOrUpdate = true;
        this._invitationsToCreateOrUpdate = value;
      }
    }

    public List<Evernote.EDAM.Type.UserIdentity> Unshares
    {
      get
      {
        return _unshares;
      }
      set
      {
        __isset.unshares = true;
        this._unshares = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool notebookGuid;
      public bool inviteMessage;
      public bool membershipsToUpdate;
      public bool invitationsToCreateOrUpdate;
      public bool unshares;
    }

    public ManageNotebookSharesParameters() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                NotebookGuid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                InviteMessage = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  MembershipsToUpdate = new List<MemberShareRelationship>();
                  TList _list134 = iprot.ReadListBegin();
                  for( int _i135 = 0; _i135 < _list134.Count; ++_i135)
                  {
                    MemberShareRelationship _elem136;
                    _elem136 = new MemberShareRelationship();
                    _elem136.Read(iprot);
                    MembershipsToUpdate.Add(_elem136);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  InvitationsToCreateOrUpdate = new List<InvitationShareRelationship>();
                  TList _list137 = iprot.ReadListBegin();
                  for( int _i138 = 0; _i138 < _list137.Count; ++_i138)
                  {
                    InvitationShareRelationship _elem139;
                    _elem139 = new InvitationShareRelationship();
                    _elem139.Read(iprot);
                    InvitationsToCreateOrUpdate.Add(_elem139);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  Unshares = new List<Evernote.EDAM.Type.UserIdentity>();
                  TList _list140 = iprot.ReadListBegin();
                  for( int _i141 = 0; _i141 < _list140.Count; ++_i141)
                  {
                    Evernote.EDAM.Type.UserIdentity _elem142;
                    _elem142 = new Evernote.EDAM.Type.UserIdentity();
                    _elem142.Read(iprot);
                    Unshares.Add(_elem142);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ManageNotebookSharesParameters");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NotebookGuid != null && __isset.notebookGuid) {
          field.Name = "notebookGuid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NotebookGuid);
          oprot.WriteFieldEnd();
        }
        if (InviteMessage != null && __isset.inviteMessage) {
          field.Name = "inviteMessage";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InviteMessage);
          oprot.WriteFieldEnd();
        }
        if (MembershipsToUpdate != null && __isset.membershipsToUpdate) {
          field.Name = "membershipsToUpdate";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, MembershipsToUpdate.Count));
            foreach (MemberShareRelationship _iter143 in MembershipsToUpdate)
            {
              _iter143.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (InvitationsToCreateOrUpdate != null && __isset.invitationsToCreateOrUpdate) {
          field.Name = "invitationsToCreateOrUpdate";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, InvitationsToCreateOrUpdate.Count));
            foreach (InvitationShareRelationship _iter144 in InvitationsToCreateOrUpdate)
            {
              _iter144.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Unshares != null && __isset.unshares) {
          field.Name = "unshares";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Unshares.Count));
            foreach (Evernote.EDAM.Type.UserIdentity _iter145 in Unshares)
            {
              _iter145.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ManageNotebookSharesParameters(");
      bool __first = true;
      if (NotebookGuid != null && __isset.notebookGuid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NotebookGuid: ");
        __sb.Append(NotebookGuid);
      }
      if (InviteMessage != null && __isset.inviteMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InviteMessage: ");
        __sb.Append(InviteMessage);
      }
      if (MembershipsToUpdate != null && __isset.membershipsToUpdate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MembershipsToUpdate: ");
        __sb.Append(MembershipsToUpdate);
      }
      if (InvitationsToCreateOrUpdate != null && __isset.invitationsToCreateOrUpdate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InvitationsToCreateOrUpdate: ");
        __sb.Append(InvitationsToCreateOrUpdate);
      }
      if (Unshares != null && __isset.unshares) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Unshares: ");
        __sb.Append(Unshares);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
