/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// A description of the thing for which the service will find related
  /// entities, via findRelated(), together with a description of what
  /// type of entities and how many you are seeking in the
  /// RelatedResult.
  /// 
  /// <dl>
  /// <dt>maxNotes</dt>
  /// <dd>Return notes that are related to the query, but no more than
  ///     this many.  Any value greater than EDAM_RELATED_MAX_NOTES
  ///     will be silently capped.  If you do not set this field, then
  ///     no notes will be returned.</dd>
  /// 
  /// <dt>maxNotebooks</dt>
  /// <dd>Return notebooks that are related to the query, but no more than
  ///     this many.  Any value greater than EDAM_RELATED_MAX_NOTEBOOKS
  ///     will be silently capped.  If you do not set this field, then
  ///     no notebooks will be returned.</dd>
  /// 
  /// <dt>maxTags</dt>
  /// <dd>Return tags that are related to the query, but no more than
  ///     this many.  Any value greater than EDAM_RELATED_MAX_TAGS
  ///     will be silently capped.  If you do not set this field, then
  ///     no tags will be returned.</dd>
  /// </dl>
  /// 
  /// <dt>writableNotebooksOnly</dt>
  /// <dd>Require that all returned related notebooks are writable.
  ///     The user will be able to create notes in all returned notebooks.
  ///     However, individual notes returned may still belong to notebooks
  ///     in which the user lacks the ability to create notes.</dd>
  /// </dl>
  /// 
  /// <dt>includeContainingNotebooks</dt>
  /// <dd>If set to <code>true</code>, return the containingNotebooks field
  ///     in the RelatedResult, which will contain the list of notebooks to
  ///     to which the returned related notes belong.</dd>
  /// </dl>
  /// 
  /// <dt>includeDebugInfo</dt>
  /// <dd>If set to <code>true</code>, indicate that debug information should
  ///     be returned in the 'debugInfo' field of RelatedResult. Note that the call may
  ///     be slower if this flag is set.</dd>
  /// 
  /// <dt>maxExperts</dt>
  /// <dd>This can only be used when making a findRelated call against a business.
  ///  Find users within your business who have knowledge about the specified query.
  ///  No more than this many users will be returned. Any value greater than
  ///  EDAM_RELATED_MAX_EXPERTS will be silently capped.
  /// </dd>
  /// 
  /// <dt>maxRelatedContent</dt>
  /// <dd>Return snippets of related content that is related to the query, but no more than
  ///  this many. Any value greater than EDAM_RELATED_MAX_RELATED_CONTENT will be silently
  ///  capped. If you do not set this field, then no related content will be returned.</dd>
  /// </dl>
  /// 
  /// <dt>relatedContentTypes</dt>
  /// <dd>Specifies the types of Related Content that should be returned.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RelatedResultSpec : TBase
  {
    private int _maxNotes;
    private int _maxNotebooks;
    private int _maxTags;
    private bool _writableNotebooksOnly;
    private bool _includeContainingNotebooks;
    private bool _includeDebugInfo;
    private int _maxExperts;
    private int _maxRelatedContent;
    private THashSet<Evernote.EDAM.Type.RelatedContentType> _relatedContentTypes;

    public int MaxNotes
    {
      get
      {
        return _maxNotes;
      }
      set
      {
        __isset.maxNotes = true;
        this._maxNotes = value;
      }
    }

    public int MaxNotebooks
    {
      get
      {
        return _maxNotebooks;
      }
      set
      {
        __isset.maxNotebooks = true;
        this._maxNotebooks = value;
      }
    }

    public int MaxTags
    {
      get
      {
        return _maxTags;
      }
      set
      {
        __isset.maxTags = true;
        this._maxTags = value;
      }
    }

    public bool WritableNotebooksOnly
    {
      get
      {
        return _writableNotebooksOnly;
      }
      set
      {
        __isset.writableNotebooksOnly = true;
        this._writableNotebooksOnly = value;
      }
    }

    public bool IncludeContainingNotebooks
    {
      get
      {
        return _includeContainingNotebooks;
      }
      set
      {
        __isset.includeContainingNotebooks = true;
        this._includeContainingNotebooks = value;
      }
    }

    public bool IncludeDebugInfo
    {
      get
      {
        return _includeDebugInfo;
      }
      set
      {
        __isset.includeDebugInfo = true;
        this._includeDebugInfo = value;
      }
    }

    public int MaxExperts
    {
      get
      {
        return _maxExperts;
      }
      set
      {
        __isset.maxExperts = true;
        this._maxExperts = value;
      }
    }

    public int MaxRelatedContent
    {
      get
      {
        return _maxRelatedContent;
      }
      set
      {
        __isset.maxRelatedContent = true;
        this._maxRelatedContent = value;
      }
    }

    public THashSet<Evernote.EDAM.Type.RelatedContentType> RelatedContentTypes
    {
      get
      {
        return _relatedContentTypes;
      }
      set
      {
        __isset.relatedContentTypes = true;
        this._relatedContentTypes = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool maxNotes;
      public bool maxNotebooks;
      public bool maxTags;
      public bool writableNotebooksOnly;
      public bool includeContainingNotebooks;
      public bool includeDebugInfo;
      public bool maxExperts;
      public bool maxRelatedContent;
      public bool relatedContentTypes;
    }

    public RelatedResultSpec() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                MaxNotes = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                MaxNotebooks = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MaxTags = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                WritableNotebooksOnly = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                IncludeContainingNotebooks = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                IncludeDebugInfo = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                MaxExperts = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                MaxRelatedContent = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Set) {
                {
                  RelatedContentTypes = new THashSet<Evernote.EDAM.Type.RelatedContentType>();
                  TSet _set122 = iprot.ReadSetBegin();
                  for( int _i123 = 0; _i123 < _set122.Count; ++_i123)
                  {
                    Evernote.EDAM.Type.RelatedContentType _elem124;
                    _elem124 = (Evernote.EDAM.Type.RelatedContentType)iprot.ReadI32();
                    RelatedContentTypes.Add(_elem124);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RelatedResultSpec");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.maxNotes) {
          field.Name = "maxNotes";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxNotes);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxNotebooks) {
          field.Name = "maxNotebooks";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxNotebooks);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxTags) {
          field.Name = "maxTags";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxTags);
          oprot.WriteFieldEnd();
        }
        if (__isset.writableNotebooksOnly) {
          field.Name = "writableNotebooksOnly";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(WritableNotebooksOnly);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeContainingNotebooks) {
          field.Name = "includeContainingNotebooks";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeContainingNotebooks);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeDebugInfo) {
          field.Name = "includeDebugInfo";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeDebugInfo);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxExperts) {
          field.Name = "maxExperts";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxExperts);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxRelatedContent) {
          field.Name = "maxRelatedContent";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxRelatedContent);
          oprot.WriteFieldEnd();
        }
        if (RelatedContentTypes != null && __isset.relatedContentTypes) {
          field.Name = "relatedContentTypes";
          field.Type = TType.Set;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I32, RelatedContentTypes.Count));
            foreach (Evernote.EDAM.Type.RelatedContentType _iter125 in RelatedContentTypes)
            {
              oprot.WriteI32((int)_iter125);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RelatedResultSpec(");
      bool __first = true;
      if (__isset.maxNotes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxNotes: ");
        __sb.Append(MaxNotes);
      }
      if (__isset.maxNotebooks) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxNotebooks: ");
        __sb.Append(MaxNotebooks);
      }
      if (__isset.maxTags) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxTags: ");
        __sb.Append(MaxTags);
      }
      if (__isset.writableNotebooksOnly) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WritableNotebooksOnly: ");
        __sb.Append(WritableNotebooksOnly);
      }
      if (__isset.includeContainingNotebooks) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeContainingNotebooks: ");
        __sb.Append(IncludeContainingNotebooks);
      }
      if (__isset.includeDebugInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeDebugInfo: ");
        __sb.Append(IncludeDebugInfo);
      }
      if (__isset.maxExperts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxExperts: ");
        __sb.Append(MaxExperts);
      }
      if (__isset.maxRelatedContent) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxRelatedContent: ");
        __sb.Append(MaxRelatedContent);
      }
      if (RelatedContentTypes != null && __isset.relatedContentTypes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RelatedContentTypes: ");
        __sb.Append(RelatedContentTypes);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
