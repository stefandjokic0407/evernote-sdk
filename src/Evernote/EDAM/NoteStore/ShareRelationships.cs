/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// Captures a collection of share relationships for a notebook, for
  /// example, as returned by the getNotebookShares method.  The share
  /// relationships fall into two broad categories: members, and
  /// invitations that can be used to become members.
  /// 
  /// <dl>
  /// <dt>invitations</dt>
  /// <dd>A list of open invitations that can be redeemed into
  /// memberships to the notebook.</dd>
  /// 
  /// <dt>memberships</dt>
  /// <dd>A list of memberships of the notebook.  A member is identified
  /// by their Evernote UserID and has rights to access the
  /// notebook.</dd>
  /// 
  /// <dt>invitationRestrictions</dt>
  /// <dd>The restrictions on what privileges may be granted to invitees
  /// to this notebook. These restrictions may be specific to the calling
  /// user or to the notebook itself. They represent the
  /// union of all possible invite cases, so it is possible that once the
  /// recipient of the invitation has been identified by the service, such
  /// as by a business auto-join, the actual assigned privilege may change.
  /// </dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ShareRelationships : TBase
  {
    private List<InvitationShareRelationship> _invitations;
    private List<MemberShareRelationship> _memberships;
    private ShareRelationshipRestrictions _invitationRestrictions;

    public List<InvitationShareRelationship> Invitations
    {
      get
      {
        return _invitations;
      }
      set
      {
        __isset.invitations = true;
        this._invitations = value;
      }
    }

    public List<MemberShareRelationship> Memberships
    {
      get
      {
        return _memberships;
      }
      set
      {
        __isset.memberships = true;
        this._memberships = value;
      }
    }

    public ShareRelationshipRestrictions InvitationRestrictions
    {
      get
      {
        return _invitationRestrictions;
      }
      set
      {
        __isset.invitationRestrictions = true;
        this._invitationRestrictions = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool invitations;
      public bool memberships;
      public bool invitationRestrictions;
    }

    public ShareRelationships() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Invitations = new List<InvitationShareRelationship>();
                  TList _list126 = iprot.ReadListBegin();
                  for( int _i127 = 0; _i127 < _list126.Count; ++_i127)
                  {
                    InvitationShareRelationship _elem128;
                    _elem128 = new InvitationShareRelationship();
                    _elem128.Read(iprot);
                    Invitations.Add(_elem128);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Memberships = new List<MemberShareRelationship>();
                  TList _list129 = iprot.ReadListBegin();
                  for( int _i130 = 0; _i130 < _list129.Count; ++_i130)
                  {
                    MemberShareRelationship _elem131;
                    _elem131 = new MemberShareRelationship();
                    _elem131.Read(iprot);
                    Memberships.Add(_elem131);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                InvitationRestrictions = new ShareRelationshipRestrictions();
                InvitationRestrictions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ShareRelationships");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Invitations != null && __isset.invitations) {
          field.Name = "invitations";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Invitations.Count));
            foreach (InvitationShareRelationship _iter132 in Invitations)
            {
              _iter132.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Memberships != null && __isset.memberships) {
          field.Name = "memberships";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Memberships.Count));
            foreach (MemberShareRelationship _iter133 in Memberships)
            {
              _iter133.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (InvitationRestrictions != null && __isset.invitationRestrictions) {
          field.Name = "invitationRestrictions";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          InvitationRestrictions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ShareRelationships(");
      bool __first = true;
      if (Invitations != null && __isset.invitations) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Invitations: ");
        __sb.Append(Invitations);
      }
      if (Memberships != null && __isset.memberships) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Memberships: ");
        __sb.Append(Memberships);
      }
      if (InvitationRestrictions != null && __isset.invitationRestrictions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InvitationRestrictions: ");
        __sb.Append(InvitationRestrictions== null ? "<null>" : InvitationRestrictions.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
