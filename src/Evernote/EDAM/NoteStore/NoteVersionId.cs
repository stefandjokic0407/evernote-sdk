/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// Identifying information about previous versions of a note that are backed up
  /// within Evernote's servers.  Used in the return value of the listNoteVersions
  /// call.
  /// 
  /// <dl>
  ///  <dt>updateSequenceNum</dt>
  ///  <dd>
  ///    The update sequence number for the Note when it last had this content.
  ///    This serves to uniquely identify each version of the note, since USN
  ///    values are unique within an account for each update.
  ///  </dd>
  ///  <dt>updated</dt>
  ///  <dd>
  ///    The 'updated' time that was set on the Note when it had this version
  ///    of the content.  This is the user-modifiable modification time on the
  ///    note, so it's not reliable for guaranteeing the order of various
  ///    versions.  (E.g. if someone modifies the note, then changes this time
  ///    manually into the past and then updates the note again.)
  ///  </dd>
  ///  <dt>saved</dt>
  ///  <dd>
  ///    A timestamp that holds the date and time when this version of the note
  ///    was backed up by Evernote's servers.
  ///  </dd>
  ///  <dt>title</dt>
  ///  <dd>
  ///    The title of the note when this particular version was saved.  (The
  ///    current title of the note may differ from this value.)
  ///  </dd>
  ///  <dt>lastEditorId</dt>
  ///  <dd>
  ///    The ID of the user who made the change to this version of the note. This will be
  ///    unset if the note version was edited by the owner of the account.
  ///  </dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NoteVersionId : TBase
  {
    private int _lastEditorId;

    public int UpdateSequenceNum { get; set; }

    public long Updated { get; set; }

    public long Saved { get; set; }

    public string Title { get; set; }

    public int LastEditorId
    {
      get
      {
        return _lastEditorId;
      }
      set
      {
        __isset.lastEditorId = true;
        this._lastEditorId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lastEditorId;
    }

    public NoteVersionId() {
    }

    public NoteVersionId(int updateSequenceNum, long updated, long saved, string title) : this() {
      this.UpdateSequenceNum = updateSequenceNum;
      this.Updated = updated;
      this.Saved = saved;
      this.Title = title;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_updateSequenceNum = false;
        bool isset_updated = false;
        bool isset_saved = false;
        bool isset_title = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UpdateSequenceNum = iprot.ReadI32();
                isset_updateSequenceNum = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Updated = iprot.ReadI64();
                isset_updated = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Saved = iprot.ReadI64();
                isset_saved = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Title = iprot.ReadString();
                isset_title = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                LastEditorId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_updateSequenceNum)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field UpdateSequenceNum not set");
        if (!isset_updated)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Updated not set");
        if (!isset_saved)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Saved not set");
        if (!isset_title)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Title not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NoteVersionId");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "updateSequenceNum";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UpdateSequenceNum);
        oprot.WriteFieldEnd();
        field.Name = "updated";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Updated);
        oprot.WriteFieldEnd();
        field.Name = "saved";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Saved);
        oprot.WriteFieldEnd();
        if (Title == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Title not set");
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
        if (__isset.lastEditorId) {
          field.Name = "lastEditorId";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LastEditorId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NoteVersionId(");
      __sb.Append(", UpdateSequenceNum: ");
      __sb.Append(UpdateSequenceNum);
      __sb.Append(", Updated: ");
      __sb.Append(Updated);
      __sb.Append(", Saved: ");
      __sb.Append(Saved);
      __sb.Append(", Title: ");
      __sb.Append(Title);
      if (__isset.lastEditorId) {
        __sb.Append(", LastEditorId: ");
        __sb.Append(LastEditorId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
