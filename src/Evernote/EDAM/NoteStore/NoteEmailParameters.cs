/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.NoteStore
{

  /// <summary>
  /// Parameters that must be given to the NoteStore emailNote call. These allow
  /// the caller to specify the note to send, the recipient addresses, etc.
  /// 
  /// <dl>
  ///  <dt>guid</dt>
  ///    <dd>
  ///      If set, this must be the GUID of a note within the user's account that
  ///      should be retrieved from the service and sent as email.  If not set,
  ///      the 'note' field must be provided instead.
  ///    </dd>
  /// 
  ///  <dt>note</dt>
  ///    <dd>
  ///      If the 'guid' field is not set, this field must be provided, including
  ///      the full contents of the note note (and all of its Resources) to send.
  ///      This can be used for a Note that as not been created in the service,
  ///      for example by a local client with local notes.
  ///    </dd>
  /// 
  ///  <dt>toAddresses</dt>
  ///    <dd>
  ///      If provided, this should contain a list of the SMTP email addresses
  ///      that should be included in the "To:" line of the email.
  ///      Callers must specify at least one "to" or "cc" email address.
  ///    </dd>
  /// 
  ///  <dt>ccAddresses</dt>
  ///    <dd>
  ///      If provided, this should contain a list of the SMTP email addresses
  ///      that should be included in the "Cc:" line of the email.
  ///      Callers must specify at least one "to" or "cc" email address.
  ///    </dd>
  /// 
  ///  <dt>subject</dt>
  ///    <dd>
  ///      If provided, this should contain the subject line of the email that
  ///      will be sent.  If not provided, the title of the note will be used
  ///      as the subject of the email.
  ///    </dd>
  /// 
  ///  <dt>message</dt>
  ///    <dd>
  ///      If provided, this is additional personal text that should be included
  ///      into the email as a message from the owner to the recipient(s).
  ///    </dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NoteEmailParameters : TBase
  {
    private string _guid;
    private Evernote.EDAM.Type.Note _note;
    private List<string> _toAddresses;
    private List<string> _ccAddresses;
    private string _subject;
    private string _message;

    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    public Evernote.EDAM.Type.Note Note
    {
      get
      {
        return _note;
      }
      set
      {
        __isset.note = true;
        this._note = value;
      }
    }

    public List<string> ToAddresses
    {
      get
      {
        return _toAddresses;
      }
      set
      {
        __isset.toAddresses = true;
        this._toAddresses = value;
      }
    }

    public List<string> CcAddresses
    {
      get
      {
        return _ccAddresses;
      }
      set
      {
        __isset.ccAddresses = true;
        this._ccAddresses = value;
      }
    }

    public string Subject
    {
      get
      {
        return _subject;
      }
      set
      {
        __isset.subject = true;
        this._subject = value;
      }
    }

    public string Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool guid;
      public bool note;
      public bool toAddresses;
      public bool ccAddresses;
      public bool subject;
      public bool message;
    }

    public NoteEmailParameters() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Guid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Note = new Evernote.EDAM.Type.Note();
                Note.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ToAddresses = new List<string>();
                  TList _list90 = iprot.ReadListBegin();
                  for( int _i91 = 0; _i91 < _list90.Count; ++_i91)
                  {
                    string _elem92;
                    _elem92 = iprot.ReadString();
                    ToAddresses.Add(_elem92);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  CcAddresses = new List<string>();
                  TList _list93 = iprot.ReadListBegin();
                  for( int _i94 = 0; _i94 < _list93.Count; ++_i94)
                  {
                    string _elem95;
                    _elem95 = iprot.ReadString();
                    CcAddresses.Add(_elem95);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Subject = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Message = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NoteEmailParameters");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Guid);
          oprot.WriteFieldEnd();
        }
        if (Note != null && __isset.note) {
          field.Name = "note";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Note.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ToAddresses != null && __isset.toAddresses) {
          field.Name = "toAddresses";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ToAddresses.Count));
            foreach (string _iter96 in ToAddresses)
            {
              oprot.WriteString(_iter96);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (CcAddresses != null && __isset.ccAddresses) {
          field.Name = "ccAddresses";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, CcAddresses.Count));
            foreach (string _iter97 in CcAddresses)
            {
              oprot.WriteString(_iter97);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (Subject != null && __isset.subject) {
          field.Name = "subject";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Subject);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Message);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NoteEmailParameters(");
      bool __first = true;
      if (Guid != null && __isset.guid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Guid: ");
        __sb.Append(Guid);
      }
      if (Note != null && __isset.note) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Note: ");
        __sb.Append(Note== null ? "<null>" : Note.ToString());
      }
      if (ToAddresses != null && __isset.toAddresses) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ToAddresses: ");
        __sb.Append(ToAddresses);
      }
      if (CcAddresses != null && __isset.ccAddresses) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CcAddresses: ");
        __sb.Append(CcAddresses);
      }
      if (Subject != null && __isset.subject) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Subject: ");
        __sb.Append(Subject);
      }
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
