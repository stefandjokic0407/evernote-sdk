/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// Settings meant for the recipient of a notebook share.
  /// 
  /// Some of these fields have a 3-state read value but a 2-state write value.
  /// On read, it is possible to observe "unset", true, or false. The initial
  /// state is "unset". When you choose to set a value, you may set it to either
  /// true or false, but you cannot unset the value. Once one of these members
  /// has a true/false value, it will always have a true/false value.
  /// 
  /// <dl>
  /// <dt>reminderNotifyEmail</dt>
  /// <dd>Indicates that the user wishes to receive daily e-mail notifications
  ///     for reminders associated with the notebook. This may be
  ///     true only for business notebooks that belong to the business of
  ///     which the user is a member. You may only set this value on a
  ///     notebook in your business. This value will initially be unset.</dd>
  /// <dt>reminderNotifyInApp</dt>
  /// <dd>Indicates that the user wishes to receive notifications for
  ///     reminders by applications that support providing such
  ///     notifications.  The exact nature of the notification is defined
  ///     by the individual applications. This value will initially be unset.</dd>
  /// </dl>
  /// <dt>inMyList</dt>
  /// <dd>DEPRECATED: Use recipientStatus instead.
  ///     The notebook is on the recipient's notebook list (formerly, we would say
  ///     that the recipient has "joined" the notebook)</dd>
  /// <dt>recipientStatus</dt>
  /// <dd>The notebook is on/off the recipient's notebook list (formerly, we would say
  ///     that the recipient has "joined" the notebook) and perhaps also their
  ///     default notebook</dd>
  /// <dt>stack</dt>
  /// <dd>The stack the recipient has put this notebook into. See Notebook.stack
  /// for a definition. Every recipient can have their own stack value for the same
  /// notebook.</dd>
  /// </dl>
  /// 
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NotebookRecipientSettings : TBase
  {
    private bool _reminderNotifyEmail;
    private bool _reminderNotifyInApp;
    private bool _inMyList;
    private string _stack;
    private RecipientStatus _recipientStatus;

    public bool ReminderNotifyEmail
    {
      get
      {
        return _reminderNotifyEmail;
      }
      set
      {
        __isset.reminderNotifyEmail = true;
        this._reminderNotifyEmail = value;
      }
    }

    public bool ReminderNotifyInApp
    {
      get
      {
        return _reminderNotifyInApp;
      }
      set
      {
        __isset.reminderNotifyInApp = true;
        this._reminderNotifyInApp = value;
      }
    }

    public bool InMyList
    {
      get
      {
        return _inMyList;
      }
      set
      {
        __isset.inMyList = true;
        this._inMyList = value;
      }
    }

    public string Stack
    {
      get
      {
        return _stack;
      }
      set
      {
        __isset.stack = true;
        this._stack = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="RecipientStatus"/>
    /// </summary>
    public RecipientStatus RecipientStatus
    {
      get
      {
        return _recipientStatus;
      }
      set
      {
        __isset.recipientStatus = true;
        this._recipientStatus = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reminderNotifyEmail;
      public bool reminderNotifyInApp;
      public bool inMyList;
      public bool stack;
      public bool recipientStatus;
    }

    public NotebookRecipientSettings() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                ReminderNotifyEmail = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                ReminderNotifyInApp = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                InMyList = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Stack = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                RecipientStatus = (RecipientStatus)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NotebookRecipientSettings");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reminderNotifyEmail) {
          field.Name = "reminderNotifyEmail";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ReminderNotifyEmail);
          oprot.WriteFieldEnd();
        }
        if (__isset.reminderNotifyInApp) {
          field.Name = "reminderNotifyInApp";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ReminderNotifyInApp);
          oprot.WriteFieldEnd();
        }
        if (__isset.inMyList) {
          field.Name = "inMyList";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(InMyList);
          oprot.WriteFieldEnd();
        }
        if (Stack != null && __isset.stack) {
          field.Name = "stack";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Stack);
          oprot.WriteFieldEnd();
        }
        if (__isset.recipientStatus) {
          field.Name = "recipientStatus";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)RecipientStatus);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NotebookRecipientSettings(");
      bool __first = true;
      if (__isset.reminderNotifyEmail) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReminderNotifyEmail: ");
        __sb.Append(ReminderNotifyEmail);
      }
      if (__isset.reminderNotifyInApp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReminderNotifyInApp: ");
        __sb.Append(ReminderNotifyInApp);
      }
      if (__isset.inMyList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InMyList: ");
        __sb.Append(InMyList);
      }
      if (Stack != null && __isset.stack) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Stack: ");
        __sb.Append(Stack);
      }
      if (__isset.recipientStatus) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RecipientStatus: ");
        __sb.Append(RecipientStatus);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
