/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// Structure holding the optional attributes of a Resource
  /// <dl>
  /// <dt>sourceURL</dt>
  ///   <dd>the original location where the resource was hosted
  ///   <br/>
  ///    Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
  ///   </dd>
  /// 
  /// <dt>timestamp</dt>
  ///   <dd>the date and time that is associated with this resource
  ///   (e.g. the time embedded in an image from a digital camera with a clock)
  ///   </dd>
  /// 
  /// <dt>latitude</dt>
  ///   <dd>the latitude where the resource was captured
  ///   </dd>
  /// 
  /// <dt>longitude</dt>
  ///   <dd>the longitude where the resource was captured
  ///   </dd>
  /// 
  /// <dt>altitude</dt>
  ///   <dd>the altitude where the resource was captured
  ///   </dd>
  /// 
  /// <dt>cameraMake</dt>
  ///   <dd>information about an image's camera, e.g. as embedded in
  ///   the image's EXIF data
  ///   <br/>
  ///   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
  ///   </dd>
  /// 
  /// <dt>cameraModel</dt>
  ///   <dd>information about an image's camera, e.g. as embedded
  ///   in the image's EXIF data
  ///   <br/>
  ///   Length:  EDAM_ATTRIBUTE_LEN_MIN - EDAM_ATTRIBUTE_LEN_MAX
  ///   </dd>
  /// 
  /// <dt>clientWillIndex</dt>
  ///   <dd>if true, then the original client that submitted
  ///   the resource plans to submit the recognition index for this resource at a
  ///   later time.
  ///   </dd>
  /// 
  /// <dt>recoType</dt>
  ///   <dd>DEPRECATED - this field is no longer set by the service, so should
  ///     be ignored.
  ///   </dd>
  /// 
  /// <dt>fileName</dt>
  ///   <dd>if the resource came from a source that provided an
  ///   explicit file name, the original name will be stored here.  Many resources
  ///   come from unnamed sources, so this will not always be set.
  ///   </dd>
  /// 
  /// <dt>attachment</dt>
  ///   <dd>this will be true if the resource should be displayed as an attachment,
  ///   or false if the resource should be displayed inline (if possible).
  ///   </dd>
  /// 
  /// <dt>applicationData</dt>
  /// <dd>Provides a location for applications to store a relatively small
  /// (4kb) blob of data associated with a Resource that is not visible to the user
  /// and that is opaque to the Evernote service. A single application may use at most
  /// one entry in this map, using its API consumer key as the map key. See the
  /// documentation for LazyMap for a description of when the actual map values
  /// are returned by the service.
  /// <p>To safely add or modify your application's entry in the map, use
  /// NoteStore.setResourceApplicationDataEntry. To safely remove your application's
  /// entry from the map, use NoteStore.unsetResourceApplicationDataEntry.</p>
  /// Minimum length of a name (key): EDAM_APPLICATIONDATA_NAME_LEN_MIN
  /// <br/>
  /// Sum max size of key and value: EDAM_APPLICATIONDATA_ENTRY_LEN_MAX
  /// <br/>
  /// Syntax regex for name (key): EDAM_APPLICATIONDATA_NAME_REGEX
  /// </dd>
  /// 
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ResourceAttributes : TBase
  {
    private string _sourceURL;
    private long _timestamp;
    private double _latitude;
    private double _longitude;
    private double _altitude;
    private string _cameraMake;
    private string _cameraModel;
    private bool _clientWillIndex;
    private string _recoType;
    private string _fileName;
    private bool _attachment;
    private LazyMap _applicationData;

    public string SourceURL
    {
      get
      {
        return _sourceURL;
      }
      set
      {
        __isset.sourceURL = true;
        this._sourceURL = value;
      }
    }

    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public double Latitude
    {
      get
      {
        return _latitude;
      }
      set
      {
        __isset.latitude = true;
        this._latitude = value;
      }
    }

    public double Longitude
    {
      get
      {
        return _longitude;
      }
      set
      {
        __isset.longitude = true;
        this._longitude = value;
      }
    }

    public double Altitude
    {
      get
      {
        return _altitude;
      }
      set
      {
        __isset.altitude = true;
        this._altitude = value;
      }
    }

    public string CameraMake
    {
      get
      {
        return _cameraMake;
      }
      set
      {
        __isset.cameraMake = true;
        this._cameraMake = value;
      }
    }

    public string CameraModel
    {
      get
      {
        return _cameraModel;
      }
      set
      {
        __isset.cameraModel = true;
        this._cameraModel = value;
      }
    }

    public bool ClientWillIndex
    {
      get
      {
        return _clientWillIndex;
      }
      set
      {
        __isset.clientWillIndex = true;
        this._clientWillIndex = value;
      }
    }

    public string RecoType
    {
      get
      {
        return _recoType;
      }
      set
      {
        __isset.recoType = true;
        this._recoType = value;
      }
    }

    public string FileName
    {
      get
      {
        return _fileName;
      }
      set
      {
        __isset.fileName = true;
        this._fileName = value;
      }
    }

    public bool Attachment
    {
      get
      {
        return _attachment;
      }
      set
      {
        __isset.attachment = true;
        this._attachment = value;
      }
    }

    public LazyMap ApplicationData
    {
      get
      {
        return _applicationData;
      }
      set
      {
        __isset.applicationData = true;
        this._applicationData = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sourceURL;
      public bool timestamp;
      public bool latitude;
      public bool longitude;
      public bool altitude;
      public bool cameraMake;
      public bool cameraModel;
      public bool clientWillIndex;
      public bool recoType;
      public bool fileName;
      public bool attachment;
      public bool applicationData;
    }

    public ResourceAttributes() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                SourceURL = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Timestamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Double) {
                Latitude = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                Longitude = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Double) {
                Altitude = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                CameraMake = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                CameraModel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                ClientWillIndex = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                RecoType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                FileName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Bool) {
                Attachment = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Struct) {
                ApplicationData = new LazyMap();
                ApplicationData.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ResourceAttributes");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SourceURL != null && __isset.sourceURL) {
          field.Name = "sourceURL";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SourceURL);
          oprot.WriteFieldEnd();
        }
        if (__isset.timestamp) {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Timestamp);
          oprot.WriteFieldEnd();
        }
        if (__isset.latitude) {
          field.Name = "latitude";
          field.Type = TType.Double;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Latitude);
          oprot.WriteFieldEnd();
        }
        if (__isset.longitude) {
          field.Name = "longitude";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Longitude);
          oprot.WriteFieldEnd();
        }
        if (__isset.altitude) {
          field.Name = "altitude";
          field.Type = TType.Double;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(Altitude);
          oprot.WriteFieldEnd();
        }
        if (CameraMake != null && __isset.cameraMake) {
          field.Name = "cameraMake";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CameraMake);
          oprot.WriteFieldEnd();
        }
        if (CameraModel != null && __isset.cameraModel) {
          field.Name = "cameraModel";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CameraModel);
          oprot.WriteFieldEnd();
        }
        if (__isset.clientWillIndex) {
          field.Name = "clientWillIndex";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(ClientWillIndex);
          oprot.WriteFieldEnd();
        }
        if (RecoType != null && __isset.recoType) {
          field.Name = "recoType";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RecoType);
          oprot.WriteFieldEnd();
        }
        if (FileName != null && __isset.fileName) {
          field.Name = "fileName";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FileName);
          oprot.WriteFieldEnd();
        }
        if (__isset.attachment) {
          field.Name = "attachment";
          field.Type = TType.Bool;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Attachment);
          oprot.WriteFieldEnd();
        }
        if (ApplicationData != null && __isset.applicationData) {
          field.Name = "applicationData";
          field.Type = TType.Struct;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          ApplicationData.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ResourceAttributes(");
      bool __first = true;
      if (SourceURL != null && __isset.sourceURL) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SourceURL: ");
        __sb.Append(SourceURL);
      }
      if (__isset.timestamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timestamp: ");
        __sb.Append(Timestamp);
      }
      if (__isset.latitude) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Latitude: ");
        __sb.Append(Latitude);
      }
      if (__isset.longitude) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Longitude: ");
        __sb.Append(Longitude);
      }
      if (__isset.altitude) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Altitude: ");
        __sb.Append(Altitude);
      }
      if (CameraMake != null && __isset.cameraMake) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CameraMake: ");
        __sb.Append(CameraMake);
      }
      if (CameraModel != null && __isset.cameraModel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CameraModel: ");
        __sb.Append(CameraModel);
      }
      if (__isset.clientWillIndex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClientWillIndex: ");
        __sb.Append(ClientWillIndex);
      }
      if (RecoType != null && __isset.recoType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RecoType: ");
        __sb.Append(RecoType);
      }
      if (FileName != null && __isset.fileName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FileName: ");
        __sb.Append(FileName);
      }
      if (__isset.attachment) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Attachment: ");
        __sb.Append(Attachment);
      }
      if (ApplicationData != null && __isset.applicationData) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ApplicationData: ");
        __sb.Append(ApplicationData== null ? "<null>" : ApplicationData.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
