/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A structure defining the scope of a SavedSearch.
  /// 
  /// <dl>
  ///   <dt>includeAccount</dt>
  ///   <dd>The search should include notes from the account that contains the SavedSearch.</dd>
  /// 
  ///   <dt>includePersonalLinkedNotebooks</dt>
  ///   <dd>The search should include notes within those shared notebooks
  ///   that the user has joined that are NOT business notebooks.</dd>
  /// 
  ///   <dt>includeBusinessLinkedNotebooks</dt>
  ///   <dd>The search should include notes within those shared notebooks
  ///   that the user has joined that are business notebooks in the business that
  ///   the user is currently a member of.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SavedSearchScope : TBase
  {
    private bool _includeAccount;
    private bool _includePersonalLinkedNotebooks;
    private bool _includeBusinessLinkedNotebooks;

    public bool IncludeAccount
    {
      get
      {
        return _includeAccount;
      }
      set
      {
        __isset.includeAccount = true;
        this._includeAccount = value;
      }
    }

    public bool IncludePersonalLinkedNotebooks
    {
      get
      {
        return _includePersonalLinkedNotebooks;
      }
      set
      {
        __isset.includePersonalLinkedNotebooks = true;
        this._includePersonalLinkedNotebooks = value;
      }
    }

    public bool IncludeBusinessLinkedNotebooks
    {
      get
      {
        return _includeBusinessLinkedNotebooks;
      }
      set
      {
        __isset.includeBusinessLinkedNotebooks = true;
        this._includeBusinessLinkedNotebooks = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool includeAccount;
      public bool includePersonalLinkedNotebooks;
      public bool includeBusinessLinkedNotebooks;
    }

    public SavedSearchScope() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                IncludeAccount = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                IncludePersonalLinkedNotebooks = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                IncludeBusinessLinkedNotebooks = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SavedSearchScope");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.includeAccount) {
          field.Name = "includeAccount";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeAccount);
          oprot.WriteFieldEnd();
        }
        if (__isset.includePersonalLinkedNotebooks) {
          field.Name = "includePersonalLinkedNotebooks";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludePersonalLinkedNotebooks);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeBusinessLinkedNotebooks) {
          field.Name = "includeBusinessLinkedNotebooks";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeBusinessLinkedNotebooks);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SavedSearchScope(");
      bool __first = true;
      if (__isset.includeAccount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeAccount: ");
        __sb.Append(IncludeAccount);
      }
      if (__isset.includePersonalLinkedNotebooks) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludePersonalLinkedNotebooks: ");
        __sb.Append(IncludePersonalLinkedNotebooks);
      }
      if (__isset.includeBusinessLinkedNotebooks) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeBusinessLinkedNotebooks: ");
        __sb.Append(IncludeBusinessLinkedNotebooks);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
