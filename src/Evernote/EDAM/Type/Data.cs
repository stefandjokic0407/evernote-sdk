/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  ///  In several places, EDAM exchanges blocks of bytes of data for a component
  ///  which may be relatively large.  For example:  the contents of a clipped
  ///  HTML note, the bytes of an embedded image, or the recognition XML for
  ///  a large image.  This structure is used in the protocol to represent
  ///  any of those large blocks of data when they are transmitted or when
  ///  they are only referenced their metadata.
  /// 
  /// <dl>
  ///  <dt>bodyHash</dt>
  ///    <dd>This field carries a one-way hash of the contents of the
  ///    data body, in binary form.  The hash function is MD5<br/>
  ///    Length:  EDAM_HASH_LEN (exactly)
  ///    </dd>
  /// 
  ///  <dt>size</dt>
  ///    <dd>The length, in bytes, of the data body.
  ///    </dd>
  /// 
  ///  <dt>body</dt>
  ///    <dd>This field is set to contain the binary contents of the data
  ///    whenever the resource is being transferred.  If only metadata is
  ///    being exchanged, this field will be empty.  For example, a client could
  ///    notify the service about the change to an attribute for a resource
  ///    without transmitting the binary resource contents.
  ///    </dd>
  ///  </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Data : TBase
  {
    private byte[] _bodyHash;
    private int _size;
    private byte[] _body;

    public byte[] BodyHash
    {
      get
      {
        return _bodyHash;
      }
      set
      {
        __isset.bodyHash = true;
        this._bodyHash = value;
      }
    }

    public int Size
    {
      get
      {
        return _size;
      }
      set
      {
        __isset.size = true;
        this._size = value;
      }
    }

    public byte[] Body
    {
      get
      {
        return _body;
      }
      set
      {
        __isset.body = true;
        this._body = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool bodyHash;
      public bool size;
      public bool body;
    }

    public Data() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BodyHash = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Body = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Data");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BodyHash != null && __isset.bodyHash) {
          field.Name = "bodyHash";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(BodyHash);
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Size);
          oprot.WriteFieldEnd();
        }
        if (Body != null && __isset.body) {
          field.Name = "body";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Body);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Data(");
      bool __first = true;
      if (BodyHash != null && __isset.bodyHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BodyHash: ");
        __sb.Append(BodyHash);
      }
      if (__isset.size) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Size: ");
        __sb.Append(Size);
      }
      if (Body != null && __isset.body) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Body: ");
        __sb.Append(Body);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
