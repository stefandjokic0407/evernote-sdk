/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A named search associated with the account that can be quickly re-used.
  /// <dl>
  /// <dt>guid</dt>
  ///   <dd>The unique identifier of this search.  Will be set by the
  ///   service, so may be omitted by the client when creating.
  ///   <br/>
  ///   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_GUID_REGEX
  ///   </dd>
  /// 
  /// <dt>name</dt>
  ///   <dd>The name of the saved search to display in the GUI.  The
  ///   account may only contain one search with a given name (case-insensitive
  ///   compare). Can't begin or end with a space.
  ///   <br/>
  ///   Length:  EDAM_SAVED_SEARCH_NAME_LEN_MIN - EDAM_SAVED_SEARCH_NAME_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_SAVED_SEARCH_NAME_REGEX
  ///   </dd>
  /// 
  /// <dt>query</dt>
  ///   <dd>A string expressing the search to be performed.
  ///   <br/>
  ///   Length:  EDAM_SAVED_SEARCH_QUERY_LEN_MIN - EDAM_SAVED_SEARCH_QUERY_LEN_MAX
  ///   </dd>
  /// 
  /// <dt>format</dt>
  ///   <dd>The format of the query string, to determine how to parse
  ///   and process it.
  ///   </dd>
  /// 
  /// <dt>updateSequenceNum</dt>
  ///   <dd>A number identifying the last transaction to
  ///   modify the state of this object.  The USN values are sequential within an
  ///   account, and can be used to compare the order of modifications within the
  ///   service.
  ///   </dd>
  /// 
  /// <dt>scope</dt>
  ///   <dd><p>Specifies the set of notes that should be included in the search, if
  ///    possible.</p>
  ///    <p>Clients are expected to search as much of the desired scope as possible,
  ///    with the understanding that a given client may not be able to cover the full
  ///    specified scope. For example, when executing a search that includes notes in both
  ///    the owner's account and business notebooks, a mobile client may choose to only
  ///    search within the user's account because it is not capable of searching both
  ///    scopes simultaneously. When a search across multiple scopes is not possible,
  ///    a client may choose which scope to search based on the current application
  ///    context. If a client cannot search any of the desired scopes, it should refuse
  ///    to execute the search.</p>
  ///    </dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SavedSearch : TBase
  {
    private string _guid;
    private string _name;
    private string _query;
    private QueryFormat _format;
    private int _updateSequenceNum;
    private SavedSearchScope _scope;

    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Query
    {
      get
      {
        return _query;
      }
      set
      {
        __isset.query = true;
        this._query = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="QueryFormat"/>
    /// </summary>
    public QueryFormat Format
    {
      get
      {
        return _format;
      }
      set
      {
        __isset.format = true;
        this._format = value;
      }
    }

    public int UpdateSequenceNum
    {
      get
      {
        return _updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this._updateSequenceNum = value;
      }
    }

    public SavedSearchScope Scope
    {
      get
      {
        return _scope;
      }
      set
      {
        __isset.scope = true;
        this._scope = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool guid;
      public bool name;
      public bool query;
      public bool format;
      public bool updateSequenceNum;
      public bool scope;
    }

    public SavedSearch() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Guid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Query = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Format = (QueryFormat)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                UpdateSequenceNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                Scope = new SavedSearchScope();
                Scope.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SavedSearch");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Guid);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Query != null && __isset.query) {
          field.Name = "query";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Query);
          oprot.WriteFieldEnd();
        }
        if (__isset.format) {
          field.Name = "format";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Format);
          oprot.WriteFieldEnd();
        }
        if (__isset.updateSequenceNum) {
          field.Name = "updateSequenceNum";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UpdateSequenceNum);
          oprot.WriteFieldEnd();
        }
        if (Scope != null && __isset.scope) {
          field.Name = "scope";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          Scope.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SavedSearch(");
      bool __first = true;
      if (Guid != null && __isset.guid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Guid: ");
        __sb.Append(Guid);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Query != null && __isset.query) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Query: ");
        __sb.Append(Query);
      }
      if (__isset.format) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Format: ");
        __sb.Append(Format);
      }
      if (__isset.updateSequenceNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UpdateSequenceNum: ");
        __sb.Append(UpdateSequenceNum);
      }
      if (Scope != null && __isset.scope) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Scope: ");
        __sb.Append(Scope== null ? "<null>" : Scope.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
