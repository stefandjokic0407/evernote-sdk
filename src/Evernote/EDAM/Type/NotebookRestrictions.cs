/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// This structure captures information about the types of operations
  /// that cannot be performed on a given notebook with a type of
  /// authenticated access and credentials.  The values filled into this
  /// structure are based on then-current values in the server database
  /// for shared notebooks and notebook publishing records, as well as
  /// information related to the authentication token.  Information from
  /// the authentication token includes the application that is accessing
  /// the server, as defined by the permissions granted by consumer (api)
  /// key, and the method used to obtain the token, for example via
  /// authenticateToSharedNotebook, authenticateToBusiness, etc.  Note
  /// that changes to values in this structure that are the result of
  /// shared notebook or publishing record changes are communicated to
  /// the client via a change in the notebook USN during sync.  It is
  /// important to use the same access method, parameters, and consumer
  /// key in order obtain correct results from the sync engine.
  /// 
  /// The server has the final say on what is allowed as values may
  /// change between calls to obtain NotebookRestrictions instances
  /// and to operate on data on the service.
  /// 
  /// If the following are set and true, then the given restriction is
  /// in effect, as accessed by the same authentication token from which
  /// the values were obtained.
  /// 
  /// <dl>
  /// <dt>noReadNotes</dt>
  ///   <dd>The client is not able to read notes from the service and
  ///   the notebook is write-only.
  ///   </dd>
  /// <dt>noCreateNotes</dt>
  ///   <dd>The client may not create new notes in the notebook.
  ///   </dd>
  /// <dt>noUpdateNotes</dt>
  ///   <dd>The client may not update notes currently in the notebook.
  ///   </dd>
  /// <dt>noExpungeNotes</dt>
  ///   <dd>The client may not expunge notes currently in the notebook.
  ///   </dd>
  /// <dt>noShareNotes</dt>
  ///   <dd>The client may not share notes in the notebook via the
  ///   shareNote or createOrUpdateSharedNotes methods.
  ///   </dd>
  /// <dt>noEmailNotes</dt>
  ///   <dd>The client may not e-mail notes by guid via the Evernote
  ///   service by using the emailNote method.  Email notes by value
  ///   by populating the note parameter instead.
  ///   </dd>
  /// <dt>noSendMessageToRecipients</dt>
  ///   <dd>The client may not send messages to the share recipients of
  ///   the notebook.
  ///   </dd>
  /// <dt>noUpdateNotebook</dt>
  ///   <dd>The client may not update the Notebook object itself, for
  ///   example, via the updateNotebook method.
  ///   </dd>
  /// <dt>noExpungeNotebook</dt>
  ///   <dd>The client may not expunge the Notebook object itself, for
  ///   example, via the expungeNotebook method.
  ///   </dd>
  /// <dt>noSetDefaultNotebook</dt>
  ///   <dd>The client may not set this notebook to be the default notebook.
  ///   The caller should leave Notebook.defaultNotebook unset.
  ///   </dd>
  /// <dt>noSetNotebookStack</dt>
  ///   <dd>If the client is able to update the Notebook, the Notebook.stack
  ///   value may not be set.
  ///   </dd>
  /// <dt>noPublishToPublic</dt>
  ///   <dd>The client may not publish the notebook to the public.
  ///   For example, business notebooks may not be shared publicly.
  ///   </dd>
  /// <dt>noPublishToBusinessLibrary</dt>
  ///   <dd>The client may not publish the notebook to the business library.
  ///   </dd>
  /// <dt>noCreateTags</dt>
  ///   <dd>The client may not complete an operation that results in a new tag
  ///   being created in the owner's account.
  ///   </dd>
  /// <dt>noUpdateTags</dt>
  ///   <dd>The client may not update tags in the owner's account.
  ///   </dd>
  /// <dt>noExpungeTags</dt>
  ///   <dd>The client may not expunge tags in the owner's account.
  ///   </dd>
  /// <dt>noSetParentTag</dt>
  ///   <dd>If the client is able to create or update tags in the owner's account,
  ///   then they will not be able to set the parent tag.  Leave the value unset.
  ///   </dd>
  /// <dt>noCreateSharedNotebooks</dt>
  ///   <dd>The client is unable to create shared notebooks for the notebook.
  ///   </dd>
  /// <dt>updateWhichSharedNotebookRestrictions</dt>
  ///   <dd>Restrictions on which shared notebook instances can be updated.  If the
  ///   value is not set or null, then the client can update any of the shared notebooks
  ///   associated with the notebook on which the NotebookRestrictions are defined.
  ///   See the enumeration for further details.
  ///   </dd>
  /// <dt>expungeWhichSharedNotebookRestrictions</dt>
  ///   <dd>Restrictions on which shared notebook instances can be expunged.  If the
  ///   value is not set or null, then the client can expunge any of the shared notebooks
  ///   associated with the notebook on which the NotebookRestrictions are defined.
  ///   See the enumeration for further details.
  ///   </dd>
  /// <dt>noShareNotesWithBusiness</dt>
  ///   <dd>The client may not share notes in the notebook via the shareNoteWithBusiness
  ///   method.
  ///   </dd>
  /// <dt>noRenameNotebook</dt>
  ///   <dd>The client may not rename this notebook.</dd>
  /// <dt>noSetInMyList</dt>
  ///   <dd>clients may not change the NotebookRecipientSettings.inMyList settings for
  ///   this notebook.</dd>
  /// <dt>noSetContact</dt>
  ///   <dd>The contact for this notebook may not be changed.</dd>
  /// </dl>
  /// <dt>canMoveToContainerRestrictions</dt>
  ///   <dd>Specifies if the client can move this notebook to a container and if not,
  ///   the reason why.</dd>
  /// <dt>noCanMoveNote</dt>
  ///   <dd>If set, the client cannot move a Note into or out of the Notebook.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NotebookRestrictions : TBase
  {
    private bool _noReadNotes;
    private bool _noCreateNotes;
    private bool _noUpdateNotes;
    private bool _noExpungeNotes;
    private bool _noShareNotes;
    private bool _noEmailNotes;
    private bool _noSendMessageToRecipients;
    private bool _noUpdateNotebook;
    private bool _noExpungeNotebook;
    private bool _noSetDefaultNotebook;
    private bool _noSetNotebookStack;
    private bool _noPublishToPublic;
    private bool _noPublishToBusinessLibrary;
    private bool _noCreateTags;
    private bool _noUpdateTags;
    private bool _noExpungeTags;
    private bool _noSetParentTag;
    private bool _noCreateSharedNotebooks;
    private SharedNotebookInstanceRestrictions _updateWhichSharedNotebookRestrictions;
    private SharedNotebookInstanceRestrictions _expungeWhichSharedNotebookRestrictions;
    private bool _noShareNotesWithBusiness;
    private bool _noRenameNotebook;
    private bool _noSetInMyList;
    private bool _noChangeContact;
    private CanMoveToContainerRestrictions _canMoveToContainerRestrictions;
    private bool _noSetReminderNotifyEmail;
    private bool _noSetReminderNotifyInApp;
    private bool _noSetRecipientSettingsStack;
    private bool _noCanMoveNote;

    public bool NoReadNotes
    {
      get
      {
        return _noReadNotes;
      }
      set
      {
        __isset.noReadNotes = true;
        this._noReadNotes = value;
      }
    }

    public bool NoCreateNotes
    {
      get
      {
        return _noCreateNotes;
      }
      set
      {
        __isset.noCreateNotes = true;
        this._noCreateNotes = value;
      }
    }

    public bool NoUpdateNotes
    {
      get
      {
        return _noUpdateNotes;
      }
      set
      {
        __isset.noUpdateNotes = true;
        this._noUpdateNotes = value;
      }
    }

    public bool NoExpungeNotes
    {
      get
      {
        return _noExpungeNotes;
      }
      set
      {
        __isset.noExpungeNotes = true;
        this._noExpungeNotes = value;
      }
    }

    public bool NoShareNotes
    {
      get
      {
        return _noShareNotes;
      }
      set
      {
        __isset.noShareNotes = true;
        this._noShareNotes = value;
      }
    }

    public bool NoEmailNotes
    {
      get
      {
        return _noEmailNotes;
      }
      set
      {
        __isset.noEmailNotes = true;
        this._noEmailNotes = value;
      }
    }

    public bool NoSendMessageToRecipients
    {
      get
      {
        return _noSendMessageToRecipients;
      }
      set
      {
        __isset.noSendMessageToRecipients = true;
        this._noSendMessageToRecipients = value;
      }
    }

    public bool NoUpdateNotebook
    {
      get
      {
        return _noUpdateNotebook;
      }
      set
      {
        __isset.noUpdateNotebook = true;
        this._noUpdateNotebook = value;
      }
    }

    public bool NoExpungeNotebook
    {
      get
      {
        return _noExpungeNotebook;
      }
      set
      {
        __isset.noExpungeNotebook = true;
        this._noExpungeNotebook = value;
      }
    }

    public bool NoSetDefaultNotebook
    {
      get
      {
        return _noSetDefaultNotebook;
      }
      set
      {
        __isset.noSetDefaultNotebook = true;
        this._noSetDefaultNotebook = value;
      }
    }

    public bool NoSetNotebookStack
    {
      get
      {
        return _noSetNotebookStack;
      }
      set
      {
        __isset.noSetNotebookStack = true;
        this._noSetNotebookStack = value;
      }
    }

    public bool NoPublishToPublic
    {
      get
      {
        return _noPublishToPublic;
      }
      set
      {
        __isset.noPublishToPublic = true;
        this._noPublishToPublic = value;
      }
    }

    public bool NoPublishToBusinessLibrary
    {
      get
      {
        return _noPublishToBusinessLibrary;
      }
      set
      {
        __isset.noPublishToBusinessLibrary = true;
        this._noPublishToBusinessLibrary = value;
      }
    }

    public bool NoCreateTags
    {
      get
      {
        return _noCreateTags;
      }
      set
      {
        __isset.noCreateTags = true;
        this._noCreateTags = value;
      }
    }

    public bool NoUpdateTags
    {
      get
      {
        return _noUpdateTags;
      }
      set
      {
        __isset.noUpdateTags = true;
        this._noUpdateTags = value;
      }
    }

    public bool NoExpungeTags
    {
      get
      {
        return _noExpungeTags;
      }
      set
      {
        __isset.noExpungeTags = true;
        this._noExpungeTags = value;
      }
    }

    public bool NoSetParentTag
    {
      get
      {
        return _noSetParentTag;
      }
      set
      {
        __isset.noSetParentTag = true;
        this._noSetParentTag = value;
      }
    }

    public bool NoCreateSharedNotebooks
    {
      get
      {
        return _noCreateSharedNotebooks;
      }
      set
      {
        __isset.noCreateSharedNotebooks = true;
        this._noCreateSharedNotebooks = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="SharedNotebookInstanceRestrictions"/>
    /// </summary>
    public SharedNotebookInstanceRestrictions UpdateWhichSharedNotebookRestrictions
    {
      get
      {
        return _updateWhichSharedNotebookRestrictions;
      }
      set
      {
        __isset.updateWhichSharedNotebookRestrictions = true;
        this._updateWhichSharedNotebookRestrictions = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="SharedNotebookInstanceRestrictions"/>
    /// </summary>
    public SharedNotebookInstanceRestrictions ExpungeWhichSharedNotebookRestrictions
    {
      get
      {
        return _expungeWhichSharedNotebookRestrictions;
      }
      set
      {
        __isset.expungeWhichSharedNotebookRestrictions = true;
        this._expungeWhichSharedNotebookRestrictions = value;
      }
    }

    public bool NoShareNotesWithBusiness
    {
      get
      {
        return _noShareNotesWithBusiness;
      }
      set
      {
        __isset.noShareNotesWithBusiness = true;
        this._noShareNotesWithBusiness = value;
      }
    }

    public bool NoRenameNotebook
    {
      get
      {
        return _noRenameNotebook;
      }
      set
      {
        __isset.noRenameNotebook = true;
        this._noRenameNotebook = value;
      }
    }

    public bool NoSetInMyList
    {
      get
      {
        return _noSetInMyList;
      }
      set
      {
        __isset.noSetInMyList = true;
        this._noSetInMyList = value;
      }
    }

    public bool NoChangeContact
    {
      get
      {
        return _noChangeContact;
      }
      set
      {
        __isset.noChangeContact = true;
        this._noChangeContact = value;
      }
    }

    public CanMoveToContainerRestrictions CanMoveToContainerRestrictions
    {
      get
      {
        return _canMoveToContainerRestrictions;
      }
      set
      {
        __isset.canMoveToContainerRestrictions = true;
        this._canMoveToContainerRestrictions = value;
      }
    }

    public bool NoSetReminderNotifyEmail
    {
      get
      {
        return _noSetReminderNotifyEmail;
      }
      set
      {
        __isset.noSetReminderNotifyEmail = true;
        this._noSetReminderNotifyEmail = value;
      }
    }

    public bool NoSetReminderNotifyInApp
    {
      get
      {
        return _noSetReminderNotifyInApp;
      }
      set
      {
        __isset.noSetReminderNotifyInApp = true;
        this._noSetReminderNotifyInApp = value;
      }
    }

    public bool NoSetRecipientSettingsStack
    {
      get
      {
        return _noSetRecipientSettingsStack;
      }
      set
      {
        __isset.noSetRecipientSettingsStack = true;
        this._noSetRecipientSettingsStack = value;
      }
    }

    public bool NoCanMoveNote
    {
      get
      {
        return _noCanMoveNote;
      }
      set
      {
        __isset.noCanMoveNote = true;
        this._noCanMoveNote = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool noReadNotes;
      public bool noCreateNotes;
      public bool noUpdateNotes;
      public bool noExpungeNotes;
      public bool noShareNotes;
      public bool noEmailNotes;
      public bool noSendMessageToRecipients;
      public bool noUpdateNotebook;
      public bool noExpungeNotebook;
      public bool noSetDefaultNotebook;
      public bool noSetNotebookStack;
      public bool noPublishToPublic;
      public bool noPublishToBusinessLibrary;
      public bool noCreateTags;
      public bool noUpdateTags;
      public bool noExpungeTags;
      public bool noSetParentTag;
      public bool noCreateSharedNotebooks;
      public bool updateWhichSharedNotebookRestrictions;
      public bool expungeWhichSharedNotebookRestrictions;
      public bool noShareNotesWithBusiness;
      public bool noRenameNotebook;
      public bool noSetInMyList;
      public bool noChangeContact;
      public bool canMoveToContainerRestrictions;
      public bool noSetReminderNotifyEmail;
      public bool noSetReminderNotifyInApp;
      public bool noSetRecipientSettingsStack;
      public bool noCanMoveNote;
    }

    public NotebookRestrictions() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                NoReadNotes = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                NoCreateNotes = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                NoUpdateNotes = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                NoExpungeNotes = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                NoShareNotes = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                NoEmailNotes = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                NoSendMessageToRecipients = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                NoUpdateNotebook = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                NoExpungeNotebook = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                NoSetDefaultNotebook = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Bool) {
                NoSetNotebookStack = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Bool) {
                NoPublishToPublic = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Bool) {
                NoPublishToBusinessLibrary = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Bool) {
                NoCreateTags = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Bool) {
                NoUpdateTags = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.Bool) {
                NoExpungeTags = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Bool) {
                NoSetParentTag = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.Bool) {
                NoCreateSharedNotebooks = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.I32) {
                UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.I32) {
                ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.Bool) {
                NoShareNotesWithBusiness = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 22:
              if (field.Type == TType.Bool) {
                NoRenameNotebook = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 23:
              if (field.Type == TType.Bool) {
                NoSetInMyList = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 24:
              if (field.Type == TType.Bool) {
                NoChangeContact = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 26:
              if (field.Type == TType.Struct) {
                CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();
                CanMoveToContainerRestrictions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 27:
              if (field.Type == TType.Bool) {
                NoSetReminderNotifyEmail = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 28:
              if (field.Type == TType.Bool) {
                NoSetReminderNotifyInApp = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 29:
              if (field.Type == TType.Bool) {
                NoSetRecipientSettingsStack = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 30:
              if (field.Type == TType.Bool) {
                NoCanMoveNote = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NotebookRestrictions");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.noReadNotes) {
          field.Name = "noReadNotes";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoReadNotes);
          oprot.WriteFieldEnd();
        }
        if (__isset.noCreateNotes) {
          field.Name = "noCreateNotes";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoCreateNotes);
          oprot.WriteFieldEnd();
        }
        if (__isset.noUpdateNotes) {
          field.Name = "noUpdateNotes";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoUpdateNotes);
          oprot.WriteFieldEnd();
        }
        if (__isset.noExpungeNotes) {
          field.Name = "noExpungeNotes";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoExpungeNotes);
          oprot.WriteFieldEnd();
        }
        if (__isset.noShareNotes) {
          field.Name = "noShareNotes";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoShareNotes);
          oprot.WriteFieldEnd();
        }
        if (__isset.noEmailNotes) {
          field.Name = "noEmailNotes";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoEmailNotes);
          oprot.WriteFieldEnd();
        }
        if (__isset.noSendMessageToRecipients) {
          field.Name = "noSendMessageToRecipients";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoSendMessageToRecipients);
          oprot.WriteFieldEnd();
        }
        if (__isset.noUpdateNotebook) {
          field.Name = "noUpdateNotebook";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoUpdateNotebook);
          oprot.WriteFieldEnd();
        }
        if (__isset.noExpungeNotebook) {
          field.Name = "noExpungeNotebook";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoExpungeNotebook);
          oprot.WriteFieldEnd();
        }
        if (__isset.noSetDefaultNotebook) {
          field.Name = "noSetDefaultNotebook";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoSetDefaultNotebook);
          oprot.WriteFieldEnd();
        }
        if (__isset.noSetNotebookStack) {
          field.Name = "noSetNotebookStack";
          field.Type = TType.Bool;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoSetNotebookStack);
          oprot.WriteFieldEnd();
        }
        if (__isset.noPublishToPublic) {
          field.Name = "noPublishToPublic";
          field.Type = TType.Bool;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoPublishToPublic);
          oprot.WriteFieldEnd();
        }
        if (__isset.noPublishToBusinessLibrary) {
          field.Name = "noPublishToBusinessLibrary";
          field.Type = TType.Bool;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoPublishToBusinessLibrary);
          oprot.WriteFieldEnd();
        }
        if (__isset.noCreateTags) {
          field.Name = "noCreateTags";
          field.Type = TType.Bool;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoCreateTags);
          oprot.WriteFieldEnd();
        }
        if (__isset.noUpdateTags) {
          field.Name = "noUpdateTags";
          field.Type = TType.Bool;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoUpdateTags);
          oprot.WriteFieldEnd();
        }
        if (__isset.noExpungeTags) {
          field.Name = "noExpungeTags";
          field.Type = TType.Bool;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoExpungeTags);
          oprot.WriteFieldEnd();
        }
        if (__isset.noSetParentTag) {
          field.Name = "noSetParentTag";
          field.Type = TType.Bool;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoSetParentTag);
          oprot.WriteFieldEnd();
        }
        if (__isset.noCreateSharedNotebooks) {
          field.Name = "noCreateSharedNotebooks";
          field.Type = TType.Bool;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoCreateSharedNotebooks);
          oprot.WriteFieldEnd();
        }
        if (__isset.updateWhichSharedNotebookRestrictions) {
          field.Name = "updateWhichSharedNotebookRestrictions";
          field.Type = TType.I32;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)UpdateWhichSharedNotebookRestrictions);
          oprot.WriteFieldEnd();
        }
        if (__isset.expungeWhichSharedNotebookRestrictions) {
          field.Name = "expungeWhichSharedNotebookRestrictions";
          field.Type = TType.I32;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ExpungeWhichSharedNotebookRestrictions);
          oprot.WriteFieldEnd();
        }
        if (__isset.noShareNotesWithBusiness) {
          field.Name = "noShareNotesWithBusiness";
          field.Type = TType.Bool;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoShareNotesWithBusiness);
          oprot.WriteFieldEnd();
        }
        if (__isset.noRenameNotebook) {
          field.Name = "noRenameNotebook";
          field.Type = TType.Bool;
          field.ID = 22;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoRenameNotebook);
          oprot.WriteFieldEnd();
        }
        if (__isset.noSetInMyList) {
          field.Name = "noSetInMyList";
          field.Type = TType.Bool;
          field.ID = 23;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoSetInMyList);
          oprot.WriteFieldEnd();
        }
        if (__isset.noChangeContact) {
          field.Name = "noChangeContact";
          field.Type = TType.Bool;
          field.ID = 24;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoChangeContact);
          oprot.WriteFieldEnd();
        }
        if (CanMoveToContainerRestrictions != null && __isset.canMoveToContainerRestrictions) {
          field.Name = "canMoveToContainerRestrictions";
          field.Type = TType.Struct;
          field.ID = 26;
          oprot.WriteFieldBegin(field);
          CanMoveToContainerRestrictions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.noSetReminderNotifyEmail) {
          field.Name = "noSetReminderNotifyEmail";
          field.Type = TType.Bool;
          field.ID = 27;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoSetReminderNotifyEmail);
          oprot.WriteFieldEnd();
        }
        if (__isset.noSetReminderNotifyInApp) {
          field.Name = "noSetReminderNotifyInApp";
          field.Type = TType.Bool;
          field.ID = 28;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoSetReminderNotifyInApp);
          oprot.WriteFieldEnd();
        }
        if (__isset.noSetRecipientSettingsStack) {
          field.Name = "noSetRecipientSettingsStack";
          field.Type = TType.Bool;
          field.ID = 29;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoSetRecipientSettingsStack);
          oprot.WriteFieldEnd();
        }
        if (__isset.noCanMoveNote) {
          field.Name = "noCanMoveNote";
          field.Type = TType.Bool;
          field.ID = 30;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NoCanMoveNote);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NotebookRestrictions(");
      bool __first = true;
      if (__isset.noReadNotes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoReadNotes: ");
        __sb.Append(NoReadNotes);
      }
      if (__isset.noCreateNotes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoCreateNotes: ");
        __sb.Append(NoCreateNotes);
      }
      if (__isset.noUpdateNotes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoUpdateNotes: ");
        __sb.Append(NoUpdateNotes);
      }
      if (__isset.noExpungeNotes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoExpungeNotes: ");
        __sb.Append(NoExpungeNotes);
      }
      if (__isset.noShareNotes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoShareNotes: ");
        __sb.Append(NoShareNotes);
      }
      if (__isset.noEmailNotes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoEmailNotes: ");
        __sb.Append(NoEmailNotes);
      }
      if (__isset.noSendMessageToRecipients) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoSendMessageToRecipients: ");
        __sb.Append(NoSendMessageToRecipients);
      }
      if (__isset.noUpdateNotebook) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoUpdateNotebook: ");
        __sb.Append(NoUpdateNotebook);
      }
      if (__isset.noExpungeNotebook) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoExpungeNotebook: ");
        __sb.Append(NoExpungeNotebook);
      }
      if (__isset.noSetDefaultNotebook) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoSetDefaultNotebook: ");
        __sb.Append(NoSetDefaultNotebook);
      }
      if (__isset.noSetNotebookStack) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoSetNotebookStack: ");
        __sb.Append(NoSetNotebookStack);
      }
      if (__isset.noPublishToPublic) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoPublishToPublic: ");
        __sb.Append(NoPublishToPublic);
      }
      if (__isset.noPublishToBusinessLibrary) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoPublishToBusinessLibrary: ");
        __sb.Append(NoPublishToBusinessLibrary);
      }
      if (__isset.noCreateTags) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoCreateTags: ");
        __sb.Append(NoCreateTags);
      }
      if (__isset.noUpdateTags) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoUpdateTags: ");
        __sb.Append(NoUpdateTags);
      }
      if (__isset.noExpungeTags) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoExpungeTags: ");
        __sb.Append(NoExpungeTags);
      }
      if (__isset.noSetParentTag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoSetParentTag: ");
        __sb.Append(NoSetParentTag);
      }
      if (__isset.noCreateSharedNotebooks) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoCreateSharedNotebooks: ");
        __sb.Append(NoCreateSharedNotebooks);
      }
      if (__isset.updateWhichSharedNotebookRestrictions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UpdateWhichSharedNotebookRestrictions: ");
        __sb.Append(UpdateWhichSharedNotebookRestrictions);
      }
      if (__isset.expungeWhichSharedNotebookRestrictions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpungeWhichSharedNotebookRestrictions: ");
        __sb.Append(ExpungeWhichSharedNotebookRestrictions);
      }
      if (__isset.noShareNotesWithBusiness) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoShareNotesWithBusiness: ");
        __sb.Append(NoShareNotesWithBusiness);
      }
      if (__isset.noRenameNotebook) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoRenameNotebook: ");
        __sb.Append(NoRenameNotebook);
      }
      if (__isset.noSetInMyList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoSetInMyList: ");
        __sb.Append(NoSetInMyList);
      }
      if (__isset.noChangeContact) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoChangeContact: ");
        __sb.Append(NoChangeContact);
      }
      if (CanMoveToContainerRestrictions != null && __isset.canMoveToContainerRestrictions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CanMoveToContainerRestrictions: ");
        __sb.Append(CanMoveToContainerRestrictions== null ? "<null>" : CanMoveToContainerRestrictions.ToString());
      }
      if (__isset.noSetReminderNotifyEmail) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoSetReminderNotifyEmail: ");
        __sb.Append(NoSetReminderNotifyEmail);
      }
      if (__isset.noSetReminderNotifyInApp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoSetReminderNotifyInApp: ");
        __sb.Append(NoSetReminderNotifyInApp);
      }
      if (__isset.noSetRecipientSettingsStack) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoSetRecipientSettingsStack: ");
        __sb.Append(NoSetRecipientSettingsStack);
      }
      if (__isset.noCanMoveNote) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoCanMoveNote: ");
        __sb.Append(NoCanMoveNote);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
