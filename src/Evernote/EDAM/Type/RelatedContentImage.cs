/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// An external image that can be shown with a related content snippet,
  /// usually either a JPEG or PNG image. It is up to the client which image(s) are shown,
  /// depending on available screen real estate, resolution and aspect ratio.
  /// 
  /// <dl>
  ///  <dt>url</dt>
  ///    <dd>The external URL of the image</dd>
  ///  <dt>width</dt>
  ///    <dd>The width of the image, in pixels.</dd>
  ///  <dt>height</dt>
  ///    <dd>The height of the image, in pixels.</dd>
  ///  <dt>pixelRatio</dt>
  ///    <dd>the pixel ratio (usually either 1.0, 1.5 or 2.0)</dd>
  ///  <dt>fileSize</dt>
  ///    <dd>the size of the image file, in bytes</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RelatedContentImage : TBase
  {
    private string _url;
    private int _width;
    private int _height;
    private double _pixelRatio;
    private int _fileSize;

    public string Url
    {
      get
      {
        return _url;
      }
      set
      {
        __isset.url = true;
        this._url = value;
      }
    }

    public int Width
    {
      get
      {
        return _width;
      }
      set
      {
        __isset.width = true;
        this._width = value;
      }
    }

    public int Height
    {
      get
      {
        return _height;
      }
      set
      {
        __isset.height = true;
        this._height = value;
      }
    }

    public double PixelRatio
    {
      get
      {
        return _pixelRatio;
      }
      set
      {
        __isset.pixelRatio = true;
        this._pixelRatio = value;
      }
    }

    public int FileSize
    {
      get
      {
        return _fileSize;
      }
      set
      {
        __isset.fileSize = true;
        this._fileSize = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool url;
      public bool width;
      public bool height;
      public bool pixelRatio;
      public bool fileSize;
    }

    public RelatedContentImage() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Url = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Width = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Height = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Double) {
                PixelRatio = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                FileSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RelatedContentImage");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Url != null && __isset.url) {
          field.Name = "url";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Url);
          oprot.WriteFieldEnd();
        }
        if (__isset.width) {
          field.Name = "width";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Width);
          oprot.WriteFieldEnd();
        }
        if (__isset.height) {
          field.Name = "height";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Height);
          oprot.WriteFieldEnd();
        }
        if (__isset.pixelRatio) {
          field.Name = "pixelRatio";
          field.Type = TType.Double;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(PixelRatio);
          oprot.WriteFieldEnd();
        }
        if (__isset.fileSize) {
          field.Name = "fileSize";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(FileSize);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RelatedContentImage(");
      bool __first = true;
      if (Url != null && __isset.url) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Url: ");
        __sb.Append(Url);
      }
      if (__isset.width) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Width: ");
        __sb.Append(Width);
      }
      if (__isset.height) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Height: ");
        __sb.Append(Height);
      }
      if (__isset.pixelRatio) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PixelRatio: ");
        __sb.Append(PixelRatio);
      }
      if (__isset.fileSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FileSize: ");
        __sb.Append(FileSize);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
