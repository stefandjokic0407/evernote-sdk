/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// This structure is used to provide information about an Evernote Business
  /// membership, for members who are part of a business.
  /// 
  /// <dl>
  /// <dt>businessId</dt>
  ///   <dd>The ID of the Evernote Business account that the user is a member of.
  /// <dt>businessName</dt>
  ///   <dd>The human-readable name of the Evernote Business account that the user
  ///       is a member of.</dd>
  /// <dt>role</dt>
  ///   <dd>The role of the user within the Evernote Business account that
  ///       they are a member of.</dd>
  /// <dt>email</dt>
  ///   <dd>An e-mail address that will be used by the service in the context of your
  ///       Evernote Business activities.  For example, this e-mail address will be used
  ///       when you e-mail a business note, when you update notes in the account of
  ///       your business, etc.  The business e-mail cannot be used for identification
  ///       purposes such as for logging into the service.
  ///   </dd>
  /// <dt>updated</dt>
  ///   <dd>Last time the business user or business user attributes were updated.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BusinessUserInfo : TBase
  {
    private int _businessId;
    private string _businessName;
    private BusinessUserRole _role;
    private string _email;
    private long _updated;

    public int BusinessId
    {
      get
      {
        return _businessId;
      }
      set
      {
        __isset.businessId = true;
        this._businessId = value;
      }
    }

    public string BusinessName
    {
      get
      {
        return _businessName;
      }
      set
      {
        __isset.businessName = true;
        this._businessName = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="BusinessUserRole"/>
    /// </summary>
    public BusinessUserRole Role
    {
      get
      {
        return _role;
      }
      set
      {
        __isset.role = true;
        this._role = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public long Updated
    {
      get
      {
        return _updated;
      }
      set
      {
        __isset.updated = true;
        this._updated = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool businessId;
      public bool businessName;
      public bool role;
      public bool email;
      public bool updated;
    }

    public BusinessUserInfo() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                BusinessId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                BusinessName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Role = (BusinessUserRole)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                Updated = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("BusinessUserInfo");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.businessId) {
          field.Name = "businessId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(BusinessId);
          oprot.WriteFieldEnd();
        }
        if (BusinessName != null && __isset.businessName) {
          field.Name = "businessName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BusinessName);
          oprot.WriteFieldEnd();
        }
        if (__isset.role) {
          field.Name = "role";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Role);
          oprot.WriteFieldEnd();
        }
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        if (__isset.updated) {
          field.Name = "updated";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Updated);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BusinessUserInfo(");
      bool __first = true;
      if (__isset.businessId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BusinessId: ");
        __sb.Append(BusinessId);
      }
      if (BusinessName != null && __isset.businessName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BusinessName: ");
        __sb.Append(BusinessName);
      }
      if (__isset.role) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Role: ");
        __sb.Append(Role);
      }
      if (Email != null && __isset.email) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Email: ");
        __sb.Append(Email);
      }
      if (__isset.updated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Updated: ");
        __sb.Append(Updated);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
