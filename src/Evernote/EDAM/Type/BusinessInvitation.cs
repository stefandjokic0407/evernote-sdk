/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A structure describing an invitation to join a business account.
  /// 
  /// <dl>
  ///   <dt>businessId</dt>
  ///     <dd>
  ///       The ID of the business to which the invitation grants access.
  ///     </dd>
  /// 
  ///   <dt>email</dt>
  ///     <dd>
  ///       The email address that was invited to join the business.
  ///     </dd>
  /// 
  ///   <dt>role</dt>
  ///     <dd>
  ///       The role to grant the user after the invitation is accepted.
  ///     </dd>
  /// 
  ///   <dt>status</dt>
  ///     <dd>
  ///       The status of the invitation.
  ///     </dd>
  /// 
  ///   <dt>requesterId</dt>
  ///     <dd>
  ///       For invitations that were initially requested by a non-admin member of the business,
  ///       this field specifies the user ID of the requestor. For all other invitations, this field
  ///       will be unset.
  ///     </dd>
  ///   <dt>fromWorkChat</dt>
  ///     <dd>
  ///       If this invitation was created implicitly via a WorkChat, this field
  ///       will be true.
  ///     </dd>
  ///   <dt>created</dt>
  ///     <dd>
  ///       The timestamp at which this invitation was created.
  ///     </dd>
  ///   <dt>mostRecentReminder</dt>
  ///     <dd>
  ///       The timestamp at which the most recent reminder was sent.
  ///     </dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BusinessInvitation : TBase
  {
    private int _businessId;
    private string _email;
    private BusinessUserRole _role;
    private BusinessInvitationStatus _status;
    private int _requesterId;
    private bool _fromWorkChat;
    private long _created;
    private long _mostRecentReminder;

    public int BusinessId
    {
      get
      {
        return _businessId;
      }
      set
      {
        __isset.businessId = true;
        this._businessId = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="BusinessUserRole"/>
    /// </summary>
    public BusinessUserRole Role
    {
      get
      {
        return _role;
      }
      set
      {
        __isset.role = true;
        this._role = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="BusinessInvitationStatus"/>
    /// </summary>
    public BusinessInvitationStatus Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public int RequesterId
    {
      get
      {
        return _requesterId;
      }
      set
      {
        __isset.requesterId = true;
        this._requesterId = value;
      }
    }

    public bool FromWorkChat
    {
      get
      {
        return _fromWorkChat;
      }
      set
      {
        __isset.fromWorkChat = true;
        this._fromWorkChat = value;
      }
    }

    public long Created
    {
      get
      {
        return _created;
      }
      set
      {
        __isset.created = true;
        this._created = value;
      }
    }

    public long MostRecentReminder
    {
      get
      {
        return _mostRecentReminder;
      }
      set
      {
        __isset.mostRecentReminder = true;
        this._mostRecentReminder = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool businessId;
      public bool email;
      public bool role;
      public bool status;
      public bool requesterId;
      public bool fromWorkChat;
      public bool created;
      public bool mostRecentReminder;
    }

    public BusinessInvitation() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                BusinessId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Role = (BusinessUserRole)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Status = (BusinessInvitationStatus)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                RequesterId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                FromWorkChat = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                Created = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                MostRecentReminder = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("BusinessInvitation");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.businessId) {
          field.Name = "businessId";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(BusinessId);
          oprot.WriteFieldEnd();
        }
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        if (__isset.role) {
          field.Name = "role";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Role);
          oprot.WriteFieldEnd();
        }
        if (__isset.status) {
          field.Name = "status";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Status);
          oprot.WriteFieldEnd();
        }
        if (__isset.requesterId) {
          field.Name = "requesterId";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(RequesterId);
          oprot.WriteFieldEnd();
        }
        if (__isset.fromWorkChat) {
          field.Name = "fromWorkChat";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(FromWorkChat);
          oprot.WriteFieldEnd();
        }
        if (__isset.created) {
          field.Name = "created";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Created);
          oprot.WriteFieldEnd();
        }
        if (__isset.mostRecentReminder) {
          field.Name = "mostRecentReminder";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(MostRecentReminder);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BusinessInvitation(");
      bool __first = true;
      if (__isset.businessId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BusinessId: ");
        __sb.Append(BusinessId);
      }
      if (Email != null && __isset.email) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Email: ");
        __sb.Append(Email);
      }
      if (__isset.role) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Role: ");
        __sb.Append(Role);
      }
      if (__isset.status) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Status: ");
        __sb.Append(Status);
      }
      if (__isset.requesterId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequesterId: ");
        __sb.Append(RequesterId);
      }
      if (__isset.fromWorkChat) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FromWorkChat: ");
        __sb.Append(FromWorkChat);
      }
      if (__isset.created) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Created: ");
        __sb.Append(Created);
      }
      if (__isset.mostRecentReminder) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MostRecentReminder: ");
        __sb.Append(MostRecentReminder);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
