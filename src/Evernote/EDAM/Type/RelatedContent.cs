/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A structure identifying one snippet of related content (some information that is not
  /// part of an Evernote account but might still be relevant to the user).
  /// 
  /// <dl>
  /// 
  /// <dt>contentId</dt>
  /// <dd>An identifier that uniquely identifies the content.</dd>
  /// 
  /// <dt>title</dt>
  /// <dd>The main title to show.</dd>
  /// 
  /// <dt>url</dt>
  /// <dd>The URL the client can use to retrieve the content.</dd>
  /// 
  /// <dt>sourceId</dt>
  /// <dd>An identifier that uniquely identifies the source.</dd>
  /// 
  /// <dt>sourceUrl</dt>
  /// <dd>A URL the client can access to know more about the source.</dd>
  /// 
  /// <dt>sourceFaviconUrl</dt>
  /// <dd>The favicon URL of the source which the content belongs to.</dd>
  /// </dl>
  /// 
  /// <dt>sourceName</dt>
  /// <dd>A human-readable name of the source that provided this content.</dd>
  /// 
  /// <dt>date</dt>
  /// <dd>A timestamp telling the user about the recency of the content.</dd>
  /// 
  /// <dt>teaser</dt>
  /// <dd>A teaser text to show to the user; usually the first few sentences of the content,
  ///     excluding the title.</dd>
  /// 
  /// <dt>thumbnails</dt>
  /// <dd>A list of thumbnails the client can show in the snippet.</dd>
  /// 
  /// <dt>contentType</dt>
  /// <dd>The type of this related content.</dd>
  /// 
  /// <dt>accessType</dt>
  /// <dd>An indication of how this content can be accessed. This type influences the
  ///     semantics of the <code>url</code> parameter.</dd>
  /// 
  /// <dt>visibleUrl</dt>
  /// <dd>If set, the client should show this URL to the user, instead of the URL that was
  ///     used to retrieve the content. This URL should be used when opening the content
  ///     in an external browser window, or when sharing with another person.</dd>
  /// 
  /// <dt>clipUrl</dt>
  /// <dd>If set, the client should use this URL for clipping purposes, instead of the URL
  ///     that was used to retrieve the content. The clipUrl may directly point to an .enex
  ///     file, for example.</dd>
  /// 
  /// <dt>contact</dt>
  /// <dd>If set, the client may use this Contact for messaging purposes. This will typically
  ///     only be set for user profiles.</dd>
  /// 
  /// <dt>authors</dt>
  /// <dd>For News articles only. A list of names of the article authors, if available.</dd>
  /// 
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RelatedContent : TBase
  {
    private string _contentId;
    private string _title;
    private string _url;
    private string _sourceId;
    private string _sourceUrl;
    private string _sourceFaviconUrl;
    private string _sourceName;
    private long _date;
    private string _teaser;
    private List<RelatedContentImage> _thumbnails;
    private RelatedContentType _contentType;
    private RelatedContentAccess _accessType;
    private string _visibleUrl;
    private string _clipUrl;
    private Contact _contact;
    private List<string> _authors;

    public string ContentId
    {
      get
      {
        return _contentId;
      }
      set
      {
        __isset.contentId = true;
        this._contentId = value;
      }
    }

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string Url
    {
      get
      {
        return _url;
      }
      set
      {
        __isset.url = true;
        this._url = value;
      }
    }

    public string SourceId
    {
      get
      {
        return _sourceId;
      }
      set
      {
        __isset.sourceId = true;
        this._sourceId = value;
      }
    }

    public string SourceUrl
    {
      get
      {
        return _sourceUrl;
      }
      set
      {
        __isset.sourceUrl = true;
        this._sourceUrl = value;
      }
    }

    public string SourceFaviconUrl
    {
      get
      {
        return _sourceFaviconUrl;
      }
      set
      {
        __isset.sourceFaviconUrl = true;
        this._sourceFaviconUrl = value;
      }
    }

    public string SourceName
    {
      get
      {
        return _sourceName;
      }
      set
      {
        __isset.sourceName = true;
        this._sourceName = value;
      }
    }

    public long Date
    {
      get
      {
        return _date;
      }
      set
      {
        __isset.date = true;
        this._date = value;
      }
    }

    public string Teaser
    {
      get
      {
        return _teaser;
      }
      set
      {
        __isset.teaser = true;
        this._teaser = value;
      }
    }

    public List<RelatedContentImage> Thumbnails
    {
      get
      {
        return _thumbnails;
      }
      set
      {
        __isset.thumbnails = true;
        this._thumbnails = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="RelatedContentType"/>
    /// </summary>
    public RelatedContentType ContentType
    {
      get
      {
        return _contentType;
      }
      set
      {
        __isset.contentType = true;
        this._contentType = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="RelatedContentAccess"/>
    /// </summary>
    public RelatedContentAccess AccessType
    {
      get
      {
        return _accessType;
      }
      set
      {
        __isset.accessType = true;
        this._accessType = value;
      }
    }

    public string VisibleUrl
    {
      get
      {
        return _visibleUrl;
      }
      set
      {
        __isset.visibleUrl = true;
        this._visibleUrl = value;
      }
    }

    public string ClipUrl
    {
      get
      {
        return _clipUrl;
      }
      set
      {
        __isset.clipUrl = true;
        this._clipUrl = value;
      }
    }

    public Contact Contact
    {
      get
      {
        return _contact;
      }
      set
      {
        __isset.contact = true;
        this._contact = value;
      }
    }

    public List<string> Authors
    {
      get
      {
        return _authors;
      }
      set
      {
        __isset.authors = true;
        this._authors = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool contentId;
      public bool title;
      public bool url;
      public bool sourceId;
      public bool sourceUrl;
      public bool sourceFaviconUrl;
      public bool sourceName;
      public bool date;
      public bool teaser;
      public bool thumbnails;
      public bool contentType;
      public bool accessType;
      public bool visibleUrl;
      public bool clipUrl;
      public bool contact;
      public bool authors;
    }

    public RelatedContent() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ContentId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Title = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Url = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                SourceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                SourceUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                SourceFaviconUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                SourceName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Date = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Teaser = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.List) {
                {
                  Thumbnails = new List<RelatedContentImage>();
                  TList _list46 = iprot.ReadListBegin();
                  for( int _i47 = 0; _i47 < _list46.Count; ++_i47)
                  {
                    RelatedContentImage _elem48;
                    _elem48 = new RelatedContentImage();
                    _elem48.Read(iprot);
                    Thumbnails.Add(_elem48);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                ContentType = (RelatedContentType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I32) {
                AccessType = (RelatedContentAccess)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                VisibleUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                ClipUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Struct) {
                Contact = new Contact();
                Contact.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.List) {
                {
                  Authors = new List<string>();
                  TList _list49 = iprot.ReadListBegin();
                  for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                  {
                    string _elem51;
                    _elem51 = iprot.ReadString();
                    Authors.Add(_elem51);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("RelatedContent");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ContentId != null && __isset.contentId) {
          field.Name = "contentId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ContentId);
          oprot.WriteFieldEnd();
        }
        if (Title != null && __isset.title) {
          field.Name = "title";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Title);
          oprot.WriteFieldEnd();
        }
        if (Url != null && __isset.url) {
          field.Name = "url";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Url);
          oprot.WriteFieldEnd();
        }
        if (SourceId != null && __isset.sourceId) {
          field.Name = "sourceId";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SourceId);
          oprot.WriteFieldEnd();
        }
        if (SourceUrl != null && __isset.sourceUrl) {
          field.Name = "sourceUrl";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SourceUrl);
          oprot.WriteFieldEnd();
        }
        if (SourceFaviconUrl != null && __isset.sourceFaviconUrl) {
          field.Name = "sourceFaviconUrl";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SourceFaviconUrl);
          oprot.WriteFieldEnd();
        }
        if (SourceName != null && __isset.sourceName) {
          field.Name = "sourceName";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SourceName);
          oprot.WriteFieldEnd();
        }
        if (__isset.date) {
          field.Name = "date";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Date);
          oprot.WriteFieldEnd();
        }
        if (Teaser != null && __isset.teaser) {
          field.Name = "teaser";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Teaser);
          oprot.WriteFieldEnd();
        }
        if (Thumbnails != null && __isset.thumbnails) {
          field.Name = "thumbnails";
          field.Type = TType.List;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Thumbnails.Count));
            foreach (RelatedContentImage _iter52 in Thumbnails)
            {
              _iter52.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.contentType) {
          field.Name = "contentType";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ContentType);
          oprot.WriteFieldEnd();
        }
        if (__isset.accessType) {
          field.Name = "accessType";
          field.Type = TType.I32;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)AccessType);
          oprot.WriteFieldEnd();
        }
        if (VisibleUrl != null && __isset.visibleUrl) {
          field.Name = "visibleUrl";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(VisibleUrl);
          oprot.WriteFieldEnd();
        }
        if (ClipUrl != null && __isset.clipUrl) {
          field.Name = "clipUrl";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClipUrl);
          oprot.WriteFieldEnd();
        }
        if (Contact != null && __isset.contact) {
          field.Name = "contact";
          field.Type = TType.Struct;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          Contact.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Authors != null && __isset.authors) {
          field.Name = "authors";
          field.Type = TType.List;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Authors.Count));
            foreach (string _iter53 in Authors)
            {
              oprot.WriteString(_iter53);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RelatedContent(");
      bool __first = true;
      if (ContentId != null && __isset.contentId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContentId: ");
        __sb.Append(ContentId);
      }
      if (Title != null && __isset.title) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Title: ");
        __sb.Append(Title);
      }
      if (Url != null && __isset.url) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Url: ");
        __sb.Append(Url);
      }
      if (SourceId != null && __isset.sourceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SourceId: ");
        __sb.Append(SourceId);
      }
      if (SourceUrl != null && __isset.sourceUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SourceUrl: ");
        __sb.Append(SourceUrl);
      }
      if (SourceFaviconUrl != null && __isset.sourceFaviconUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SourceFaviconUrl: ");
        __sb.Append(SourceFaviconUrl);
      }
      if (SourceName != null && __isset.sourceName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SourceName: ");
        __sb.Append(SourceName);
      }
      if (__isset.date) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Date: ");
        __sb.Append(Date);
      }
      if (Teaser != null && __isset.teaser) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Teaser: ");
        __sb.Append(Teaser);
      }
      if (Thumbnails != null && __isset.thumbnails) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Thumbnails: ");
        __sb.Append(Thumbnails);
      }
      if (__isset.contentType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContentType: ");
        __sb.Append(ContentType);
      }
      if (__isset.accessType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AccessType: ");
        __sb.Append(AccessType);
      }
      if (VisibleUrl != null && __isset.visibleUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VisibleUrl: ");
        __sb.Append(VisibleUrl);
      }
      if (ClipUrl != null && __isset.clipUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClipUrl: ");
        __sb.Append(ClipUrl);
      }
      if (Contact != null && __isset.contact) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Contact: ");
        __sb.Append(Contact== null ? "<null>" : Contact.ToString());
      }
      if (Authors != null && __isset.authors) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Authors: ");
        __sb.Append(Authors);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
