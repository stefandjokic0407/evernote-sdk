/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// Shared notebooks represent a relationship between a notebook and a single
  /// share invitation recipient.
  /// <dl>
  /// <dt>id</dt>
  /// <dd>The primary identifier of the share, which is not globally unique.</dd>
  /// 
  /// <dt>userId</dt>
  /// <dd>The user id of the owner of the notebook.</dd>
  /// 
  /// <dt>notebookGuid</dt>
  /// <dd>The GUID of the notebook that has been shared.</dd>
  /// 
  /// <dt>email</dt>
  /// <dd>A string containing a display name for the recipient of the share. This may
  ///     be an email address, a phone number, a full name, or some other descriptive
  ///     string This field is read-only to clients. It will be filled in by the service
  ///     when returning shared notebooks.
  /// </dd>
  /// 
  /// <dt>recipientIdentityId</dt>
  /// <dd>The IdentityID of the share recipient. If present, only the user who has
  ///     claimed that identity may access this share.
  /// </dd>
  /// 
  /// <dt>notebookModifiable</dt>
  /// <dd>DEPRECATED</dd>
  /// 
  /// <dt>serviceCreated</dt>
  /// <dd>The date that the owner first created the share with the specific email
  ///   address.</dd>
  /// 
  /// <dt>serviceUpdated</dt>
  /// <dd>The date the shared notebook was last updated on the service.  This
  ///     will be updated when authenticateToSharedNotebook is called the first
  ///     time with a shared notebook (i.e. when the username is bound to that
  ///     shared notebook), and also when the SharedNotebook privilege is updated
  ///     as part of a shareNotebook(...) call, as well as on any calls to
  ///     updateSharedNotebook(...).
  /// </dd>
  /// 
  /// <dt>username</dt>
  /// <dd>DEPRECATED. The username of the user who can access this share. This
  ///     value is read-only to clients. It will be filled in by the service when
  ///     returning shared notebooks.
  /// </dd>
  /// 
  /// <dt>privilege</dt>
  /// <dd>The privilege level granted to the notebook, activity stream, and
  ///     invitations.  See the corresponding enumeration for details.
  /// </dd>
  /// 
  /// <dt>recipientSettings</dt>
  /// <dd>Settings intended for use only by the recipient of this shared
  ///     notebook.  You should skip setting this value unless you want
  ///     to change the value contained inside the structure, and only if
  ///     you are the recipient.</dd>
  /// 
  /// <dt>globalId</dt>
  /// <dd>An immutable, opaque string that acts as a globally unique
  ///     identifier for this shared notebook record.  You can use this field to
  ///     match linked notebook and shared notebook records as well as to
  ///     create new LinkedNotebook records.  This field replaces the deprecated
  ///     shareKey field.
  /// </dd>
  /// 
  /// <dt>sharerUserId</dt>
  /// <dd>The user id of the user who shared a notebook via this shared notebook
  ///     instance. This may not be the same as userId, since a user with full
  ///     access to a notebook may have created a new share for that notebook. For
  ///     Business, this represents the user who shared the business notebook. This
  ///     field is currently unset for a SharedNotebook created by joining a
  ///     notebook that has been published to the business.
  /// </dd>
  /// 
  /// <dt>recipientUsername</dt>
  /// <dd>The username of the user who can access this share. This is the username
  ///     for the user with the id in recipientUserId. This value can be set
  ///     by clients when calling shareNotebook(...), and that will result in the
  ///     created SharedNotebook being assigned to a user. This value is always set
  ///     if serviceAssigned is set.
  /// </dd>
  /// 
  /// <dt>recipientUserId</dt>
  /// <dd>The id of the user who can access this share. This is the id for the user
  ///     with the username in recipientUsername. This value is read-only and set
  ///     by the service. Value set by clients will be ignored. This field may be unset
  ///     for unjoined notebooks and is always set if serviceAssigned is set. Clients should
  ///     prefer this field over recipientUsername unless they need to use usernames
  ///     directly.
  /// </dd>
  /// 
  /// <dt>serviceAssigned</dt>
  /// <dd>The date this SharedNotebook was assigned (i.e. has been associated with an
  ///     Evernote user whose user ID is set in recipientUserId). Unset if the SharedNotebook
  ///     is not assigned. This field is a read-only value that is set by the service.
  /// </dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SharedNotebook : TBase
  {
    private long _id;
    private int _userId;
    private string _notebookGuid;
    private string _email;
    private long _recipientIdentityId;
    private bool _notebookModifiable;
    private long _serviceCreated;
    private long _serviceUpdated;
    private string _globalId;
    private string _username;
    private SharedNotebookPrivilegeLevel _privilege;
    private SharedNotebookRecipientSettings _recipientSettings;
    private int _sharerUserId;
    private string _recipientUsername;
    private int _recipientUserId;
    private long _serviceAssigned;

    public long Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public string NotebookGuid
    {
      get
      {
        return _notebookGuid;
      }
      set
      {
        __isset.notebookGuid = true;
        this._notebookGuid = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public long RecipientIdentityId
    {
      get
      {
        return _recipientIdentityId;
      }
      set
      {
        __isset.recipientIdentityId = true;
        this._recipientIdentityId = value;
      }
    }

    public bool NotebookModifiable
    {
      get
      {
        return _notebookModifiable;
      }
      set
      {
        __isset.notebookModifiable = true;
        this._notebookModifiable = value;
      }
    }

    public long ServiceCreated
    {
      get
      {
        return _serviceCreated;
      }
      set
      {
        __isset.serviceCreated = true;
        this._serviceCreated = value;
      }
    }

    public long ServiceUpdated
    {
      get
      {
        return _serviceUpdated;
      }
      set
      {
        __isset.serviceUpdated = true;
        this._serviceUpdated = value;
      }
    }

    public string GlobalId
    {
      get
      {
        return _globalId;
      }
      set
      {
        __isset.globalId = true;
        this._globalId = value;
      }
    }

    public string Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.username = true;
        this._username = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="SharedNotebookPrivilegeLevel"/>
    /// </summary>
    public SharedNotebookPrivilegeLevel Privilege
    {
      get
      {
        return _privilege;
      }
      set
      {
        __isset.privilege = true;
        this._privilege = value;
      }
    }

    public SharedNotebookRecipientSettings RecipientSettings
    {
      get
      {
        return _recipientSettings;
      }
      set
      {
        __isset.recipientSettings = true;
        this._recipientSettings = value;
      }
    }

    public int SharerUserId
    {
      get
      {
        return _sharerUserId;
      }
      set
      {
        __isset.sharerUserId = true;
        this._sharerUserId = value;
      }
    }

    public string RecipientUsername
    {
      get
      {
        return _recipientUsername;
      }
      set
      {
        __isset.recipientUsername = true;
        this._recipientUsername = value;
      }
    }

    public int RecipientUserId
    {
      get
      {
        return _recipientUserId;
      }
      set
      {
        __isset.recipientUserId = true;
        this._recipientUserId = value;
      }
    }

    public long ServiceAssigned
    {
      get
      {
        return _serviceAssigned;
      }
      set
      {
        __isset.serviceAssigned = true;
        this._serviceAssigned = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool userId;
      public bool notebookGuid;
      public bool email;
      public bool recipientIdentityId;
      public bool notebookModifiable;
      public bool serviceCreated;
      public bool serviceUpdated;
      public bool globalId;
      public bool username;
      public bool privilege;
      public bool recipientSettings;
      public bool sharerUserId;
      public bool recipientUsername;
      public bool recipientUserId;
      public bool serviceAssigned;
    }

    public SharedNotebook() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                NotebookGuid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.I64) {
                RecipientIdentityId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                NotebookModifiable = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                ServiceCreated = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                ServiceUpdated = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                GlobalId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Struct) {
                RecipientSettings = new SharedNotebookRecipientSettings();
                RecipientSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.I32) {
                SharerUserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                RecipientUsername = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.I32) {
                RecipientUserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.I64) {
                ServiceAssigned = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SharedNotebook");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Id);
          oprot.WriteFieldEnd();
        }
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (NotebookGuid != null && __isset.notebookGuid) {
          field.Name = "notebookGuid";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NotebookGuid);
          oprot.WriteFieldEnd();
        }
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        if (__isset.notebookModifiable) {
          field.Name = "notebookModifiable";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(NotebookModifiable);
          oprot.WriteFieldEnd();
        }
        if (__isset.serviceCreated) {
          field.Name = "serviceCreated";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ServiceCreated);
          oprot.WriteFieldEnd();
        }
        if (GlobalId != null && __isset.globalId) {
          field.Name = "globalId";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GlobalId);
          oprot.WriteFieldEnd();
        }
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (__isset.serviceUpdated) {
          field.Name = "serviceUpdated";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ServiceUpdated);
          oprot.WriteFieldEnd();
        }
        if (__isset.privilege) {
          field.Name = "privilege";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Privilege);
          oprot.WriteFieldEnd();
        }
        if (RecipientSettings != null && __isset.recipientSettings) {
          field.Name = "recipientSettings";
          field.Type = TType.Struct;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          RecipientSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.sharerUserId) {
          field.Name = "sharerUserId";
          field.Type = TType.I32;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(SharerUserId);
          oprot.WriteFieldEnd();
        }
        if (RecipientUsername != null && __isset.recipientUsername) {
          field.Name = "recipientUsername";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RecipientUsername);
          oprot.WriteFieldEnd();
        }
        if (__isset.serviceAssigned) {
          field.Name = "serviceAssigned";
          field.Type = TType.I64;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ServiceAssigned);
          oprot.WriteFieldEnd();
        }
        if (__isset.recipientUserId) {
          field.Name = "recipientUserId";
          field.Type = TType.I32;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(RecipientUserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.recipientIdentityId) {
          field.Name = "recipientIdentityId";
          field.Type = TType.I64;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(RecipientIdentityId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SharedNotebook(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (__isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      if (NotebookGuid != null && __isset.notebookGuid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NotebookGuid: ");
        __sb.Append(NotebookGuid);
      }
      if (Email != null && __isset.email) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Email: ");
        __sb.Append(Email);
      }
      if (__isset.recipientIdentityId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RecipientIdentityId: ");
        __sb.Append(RecipientIdentityId);
      }
      if (__isset.notebookModifiable) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NotebookModifiable: ");
        __sb.Append(NotebookModifiable);
      }
      if (__isset.serviceCreated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ServiceCreated: ");
        __sb.Append(ServiceCreated);
      }
      if (__isset.serviceUpdated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ServiceUpdated: ");
        __sb.Append(ServiceUpdated);
      }
      if (GlobalId != null && __isset.globalId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GlobalId: ");
        __sb.Append(GlobalId);
      }
      if (Username != null && __isset.username) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Username: ");
        __sb.Append(Username);
      }
      if (__isset.privilege) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Privilege: ");
        __sb.Append(Privilege);
      }
      if (RecipientSettings != null && __isset.recipientSettings) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RecipientSettings: ");
        __sb.Append(RecipientSettings== null ? "<null>" : RecipientSettings.ToString());
      }
      if (__isset.sharerUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SharerUserId: ");
        __sb.Append(SharerUserId);
      }
      if (RecipientUsername != null && __isset.recipientUsername) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RecipientUsername: ");
        __sb.Append(RecipientUsername);
      }
      if (__isset.recipientUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RecipientUserId: ");
        __sb.Append(RecipientUserId);
      }
      if (__isset.serviceAssigned) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ServiceAssigned: ");
        __sb.Append(ServiceAssigned);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
