/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A unique container for a set of notes.
  /// <dl>
  /// <dt>guid</dt>
  ///   <dd>The unique identifier of this notebook.
  ///   <br/>
  ///   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_GUID_REGEX
  ///   </dd>
  /// 
  /// <dt>name</dt>
  ///   <dd>A sequence of characters representing the name of the
  ///   notebook.  May be changed by clients, but the account may not contain two
  ///   notebooks with names that are equal via a case-insensitive comparison.
  ///   Can't begin or end with a space.
  ///   <br/>
  ///   Length:  EDAM_NOTEBOOK_NAME_LEN_MIN - EDAM_NOTEBOOK_NAME_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_NOTEBOOK_NAME_REGEX
  ///   </dd>
  /// 
  /// <dt>updateSequenceNum</dt>
  ///   <dd>A number identifying the last transaction to
  ///   modify the state of this object.  The USN values are sequential within an
  ///   account, and can be used to compare the order of modifications within the
  ///   service.
  ///   </dd>
  /// 
  /// <dt>defaultNotebook</dt>
  ///   <dd>If true, this notebook should be used for new notes
  ///   whenever the user has not (or cannot) specify a desired target notebook.
  ///   For example, if a note is submitted via SMTP email.
  ///   The service will maintain at most one defaultNotebook per account.
  ///   If a second notebook is created or updated with defaultNotebook set to
  ///   true, the service will automatically update the prior notebook's
  ///   defaultNotebook field to false.  If the default notebook is deleted
  ///   (i.e. "active" set to false), the "defaultNotebook" field will be
  ///   set to false by the service.  If the account has no default notebook
  ///   set, the service will use the most recent notebook as the default.
  ///   </dd>
  /// 
  /// <dt>serviceCreated</dt>
  ///   <dd>The time when this notebook was created on the
  ///   service. This will be set on the service during creation, and the service
  ///   will provide this value when it returns a Notebook to a client.
  ///   The service will ignore this value if it is sent by clients.
  ///   </dd>
  /// 
  /// <dt>serviceUpdated</dt>
  ///   <dd>The time when this notebook was last modified on the
  ///   service.  This will be set on the service during creation, and the service
  ///   will provide this value when it returns a Notebook to a client.
  ///   The service will ignore this value if it is sent by clients.
  ///   </dd>
  /// 
  /// <dt>publishing</dt>
  ///   <dd>If the Notebook has been opened for public access, then this will point to the set of
  ///   publishing information for the Notebook (URI, description, etc.). A Notebook cannot be
  ///   published without providing this information, but it will persist for later use if publishing
  ///   is ever disabled on the Notebook. Clients that do not wish to change the publishing behavior
  ///   of a Notebook should not set this value when calling NoteStore.updateNotebook().
  ///   Note that this structure is never populated for business notebooks, see the businessNotebook
  ///   field.
  ///   </dd>
  /// 
  /// <dt>published</dt>
  ///   <dd>If this is set to true, then the Notebook will be
  ///   accessible either to the public, or for business users to their business,
  ///   via the 'publishing' or 'businessNotebook' specifications, which must also be set. If this is
  ///   set to false, the Notebook will not be available to the public (or business).
  ///   Clients that do not wish to change the publishing behavior of a Notebook
  ///   should not set this value when calling NoteStore.updateNotebook().
  ///   </dd>
  /// 
  /// <dt>stack</dt>
  ///   <dd>If this is set, then the notebook is visually contained within a stack
  ///   of notebooks with this name.  All notebooks in the same account with the
  ///   same 'stack' field are considered to be in the same stack.
  ///   Notebooks with no stack set are "top level" and not contained within a
  ///   stack.
  ///   </dd>
  /// 
  /// <dt>sharedNotebookIds</dt>
  ///   <dd><i>DEPRECATED</i> - replaced by sharedNotebooks.</dd>
  /// 
  /// <dt>sharedNotebooks</dt>
  ///   <dd>The list of recipients to whom this notebook has been shared
  ///   (one SharedNotebook object per recipient email address). This field will
  ///   be unset if you do not have permission to access this data. If you are
  ///   accessing the notebook as the owner or via a shared notebook that is
  ///   modifiable, then you have access to this data and the value will be set.
  ///   This field is read-only. Clients may not make changes to shared notebooks
  ///   via this field.
  ///   </dd>
  /// 
  /// <dt>businessNotebook</dt>
  ///   <dd>If the notebook is part of a business account and has been shared with the entire
  ///   business, this will contain sharing information. The presence or absence of this field
  ///   is not a reliable test of whether a given notebook is in fact a business notebook - the
  ///   field is only used when a notebook is or has been shared with the entire business.
  ///   </dd>
  /// 
  /// <dt>contact</dt>
  ///   <dd>Intended for use with Business accounts, this field identifies the user who
  ///   has been designated as the "contact".  For notebooks created in business
  ///   accounts, the server will automatically set this value to the user who created
  ///   the notebook unless Notebook.contact.username has been set, in which that value
  ///   will be used.  When updating a notebook, it is common to leave Notebook.contact
  ///   field unset, indicating that no change to the value is being requested and that
  ///   the existing value, if any, should be preserved.
  ///   </dd>
  /// 
  /// <dt>recipientSettings</dt>
  ///   <dd>This represents the preferences/settings that a recipient has set for this
  ///   notebook. These are intended to be changed only by the recipient, and each
  ///   recipient has their own recipient settings.
  ///   </dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Notebook : TBase
  {
    private string _guid;
    private string _name;
    private int _updateSequenceNum;
    private bool _defaultNotebook;
    private long _serviceCreated;
    private long _serviceUpdated;
    private Publishing _publishing;
    private bool _published;
    private string _stack;
    private List<long> _sharedNotebookIds;
    private List<SharedNotebook> _sharedNotebooks;
    private BusinessNotebook _businessNotebook;
    private User _contact;
    private NotebookRestrictions _restrictions;
    private NotebookRecipientSettings _recipientSettings;

    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public int UpdateSequenceNum
    {
      get
      {
        return _updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this._updateSequenceNum = value;
      }
    }

    public bool DefaultNotebook
    {
      get
      {
        return _defaultNotebook;
      }
      set
      {
        __isset.defaultNotebook = true;
        this._defaultNotebook = value;
      }
    }

    public long ServiceCreated
    {
      get
      {
        return _serviceCreated;
      }
      set
      {
        __isset.serviceCreated = true;
        this._serviceCreated = value;
      }
    }

    public long ServiceUpdated
    {
      get
      {
        return _serviceUpdated;
      }
      set
      {
        __isset.serviceUpdated = true;
        this._serviceUpdated = value;
      }
    }

    public Publishing Publishing
    {
      get
      {
        return _publishing;
      }
      set
      {
        __isset.publishing = true;
        this._publishing = value;
      }
    }

    public bool Published
    {
      get
      {
        return _published;
      }
      set
      {
        __isset.published = true;
        this._published = value;
      }
    }

    public string Stack
    {
      get
      {
        return _stack;
      }
      set
      {
        __isset.stack = true;
        this._stack = value;
      }
    }

    public List<long> SharedNotebookIds
    {
      get
      {
        return _sharedNotebookIds;
      }
      set
      {
        __isset.sharedNotebookIds = true;
        this._sharedNotebookIds = value;
      }
    }

    public List<SharedNotebook> SharedNotebooks
    {
      get
      {
        return _sharedNotebooks;
      }
      set
      {
        __isset.sharedNotebooks = true;
        this._sharedNotebooks = value;
      }
    }

    public BusinessNotebook BusinessNotebook
    {
      get
      {
        return _businessNotebook;
      }
      set
      {
        __isset.businessNotebook = true;
        this._businessNotebook = value;
      }
    }

    public User Contact
    {
      get
      {
        return _contact;
      }
      set
      {
        __isset.contact = true;
        this._contact = value;
      }
    }

    public NotebookRestrictions Restrictions
    {
      get
      {
        return _restrictions;
      }
      set
      {
        __isset.restrictions = true;
        this._restrictions = value;
      }
    }

    public NotebookRecipientSettings RecipientSettings
    {
      get
      {
        return _recipientSettings;
      }
      set
      {
        __isset.recipientSettings = true;
        this._recipientSettings = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool guid;
      public bool name;
      public bool updateSequenceNum;
      public bool defaultNotebook;
      public bool serviceCreated;
      public bool serviceUpdated;
      public bool publishing;
      public bool published;
      public bool stack;
      public bool sharedNotebookIds;
      public bool sharedNotebooks;
      public bool businessNotebook;
      public bool contact;
      public bool restrictions;
      public bool recipientSettings;
    }

    public Notebook() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Guid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                UpdateSequenceNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                DefaultNotebook = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                ServiceCreated = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                ServiceUpdated = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Struct) {
                Publishing = new Publishing();
                Publishing.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Bool) {
                Published = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                Stack = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.List) {
                {
                  SharedNotebookIds = new List<long>();
                  TList _list38 = iprot.ReadListBegin();
                  for( int _i39 = 0; _i39 < _list38.Count; ++_i39)
                  {
                    long _elem40;
                    _elem40 = iprot.ReadI64();
                    SharedNotebookIds.Add(_elem40);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.List) {
                {
                  SharedNotebooks = new List<SharedNotebook>();
                  TList _list41 = iprot.ReadListBegin();
                  for( int _i42 = 0; _i42 < _list41.Count; ++_i42)
                  {
                    SharedNotebook _elem43;
                    _elem43 = new SharedNotebook();
                    _elem43.Read(iprot);
                    SharedNotebooks.Add(_elem43);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Struct) {
                BusinessNotebook = new BusinessNotebook();
                BusinessNotebook.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.Struct) {
                Contact = new User();
                Contact.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Struct) {
                Restrictions = new NotebookRestrictions();
                Restrictions.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.Struct) {
                RecipientSettings = new NotebookRecipientSettings();
                RecipientSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Notebook");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Guid);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (__isset.updateSequenceNum) {
          field.Name = "updateSequenceNum";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UpdateSequenceNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.defaultNotebook) {
          field.Name = "defaultNotebook";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DefaultNotebook);
          oprot.WriteFieldEnd();
        }
        if (__isset.serviceCreated) {
          field.Name = "serviceCreated";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ServiceCreated);
          oprot.WriteFieldEnd();
        }
        if (__isset.serviceUpdated) {
          field.Name = "serviceUpdated";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ServiceUpdated);
          oprot.WriteFieldEnd();
        }
        if (Publishing != null && __isset.publishing) {
          field.Name = "publishing";
          field.Type = TType.Struct;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          Publishing.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.published) {
          field.Name = "published";
          field.Type = TType.Bool;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Published);
          oprot.WriteFieldEnd();
        }
        if (Stack != null && __isset.stack) {
          field.Name = "stack";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Stack);
          oprot.WriteFieldEnd();
        }
        if (SharedNotebookIds != null && __isset.sharedNotebookIds) {
          field.Name = "sharedNotebookIds";
          field.Type = TType.List;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I64, SharedNotebookIds.Count));
            foreach (long _iter44 in SharedNotebookIds)
            {
              oprot.WriteI64(_iter44);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SharedNotebooks != null && __isset.sharedNotebooks) {
          field.Name = "sharedNotebooks";
          field.Type = TType.List;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, SharedNotebooks.Count));
            foreach (SharedNotebook _iter45 in SharedNotebooks)
            {
              _iter45.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (BusinessNotebook != null && __isset.businessNotebook) {
          field.Name = "businessNotebook";
          field.Type = TType.Struct;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          BusinessNotebook.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Contact != null && __isset.contact) {
          field.Name = "contact";
          field.Type = TType.Struct;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          Contact.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Restrictions != null && __isset.restrictions) {
          field.Name = "restrictions";
          field.Type = TType.Struct;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          Restrictions.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (RecipientSettings != null && __isset.recipientSettings) {
          field.Name = "recipientSettings";
          field.Type = TType.Struct;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          RecipientSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Notebook(");
      bool __first = true;
      if (Guid != null && __isset.guid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Guid: ");
        __sb.Append(Guid);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.updateSequenceNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UpdateSequenceNum: ");
        __sb.Append(UpdateSequenceNum);
      }
      if (__isset.defaultNotebook) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DefaultNotebook: ");
        __sb.Append(DefaultNotebook);
      }
      if (__isset.serviceCreated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ServiceCreated: ");
        __sb.Append(ServiceCreated);
      }
      if (__isset.serviceUpdated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ServiceUpdated: ");
        __sb.Append(ServiceUpdated);
      }
      if (Publishing != null && __isset.publishing) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Publishing: ");
        __sb.Append(Publishing== null ? "<null>" : Publishing.ToString());
      }
      if (__isset.published) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Published: ");
        __sb.Append(Published);
      }
      if (Stack != null && __isset.stack) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Stack: ");
        __sb.Append(Stack);
      }
      if (SharedNotebookIds != null && __isset.sharedNotebookIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SharedNotebookIds: ");
        __sb.Append(SharedNotebookIds);
      }
      if (SharedNotebooks != null && __isset.sharedNotebooks) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SharedNotebooks: ");
        __sb.Append(SharedNotebooks);
      }
      if (BusinessNotebook != null && __isset.businessNotebook) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BusinessNotebook: ");
        __sb.Append(BusinessNotebook== null ? "<null>" : BusinessNotebook.ToString());
      }
      if (Contact != null && __isset.contact) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Contact: ");
        __sb.Append(Contact== null ? "<null>" : Contact.ToString());
      }
      if (Restrictions != null && __isset.restrictions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Restrictions: ");
        __sb.Append(Restrictions== null ? "<null>" : Restrictions.ToString());
      }
      if (RecipientSettings != null && __isset.recipientSettings) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RecipientSettings: ");
        __sb.Append(RecipientSettings== null ? "<null>" : RecipientSettings.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
