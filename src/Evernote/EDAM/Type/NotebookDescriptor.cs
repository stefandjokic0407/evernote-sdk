/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A structure that describes a notebook or a user's relationship with
  /// a notebook. NotebookDescriptor is expected to remain a lighter-weight
  /// structure when compared to Notebook.
  /// <dl>
  /// <dt>guid</dt>
  ///   <dd>The unique identifier of the notebook.
  ///   </dd>
  /// 
  /// <dt>notebookDisplayName</dt>
  ///   <dd>A sequence of characters representing the name of the
  ///   notebook.
  ///   </dd>
  /// 
  /// <dt>contactName</dt>
  ///   <dd>The User.name value of the notebook's "contact".
  ///   </dd>
  /// 
  /// <dt>hasSharedNotebook</dt>
  ///   <dd>Whether a SharedNotebook record exists between the calling user and this
  ///   notebook.
  ///   </dd>
  /// 
  /// <dt>joinedUserCount</dt>
  ///   <dd>The number of users who have joined this notebook.
  ///   </dd>
  /// 
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NotebookDescriptor : TBase
  {
    private string _guid;
    private string _notebookDisplayName;
    private string _contactName;
    private bool _hasSharedNotebook;
    private int _joinedUserCount;

    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    public string NotebookDisplayName
    {
      get
      {
        return _notebookDisplayName;
      }
      set
      {
        __isset.notebookDisplayName = true;
        this._notebookDisplayName = value;
      }
    }

    public string ContactName
    {
      get
      {
        return _contactName;
      }
      set
      {
        __isset.contactName = true;
        this._contactName = value;
      }
    }

    public bool HasSharedNotebook
    {
      get
      {
        return _hasSharedNotebook;
      }
      set
      {
        __isset.hasSharedNotebook = true;
        this._hasSharedNotebook = value;
      }
    }

    public int JoinedUserCount
    {
      get
      {
        return _joinedUserCount;
      }
      set
      {
        __isset.joinedUserCount = true;
        this._joinedUserCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool guid;
      public bool notebookDisplayName;
      public bool contactName;
      public bool hasSharedNotebook;
      public bool joinedUserCount;
    }

    public NotebookDescriptor() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Guid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                NotebookDisplayName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ContactName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                HasSharedNotebook = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                JoinedUserCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("NotebookDescriptor");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Guid);
          oprot.WriteFieldEnd();
        }
        if (NotebookDisplayName != null && __isset.notebookDisplayName) {
          field.Name = "notebookDisplayName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NotebookDisplayName);
          oprot.WriteFieldEnd();
        }
        if (ContactName != null && __isset.contactName) {
          field.Name = "contactName";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ContactName);
          oprot.WriteFieldEnd();
        }
        if (__isset.hasSharedNotebook) {
          field.Name = "hasSharedNotebook";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(HasSharedNotebook);
          oprot.WriteFieldEnd();
        }
        if (__isset.joinedUserCount) {
          field.Name = "joinedUserCount";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(JoinedUserCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NotebookDescriptor(");
      bool __first = true;
      if (Guid != null && __isset.guid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Guid: ");
        __sb.Append(Guid);
      }
      if (NotebookDisplayName != null && __isset.notebookDisplayName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NotebookDisplayName: ");
        __sb.Append(NotebookDisplayName);
      }
      if (ContactName != null && __isset.contactName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactName: ");
        __sb.Append(ContactName);
      }
      if (__isset.hasSharedNotebook) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HasSharedNotebook: ");
        __sb.Append(HasSharedNotebook);
      }
      if (__isset.joinedUserCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JoinedUserCount: ");
        __sb.Append(JoinedUserCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
