/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  ///  A tag within a user's account is a unique name which may be organized
  ///  a simple hierarchy.
  /// <dl>
  ///  <dt>guid</dt>
  ///    <dd>The unique identifier of this tag. Will be set by the service,
  ///    so may be omitted by the client when creating the Tag.
  ///    <br/>
  ///    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
  ///    <br/>
  ///    Regex:  EDAM_GUID_REGEX
  ///    </dd>
  /// 
  ///  <dt>name</dt>
  ///    <dd>A sequence of characters representing the tag's identifier.
  ///    Case is preserved, but is ignored for comparisons.
  ///    This means that an account may only have one tag with a given name, via
  ///    case-insensitive comparison, so an account may not have both "food" and
  ///    "Food" tags.
  ///    May not contain a comma (','), and may not begin or end with a space.
  ///    <br/>
  ///    Length:  EDAM_TAG_NAME_LEN_MIN - EDAM_TAG_NAME_LEN_MAX
  ///    <br/>
  ///    Regex:  EDAM_TAG_NAME_REGEX
  ///    </dd>
  /// 
  ///  <dt>parentGuid</dt>
  ///    <dd>If this is set, then this is the GUID of the tag that
  ///    holds this tag within the tag organizational hierarchy.  If this is
  ///    not set, then the tag has no parent and it is a "top level" tag.
  ///    Cycles are not allowed (e.g. a->parent->parent == a) and will be
  ///    rejected by the service.
  ///    <br/>
  ///    Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
  ///    <br/>
  ///    Regex:  EDAM_GUID_REGEX
  ///    </dd>
  /// 
  ///  <dt>updateSequenceNum</dt>
  ///    <dd>A number identifying the last transaction to
  ///    modify the state of this object.  The USN values are sequential within an
  ///    account, and can be used to compare the order of modifications within the
  ///    service.
  ///    </dd>
  ///  </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Tag : TBase
  {
    private string _guid;
    private string _name;
    private string _parentGuid;
    private int _updateSequenceNum;

    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string ParentGuid
    {
      get
      {
        return _parentGuid;
      }
      set
      {
        __isset.parentGuid = true;
        this._parentGuid = value;
      }
    }

    public int UpdateSequenceNum
    {
      get
      {
        return _updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this._updateSequenceNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool guid;
      public bool name;
      public bool parentGuid;
      public bool updateSequenceNum;
    }

    public Tag() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Guid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ParentGuid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                UpdateSequenceNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Tag");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Guid);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (ParentGuid != null && __isset.parentGuid) {
          field.Name = "parentGuid";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ParentGuid);
          oprot.WriteFieldEnd();
        }
        if (__isset.updateSequenceNum) {
          field.Name = "updateSequenceNum";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UpdateSequenceNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Tag(");
      bool __first = true;
      if (Guid != null && __isset.guid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Guid: ");
        __sb.Append(Guid);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (ParentGuid != null && __isset.parentGuid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ParentGuid: ");
        __sb.Append(ParentGuid);
      }
      if (__isset.updateSequenceNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UpdateSequenceNum: ");
        __sb.Append(UpdateSequenceNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
