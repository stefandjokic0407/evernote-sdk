/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A structure holding the optional attributes associated with users
  /// in a business.
  /// 
  /// <dl>
  ///  <dt>title</dt>
  ///  <dd>Free form text of this user's title in the business</dd>
  /// 
  ///  <dt>location</dt>
  ///  <dd>City, State (for US) or City / Province for other countries</dd>
  /// 
  ///  <dt>department</dt>
  ///  <dd>Free form text of the department this user belongs to.</dd>
  /// 
  ///  <dt>mobilePhone</dt>
  ///  <dd>User's mobile phone number. Stored as plain text without any formatting.</dd>
  /// 
  ///  <dt>linkedInProfileUrl</dt>
  ///  <dd>URL to user's public LinkedIn profile page. This should only contain
  ///  the portion relative to the base LinkedIn URL. For example: "/pub/john-smith/".
  ///  </dd>
  /// 
  ///  <dt>workPhone</dt>
  ///  <dd>User's work phone number. Stored as plain text without any formatting.</dd>
  /// 
  ///  <dt>companyStartDate</dt>
  ///  <dd>The date on which the user started working at their company.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BusinessUserAttributes : TBase
  {
    private string _title;
    private string _location;
    private string _department;
    private string _mobilePhone;
    private string _linkedInProfileUrl;
    private string _workPhone;
    private long _companyStartDate;

    public string Title
    {
      get
      {
        return _title;
      }
      set
      {
        __isset.title = true;
        this._title = value;
      }
    }

    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    public string Department
    {
      get
      {
        return _department;
      }
      set
      {
        __isset.department = true;
        this._department = value;
      }
    }

    public string MobilePhone
    {
      get
      {
        return _mobilePhone;
      }
      set
      {
        __isset.mobilePhone = true;
        this._mobilePhone = value;
      }
    }

    public string LinkedInProfileUrl
    {
      get
      {
        return _linkedInProfileUrl;
      }
      set
      {
        __isset.linkedInProfileUrl = true;
        this._linkedInProfileUrl = value;
      }
    }

    public string WorkPhone
    {
      get
      {
        return _workPhone;
      }
      set
      {
        __isset.workPhone = true;
        this._workPhone = value;
      }
    }

    public long CompanyStartDate
    {
      get
      {
        return _companyStartDate;
      }
      set
      {
        __isset.companyStartDate = true;
        this._companyStartDate = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool title;
      public bool location;
      public bool department;
      public bool mobilePhone;
      public bool linkedInProfileUrl;
      public bool workPhone;
      public bool companyStartDate;
    }

    public BusinessUserAttributes() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Title = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Location = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Department = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                MobilePhone = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                LinkedInProfileUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                WorkPhone = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                CompanyStartDate = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("BusinessUserAttributes");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Title != null && __isset.title) {
          field.Name = "title";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Title);
          oprot.WriteFieldEnd();
        }
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Location);
          oprot.WriteFieldEnd();
        }
        if (Department != null && __isset.department) {
          field.Name = "department";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Department);
          oprot.WriteFieldEnd();
        }
        if (MobilePhone != null && __isset.mobilePhone) {
          field.Name = "mobilePhone";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MobilePhone);
          oprot.WriteFieldEnd();
        }
        if (LinkedInProfileUrl != null && __isset.linkedInProfileUrl) {
          field.Name = "linkedInProfileUrl";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LinkedInProfileUrl);
          oprot.WriteFieldEnd();
        }
        if (WorkPhone != null && __isset.workPhone) {
          field.Name = "workPhone";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(WorkPhone);
          oprot.WriteFieldEnd();
        }
        if (__isset.companyStartDate) {
          field.Name = "companyStartDate";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(CompanyStartDate);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BusinessUserAttributes(");
      bool __first = true;
      if (Title != null && __isset.title) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Title: ");
        __sb.Append(Title);
      }
      if (Location != null && __isset.location) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Location: ");
        __sb.Append(Location);
      }
      if (Department != null && __isset.department) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Department: ");
        __sb.Append(Department);
      }
      if (MobilePhone != null && __isset.mobilePhone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MobilePhone: ");
        __sb.Append(MobilePhone);
      }
      if (LinkedInProfileUrl != null && __isset.linkedInProfileUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LinkedInProfileUrl: ");
        __sb.Append(LinkedInProfileUrl);
      }
      if (WorkPhone != null && __isset.workPhone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WorkPhone: ");
        __sb.Append(WorkPhone);
      }
      if (__isset.companyStartDate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CompanyStartDate: ");
        __sb.Append(CompanyStartDate);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
