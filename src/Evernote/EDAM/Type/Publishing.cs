/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// If a Notebook has been opened to the public, the Notebook will have a
  /// reference to one of these structures, which gives the location and optional
  /// description of the externally-visible public Notebook.
  /// <dl>
  /// <dt>uri</dt>
  ///   <dd>If this field is present, then the notebook is published for
  ///   mass consumption on the Internet under the provided URI, which is
  ///   relative to a defined base publishing URI defined by the service.
  ///   This field can only be modified via the web service GUI ... publishing
  ///   cannot be modified via an offline client.
  ///   <br/>
  ///   Length:  EDAM_PUBLISHING_URI_LEN_MIN - EDAM_PUBLISHING_URI_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_PUBLISHING_URI_REGEX
  ///   </dd>
  /// 
  /// <dt>order</dt>
  ///   <dd>When the notes are publicly displayed, they will be sorted
  ///   based on the requested criteria.
  ///   </dd>
  /// 
  /// <dt>ascending</dt>
  ///   <dd>If this is set to true, then the public notes will be
  ///   displayed in ascending order (e.g. from oldest to newest).  Otherwise,
  ///   the notes will be displayed in descending order (e.g. newest to oldest).
  ///   </dd>
  /// 
  /// <dt>publicDescription</dt>
  ///   <dd>This field may be used to provide a short
  ///   description of the notebook, which may be displayed when (e.g.) the
  ///   notebook is shown in a public view.  Can't begin or end with a space.
  ///   <br/>
  ///   Length:  EDAM_PUBLISHING_DESCRIPTION_LEN_MIN -
  ///            EDAM_PUBLISHING_DESCRIPTION_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_PUBLISHING_DESCRIPTION_REGEX
  ///   </dd>
  /// 
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Publishing : TBase
  {
    private string _uri;
    private NoteSortOrder _order;
    private bool _ascending;
    private string _publicDescription;

    public string Uri
    {
      get
      {
        return _uri;
      }
      set
      {
        __isset.uri = true;
        this._uri = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="NoteSortOrder"/>
    /// </summary>
    public NoteSortOrder Order
    {
      get
      {
        return _order;
      }
      set
      {
        __isset.order = true;
        this._order = value;
      }
    }

    public bool Ascending
    {
      get
      {
        return _ascending;
      }
      set
      {
        __isset.@ascending = true;
        this._ascending = value;
      }
    }

    public string PublicDescription
    {
      get
      {
        return _publicDescription;
      }
      set
      {
        __isset.publicDescription = true;
        this._publicDescription = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uri;
      public bool order;
      public bool @ascending;
      public bool publicDescription;
    }

    public Publishing() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Uri = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Order = (NoteSortOrder)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                Ascending = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                PublicDescription = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Publishing");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Uri != null && __isset.uri) {
          field.Name = "uri";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uri);
          oprot.WriteFieldEnd();
        }
        if (__isset.order) {
          field.Name = "order";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Order);
          oprot.WriteFieldEnd();
        }
        if (__isset.@ascending) {
          field.Name = "ascending";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Ascending);
          oprot.WriteFieldEnd();
        }
        if (PublicDescription != null && __isset.publicDescription) {
          field.Name = "publicDescription";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PublicDescription);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Publishing(");
      bool __first = true;
      if (Uri != null && __isset.uri) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uri: ");
        __sb.Append(Uri);
      }
      if (__isset.order) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Order: ");
        __sb.Append(Order);
      }
      if (__isset.@ascending) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ascending: ");
        __sb.Append(Ascending);
      }
      if (PublicDescription != null && __isset.publicDescription) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PublicDescription: ");
        __sb.Append(PublicDescription);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
