/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// An object that represents the relationship between a Contact that possibly
  /// belongs to an Evernote User.
  /// 
  /// <dl>
  ///  <dt>id</dt>
  ///  <dd>The unique identifier for this mapping.
  ///  </dd>
  /// 
  ///  <dt>contact<dt>
  ///  <dd>The Contact that can be used to address this Identity. May be unset.
  ///  </dd>
  /// 
  ///  <dt>userId</dt>
  ///  <dd>The Evernote User id that is connected to the Contact. May be unset
  ///      if this identity has not yet been claimed, or the caller is not
  ///      connected to this identity.
  ///  </dd>
  /// 
  ///  <dt>deactivated</dt>
  ///  <dd>Indicates that the contact for this identity is no longer active and
  ///  should not be used when creating new threads using Destination.recipients,
  ///  unless you know of another Identity instance with the same contact information
  ///  that is active.  If you are connected to the user (see userConnected), you
  ///  can still create threads using their Evernote-type contact.</dd>
  /// 
  ///  <dt>sameBusiness</dt>
  ///  <dd>Does this Identity belong to someone who is in the same business as the
  ///      caller?
  ///  </dd>
  /// 
  ///  <dt>blocked</dt>
  ///  <dd>Has the caller blocked the Evernote user this Identity represents?
  ///  </dd>
  /// 
  ///  <dt>userConnected</dt>
  ///  <dd>Indicates that the caller is "connected" to the user of this
  ///  identity via this identity.  When you have a connection via an
  ///  identity, you should always create new threads using the
  ///  Evernote-type contact (see ContactType) using the userId field
  ///  from a connected Identity.  On the Evernote service, the
  ///  Evernote-type contact is the most durable. Phone numbers and
  ///  e-mail addresses can get re-assigned but your Evernote account
  ///  user ID will remain the same.  A connection exists when both of
  ///  you are in the same business or the user has replied to a thread
  ///  that you are on.  When connected, you will also get to see more
  ///  information about the user who has claimed the identity.  Note
  ///  that you are never connected to yourself since you won't be
  ///  sending messages to yourself, but you will obviously see your own
  ///  profile information.
  ///  </dd>
  /// 
  ///  <dt>eventId</dt>
  ///  <dd>A server-assigned sequence number for the events in the messages
  ///  subsystem.
  ///  </dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Identity : TBase
  {
    private Contact _contact;
    private int _userId;
    private bool _deactivated;
    private bool _sameBusiness;
    private bool _blocked;
    private bool _userConnected;
    private long _eventId;

    public long Id { get; set; }

    public Contact Contact
    {
      get
      {
        return _contact;
      }
      set
      {
        __isset.contact = true;
        this._contact = value;
      }
    }

    public int UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }

    public bool Deactivated
    {
      get
      {
        return _deactivated;
      }
      set
      {
        __isset.deactivated = true;
        this._deactivated = value;
      }
    }

    public bool SameBusiness
    {
      get
      {
        return _sameBusiness;
      }
      set
      {
        __isset.sameBusiness = true;
        this._sameBusiness = value;
      }
    }

    public bool Blocked
    {
      get
      {
        return _blocked;
      }
      set
      {
        __isset.blocked = true;
        this._blocked = value;
      }
    }

    public bool UserConnected
    {
      get
      {
        return _userConnected;
      }
      set
      {
        __isset.userConnected = true;
        this._userConnected = value;
      }
    }

    public long EventId
    {
      get
      {
        return _eventId;
      }
      set
      {
        __isset.eventId = true;
        this._eventId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool contact;
      public bool userId;
      public bool deactivated;
      public bool sameBusiness;
      public bool blocked;
      public bool userConnected;
      public bool eventId;
    }

    public Identity() {
    }

    public Identity(long id) : this() {
      this.Id = id;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_id = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                Id = iprot.ReadI64();
                isset_id = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Contact = new Contact();
                Contact.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Deactivated = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                SameBusiness = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                Blocked = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                UserConnected = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                EventId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_id)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Id not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("Identity");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
        if (Contact != null && __isset.contact) {
          field.Name = "contact";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Contact.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.userId) {
          field.Name = "userId";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.deactivated) {
          field.Name = "deactivated";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Deactivated);
          oprot.WriteFieldEnd();
        }
        if (__isset.sameBusiness) {
          field.Name = "sameBusiness";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(SameBusiness);
          oprot.WriteFieldEnd();
        }
        if (__isset.blocked) {
          field.Name = "blocked";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Blocked);
          oprot.WriteFieldEnd();
        }
        if (__isset.userConnected) {
          field.Name = "userConnected";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(UserConnected);
          oprot.WriteFieldEnd();
        }
        if (__isset.eventId) {
          field.Name = "eventId";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EventId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Identity(");
      __sb.Append(", Id: ");
      __sb.Append(Id);
      if (Contact != null && __isset.contact) {
        __sb.Append(", Contact: ");
        __sb.Append(Contact== null ? "<null>" : Contact.ToString());
      }
      if (__isset.userId) {
        __sb.Append(", UserId: ");
        __sb.Append(UserId);
      }
      if (__isset.deactivated) {
        __sb.Append(", Deactivated: ");
        __sb.Append(Deactivated);
      }
      if (__isset.sameBusiness) {
        __sb.Append(", SameBusiness: ");
        __sb.Append(SameBusiness);
      }
      if (__isset.blocked) {
        __sb.Append(", Blocked: ");
        __sb.Append(Blocked);
      }
      if (__isset.userConnected) {
        __sb.Append(", UserConnected: ");
        __sb.Append(UserConnected);
      }
      if (__isset.eventId) {
        __sb.Append(", EventId: ");
        __sb.Append(EventId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
