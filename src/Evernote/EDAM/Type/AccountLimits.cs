/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  ///  This structure is used to provide account limits that are in effect for this user.
  /// <dl>
  ///  <dt>userMailLimitDaily</dt>
  ///    <dd>The number of emails of any type that can be sent by a user from the
  ///        service per day.  If an email is sent to two different recipients, this
  ///        counts as two emails.
  ///    </dd>
  ///  <dt>noteSizeMax</dt>
  ///    <dd>Maximum total size of a Note that can be added.  The size of a note is
  ///        calculated as:
  ///        ENML content length (in Unicode characters) plus the sum of all resource
  ///        sizes (in bytes).
  ///    </dd>
  ///  <dt>resourceSizeMax</dt>
  ///    <dd>Maximum size of a resource, in bytes
  ///    </dd>
  ///  <dt>userLinkedNotebookMax</dt>
  ///    <dd>Maximum number of linked notebooks per account.
  ///    </dd>
  ///  <dt>uploadLimit</dt>
  ///    <dd>The number of bytes that can be uploaded to the account
  ///    in the current month.  For new notes that are created, this is the length
  ///    of the note content (in Unicode characters) plus the size of each resource
  ///    (in bytes).  For edited notes, this is the the difference between the old
  ///    length and the new length (if this is greater than 0) plus the size of
  ///    each new resource.
  ///    </dd>
  ///  <dt>userNoteCountMax</dt>
  ///    <dd>Maximum number of Notes per user</dd>
  ///  <dt>userNotebookCountMax</dt>
  ///    <dd>Maximum number of Notebooks per user</dd>
  ///  <dt>userTagCountMax</dt>
  ///    <dd>Maximum number of Tags per account</dd>
  ///  <dt>noteTagCountMax</dt>
  ///    <dd>Maximum number of Tags per Note</dd>
  ///  <dt>userSavedSearchesMax</dt>
  ///    <dd>Maximum number of SavedSearches per account</dd>
  ///  <dt>noteResourceCountMax</dt>
  ///    <dd>The maximum number of Resources per Note</dd>
  ///  </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AccountLimits : TBase
  {
    private int _userMailLimitDaily;
    private long _noteSizeMax;
    private long _resourceSizeMax;
    private int _userLinkedNotebookMax;
    private long _uploadLimit;
    private int _userNoteCountMax;
    private int _userNotebookCountMax;
    private int _userTagCountMax;
    private int _noteTagCountMax;
    private int _userSavedSearchesMax;
    private int _noteResourceCountMax;

    public int UserMailLimitDaily
    {
      get
      {
        return _userMailLimitDaily;
      }
      set
      {
        __isset.userMailLimitDaily = true;
        this._userMailLimitDaily = value;
      }
    }

    public long NoteSizeMax
    {
      get
      {
        return _noteSizeMax;
      }
      set
      {
        __isset.noteSizeMax = true;
        this._noteSizeMax = value;
      }
    }

    public long ResourceSizeMax
    {
      get
      {
        return _resourceSizeMax;
      }
      set
      {
        __isset.resourceSizeMax = true;
        this._resourceSizeMax = value;
      }
    }

    public int UserLinkedNotebookMax
    {
      get
      {
        return _userLinkedNotebookMax;
      }
      set
      {
        __isset.userLinkedNotebookMax = true;
        this._userLinkedNotebookMax = value;
      }
    }

    public long UploadLimit
    {
      get
      {
        return _uploadLimit;
      }
      set
      {
        __isset.uploadLimit = true;
        this._uploadLimit = value;
      }
    }

    public int UserNoteCountMax
    {
      get
      {
        return _userNoteCountMax;
      }
      set
      {
        __isset.userNoteCountMax = true;
        this._userNoteCountMax = value;
      }
    }

    public int UserNotebookCountMax
    {
      get
      {
        return _userNotebookCountMax;
      }
      set
      {
        __isset.userNotebookCountMax = true;
        this._userNotebookCountMax = value;
      }
    }

    public int UserTagCountMax
    {
      get
      {
        return _userTagCountMax;
      }
      set
      {
        __isset.userTagCountMax = true;
        this._userTagCountMax = value;
      }
    }

    public int NoteTagCountMax
    {
      get
      {
        return _noteTagCountMax;
      }
      set
      {
        __isset.noteTagCountMax = true;
        this._noteTagCountMax = value;
      }
    }

    public int UserSavedSearchesMax
    {
      get
      {
        return _userSavedSearchesMax;
      }
      set
      {
        __isset.userSavedSearchesMax = true;
        this._userSavedSearchesMax = value;
      }
    }

    public int NoteResourceCountMax
    {
      get
      {
        return _noteResourceCountMax;
      }
      set
      {
        __isset.noteResourceCountMax = true;
        this._noteResourceCountMax = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userMailLimitDaily;
      public bool noteSizeMax;
      public bool resourceSizeMax;
      public bool userLinkedNotebookMax;
      public bool uploadLimit;
      public bool userNoteCountMax;
      public bool userNotebookCountMax;
      public bool userTagCountMax;
      public bool noteTagCountMax;
      public bool userSavedSearchesMax;
      public bool noteResourceCountMax;
    }

    public AccountLimits() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserMailLimitDaily = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                NoteSizeMax = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                ResourceSizeMax = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                UserLinkedNotebookMax = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                UploadLimit = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                UserNoteCountMax = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                UserNotebookCountMax = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                UserTagCountMax = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I32) {
                NoteTagCountMax = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I32) {
                UserSavedSearchesMax = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I32) {
                NoteResourceCountMax = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AccountLimits");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.userMailLimitDaily) {
          field.Name = "userMailLimitDaily";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserMailLimitDaily);
          oprot.WriteFieldEnd();
        }
        if (__isset.noteSizeMax) {
          field.Name = "noteSizeMax";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(NoteSizeMax);
          oprot.WriteFieldEnd();
        }
        if (__isset.resourceSizeMax) {
          field.Name = "resourceSizeMax";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ResourceSizeMax);
          oprot.WriteFieldEnd();
        }
        if (__isset.userLinkedNotebookMax) {
          field.Name = "userLinkedNotebookMax";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserLinkedNotebookMax);
          oprot.WriteFieldEnd();
        }
        if (__isset.uploadLimit) {
          field.Name = "uploadLimit";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UploadLimit);
          oprot.WriteFieldEnd();
        }
        if (__isset.userNoteCountMax) {
          field.Name = "userNoteCountMax";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserNoteCountMax);
          oprot.WriteFieldEnd();
        }
        if (__isset.userNotebookCountMax) {
          field.Name = "userNotebookCountMax";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserNotebookCountMax);
          oprot.WriteFieldEnd();
        }
        if (__isset.userTagCountMax) {
          field.Name = "userTagCountMax";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserTagCountMax);
          oprot.WriteFieldEnd();
        }
        if (__isset.noteTagCountMax) {
          field.Name = "noteTagCountMax";
          field.Type = TType.I32;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NoteTagCountMax);
          oprot.WriteFieldEnd();
        }
        if (__isset.userSavedSearchesMax) {
          field.Name = "userSavedSearchesMax";
          field.Type = TType.I32;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UserSavedSearchesMax);
          oprot.WriteFieldEnd();
        }
        if (__isset.noteResourceCountMax) {
          field.Name = "noteResourceCountMax";
          field.Type = TType.I32;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NoteResourceCountMax);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AccountLimits(");
      bool __first = true;
      if (__isset.userMailLimitDaily) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserMailLimitDaily: ");
        __sb.Append(UserMailLimitDaily);
      }
      if (__isset.noteSizeMax) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoteSizeMax: ");
        __sb.Append(NoteSizeMax);
      }
      if (__isset.resourceSizeMax) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ResourceSizeMax: ");
        __sb.Append(ResourceSizeMax);
      }
      if (__isset.userLinkedNotebookMax) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserLinkedNotebookMax: ");
        __sb.Append(UserLinkedNotebookMax);
      }
      if (__isset.uploadLimit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UploadLimit: ");
        __sb.Append(UploadLimit);
      }
      if (__isset.userNoteCountMax) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserNoteCountMax: ");
        __sb.Append(UserNoteCountMax);
      }
      if (__isset.userNotebookCountMax) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserNotebookCountMax: ");
        __sb.Append(UserNotebookCountMax);
      }
      if (__isset.userTagCountMax) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserTagCountMax: ");
        __sb.Append(UserTagCountMax);
      }
      if (__isset.noteTagCountMax) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoteTagCountMax: ");
        __sb.Append(NoteTagCountMax);
      }
      if (__isset.userSavedSearchesMax) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserSavedSearchesMax: ");
        __sb.Append(UserSavedSearchesMax);
      }
      if (__isset.noteResourceCountMax) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoteResourceCountMax: ");
        __sb.Append(NoteResourceCountMax);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
