/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A structure that holds user identifying information such as an
  /// email address, Evernote user ID, or an identifier from a 3rd party
  /// service.  An instance consists of a type and a value, where the
  /// value will be stored in one of the value fields depending upon the
  /// data type required for the identity type.
  /// 
  /// When used with shared notebook invitations, a UserIdentity
  /// identifies a particular person who may not (yet) have an Evernote
  /// UserID UserIdentity but who has (almost) unique access to the
  /// service endpoint described by the UserIdentity.  For example, an
  /// e-mail UserIdentity can identify the person who receives e-mail at
  /// the given address, and who can therefore read the share key that
  /// has a cryptographic signature from the Evernote service. With the
  /// share key, this person can supply their Evernote UserID via an
  /// authentication token to join the notebook
  /// (authenticateToSharedNotebook), at which time we have associated
  /// the e-mail UserIdentity with an Evernote UserID UserIdentity. Note
  /// that using shared notebook records, the relationship between
  /// Evernote UserIDs and e-mail addresses is many to many.
  /// 
  /// Note that the identifier may not directly identify a
  /// particular Evernote UserID UserIdentity without further
  /// verification.  For example, an e-mail UserIdentity may be
  /// associated with an invitation to join a notebook (via a shared
  /// notebook record), but until a user uses a share key, that was sent
  /// to that e-mail address, to join the notebook, we do not know an
  /// Evernote UserID UserIdentity ID to match the e-mail address.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserIdentity : TBase
  {
    private UserIdentityType _type;
    private string _stringIdentifier;
    private long _longIdentifier;

    /// <summary>
    /// 
    /// <seealso cref="UserIdentityType"/>
    /// </summary>
    public UserIdentityType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public string StringIdentifier
    {
      get
      {
        return _stringIdentifier;
      }
      set
      {
        __isset.stringIdentifier = true;
        this._stringIdentifier = value;
      }
    }

    public long LongIdentifier
    {
      get
      {
        return _longIdentifier;
      }
      set
      {
        __isset.longIdentifier = true;
        this._longIdentifier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool type;
      public bool stringIdentifier;
      public bool longIdentifier;
    }

    public UserIdentity() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Type = (UserIdentityType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                StringIdentifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                LongIdentifier = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UserIdentity");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Type);
          oprot.WriteFieldEnd();
        }
        if (StringIdentifier != null && __isset.stringIdentifier) {
          field.Name = "stringIdentifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(StringIdentifier);
          oprot.WriteFieldEnd();
        }
        if (__isset.longIdentifier) {
          field.Name = "longIdentifier";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LongIdentifier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserIdentity(");
      bool __first = true;
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (StringIdentifier != null && __isset.stringIdentifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StringIdentifier: ");
        __sb.Append(StringIdentifier);
      }
      if (__isset.longIdentifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LongIdentifier: ");
        __sb.Append(LongIdentifier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
