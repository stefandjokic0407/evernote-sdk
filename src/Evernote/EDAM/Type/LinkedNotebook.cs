/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  /// A link in a user's account that refers them to a public or
  /// individual shared notebook in another user's account.
  /// 
  /// <dl>
  /// <dt>shareName</dt>
  /// <dd>The display name of the shared notebook. The link owner can change this.</dd>
  /// 
  /// <dt>username</dt>
  /// <dd>The username of the user who owns the shared or public notebook.</dd>
  /// 
  /// <dt>shardId</dt>
  /// <dd>The shard ID of the notebook if the notebook is not public.</dt>
  /// 
  /// <dt>uri</dt>
  /// <dd>The identifier of the public notebook.</dd>
  /// 
  /// <dt>guid</dt>
  ///   <dd>The unique identifier of this linked notebook.  Will be set whenever
  ///   a linked notebook is retrieved from the service, but may be null when a client
  ///   is creating a linked notebook.
  ///   <br/>
  ///   Length:  EDAM_GUID_LEN_MIN - EDAM_GUID_LEN_MAX
  ///   <br/>
  ///   Regex:  EDAM_GUID_REGEX
  ///   </dd>
  /// 
  /// <dt>updateSequenceNum</dt>
  ///   <dd>A number identifying the last transaction to
  ///   modify the state of this object.  The USN values are sequential within an
  ///   account, and can be used to compare the order of modifications within the
  ///   service.
  ///   </dd>
  /// 
  /// <dt>noteStoreUrl</dt>
  ///   <dd>
  ///   This field will contain the full URL that clients should use to make
  ///   NoteStore requests to the server shard that contains that notebook's data.
  ///   I.e. this is the URL that should be used to create the Thrift HTTP client
  ///   transport to send messages to the NoteStore service for the account.
  ///   </dd>
  /// 
  /// <dt>webApiUrlPrefix:</dt>
  ///   <dd>
  ///   This field will contain the initial part of the URLs that should be used
  ///   to make requests to Evernote's thin client "web API", which provide
  ///   optimized operations for clients that aren't capable of manipulating
  ///   the full contents of accounts via the full Thrift data model. Clients
  ///   should concatenate the relative path for the various servlets onto the
  ///   end of this string to construct the full URL, as documented on our
  ///   developer web site.
  ///   </dd>
  /// 
  /// <dt>stack</dt>
  ///   <dd>If this is set, then the notebook is visually contained within a stack
  ///   of notebooks with this name.  All notebooks in the same account with the
  ///   same 'stack' field are considered to be in the same stack.
  ///   Notebooks with no stack set are "top level" and not contained within a
  ///   stack.  The link owner can change this and this field is for the benefit
  ///   of the link owner.
  ///   </dd>
  /// 
  /// <dt>businessId</dt>
  ///   <dd>If set, this will be the unique identifier for the business that owns
  ///   the notebook to which the linked notebook refers.</dd>
  /// 
  /// <dt>sharedNotebookGlobalId</dt>
  ///   <dd>The globally unique identifier (globalId) of the shared notebook that
  ///   corresponds to the share key, or the GUID of the Notebook that the linked notebook
  ///   refers to. This field must be filled in with the SharedNotebook.globalId or
  ///   Notebook.GUID value when creating new LinkedNotebooks. This field replaces the
  ///   deprecated "shareKey" field.
  ///   </dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LinkedNotebook : TBase
  {
    private string _shareName;
    private string _username;
    private string _shardId;
    private string _sharedNotebookGlobalId;
    private string _uri;
    private string _guid;
    private int _updateSequenceNum;
    private string _noteStoreUrl;
    private string _webApiUrlPrefix;
    private string _stack;
    private int _businessId;

    public string ShareName
    {
      get
      {
        return _shareName;
      }
      set
      {
        __isset.shareName = true;
        this._shareName = value;
      }
    }

    public string Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.username = true;
        this._username = value;
      }
    }

    public string ShardId
    {
      get
      {
        return _shardId;
      }
      set
      {
        __isset.shardId = true;
        this._shardId = value;
      }
    }

    public string SharedNotebookGlobalId
    {
      get
      {
        return _sharedNotebookGlobalId;
      }
      set
      {
        __isset.sharedNotebookGlobalId = true;
        this._sharedNotebookGlobalId = value;
      }
    }

    public string Uri
    {
      get
      {
        return _uri;
      }
      set
      {
        __isset.uri = true;
        this._uri = value;
      }
    }

    public string Guid
    {
      get
      {
        return _guid;
      }
      set
      {
        __isset.guid = true;
        this._guid = value;
      }
    }

    public int UpdateSequenceNum
    {
      get
      {
        return _updateSequenceNum;
      }
      set
      {
        __isset.updateSequenceNum = true;
        this._updateSequenceNum = value;
      }
    }

    public string NoteStoreUrl
    {
      get
      {
        return _noteStoreUrl;
      }
      set
      {
        __isset.noteStoreUrl = true;
        this._noteStoreUrl = value;
      }
    }

    public string WebApiUrlPrefix
    {
      get
      {
        return _webApiUrlPrefix;
      }
      set
      {
        __isset.webApiUrlPrefix = true;
        this._webApiUrlPrefix = value;
      }
    }

    public string Stack
    {
      get
      {
        return _stack;
      }
      set
      {
        __isset.stack = true;
        this._stack = value;
      }
    }

    public int BusinessId
    {
      get
      {
        return _businessId;
      }
      set
      {
        __isset.businessId = true;
        this._businessId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool shareName;
      public bool username;
      public bool shardId;
      public bool sharedNotebookGlobalId;
      public bool uri;
      public bool guid;
      public bool updateSequenceNum;
      public bool noteStoreUrl;
      public bool webApiUrlPrefix;
      public bool stack;
      public bool businessId;
    }

    public LinkedNotebook() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ShareName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                ShardId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                SharedNotebookGlobalId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Uri = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Guid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                UpdateSequenceNum = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                NoteStoreUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                WebApiUrlPrefix = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                Stack = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I32) {
                BusinessId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("LinkedNotebook");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ShareName != null && __isset.shareName) {
          field.Name = "shareName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ShareName);
          oprot.WriteFieldEnd();
        }
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (ShardId != null && __isset.shardId) {
          field.Name = "shardId";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ShardId);
          oprot.WriteFieldEnd();
        }
        if (SharedNotebookGlobalId != null && __isset.sharedNotebookGlobalId) {
          field.Name = "sharedNotebookGlobalId";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SharedNotebookGlobalId);
          oprot.WriteFieldEnd();
        }
        if (Uri != null && __isset.uri) {
          field.Name = "uri";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Uri);
          oprot.WriteFieldEnd();
        }
        if (Guid != null && __isset.guid) {
          field.Name = "guid";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Guid);
          oprot.WriteFieldEnd();
        }
        if (__isset.updateSequenceNum) {
          field.Name = "updateSequenceNum";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(UpdateSequenceNum);
          oprot.WriteFieldEnd();
        }
        if (NoteStoreUrl != null && __isset.noteStoreUrl) {
          field.Name = "noteStoreUrl";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NoteStoreUrl);
          oprot.WriteFieldEnd();
        }
        if (WebApiUrlPrefix != null && __isset.webApiUrlPrefix) {
          field.Name = "webApiUrlPrefix";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(WebApiUrlPrefix);
          oprot.WriteFieldEnd();
        }
        if (Stack != null && __isset.stack) {
          field.Name = "stack";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Stack);
          oprot.WriteFieldEnd();
        }
        if (__isset.businessId) {
          field.Name = "businessId";
          field.Type = TType.I32;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(BusinessId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("LinkedNotebook(");
      bool __first = true;
      if (ShareName != null && __isset.shareName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ShareName: ");
        __sb.Append(ShareName);
      }
      if (Username != null && __isset.username) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Username: ");
        __sb.Append(Username);
      }
      if (ShardId != null && __isset.shardId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ShardId: ");
        __sb.Append(ShardId);
      }
      if (SharedNotebookGlobalId != null && __isset.sharedNotebookGlobalId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SharedNotebookGlobalId: ");
        __sb.Append(SharedNotebookGlobalId);
      }
      if (Uri != null && __isset.uri) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Uri: ");
        __sb.Append(Uri);
      }
      if (Guid != null && __isset.guid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Guid: ");
        __sb.Append(Guid);
      }
      if (__isset.updateSequenceNum) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UpdateSequenceNum: ");
        __sb.Append(UpdateSequenceNum);
      }
      if (NoteStoreUrl != null && __isset.noteStoreUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoteStoreUrl: ");
        __sb.Append(NoteStoreUrl);
      }
      if (WebApiUrlPrefix != null && __isset.webApiUrlPrefix) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WebApiUrlPrefix: ");
        __sb.Append(WebApiUrlPrefix);
      }
      if (Stack != null && __isset.stack) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Stack: ");
        __sb.Append(Stack);
      }
      if (__isset.businessId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BusinessId: ");
        __sb.Append(BusinessId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
