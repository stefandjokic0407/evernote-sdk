/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Type
{

  /// <summary>
  ///  This represents the information about a single user account.
  /// <dl>
  ///  <dt>id</dt>
  ///    <dd>The unique numeric identifier for the account, which will not
  ///    change for the lifetime of the account.
  ///    </dd>
  /// 
  ///  <dt>username</dt>
  ///    <dd>The name that uniquely identifies a single user account. This name
  ///    may be presented by the user, along with their password, to log into
  ///    their account.
  ///    May only contain a-z, 0-9, or '-', and may not start or end with the '-'
  ///    <br/>
  ///    Length:  EDAM_USER_USERNAME_LEN_MIN - EDAM_USER_USERNAME_LEN_MAX
  ///    <br/>
  ///    Regex:  EDAM_USER_USERNAME_REGEX
  ///    </dd>
  /// 
  ///  <dt>email</dt>
  ///    <dd>The email address registered for the user.  Must comply with
  ///    RFC 2821 and RFC 2822.<br/>
  ///    Third party applications that authenticate using OAuth do not have
  ///    access to this field.
  ///    Length:  EDAM_EMAIL_LEN_MIN - EDAM_EMAIL_LEN_MAX
  ///    <br/>
  ///    Regex:  EDAM_EMAIL_REGEX
  ///    </dd>
  /// 
  ///  <dt>name</dt>
  ///    <dd>The printable name of the user, which may be a combination
  ///    of given and family names.  This is used instead of separate "first"
  ///    and "last" names due to variations in international name format/order.
  ///    May not start or end with a whitespace character.  May contain any
  ///    character but carriage return or newline (Unicode classes Zl and Zp).
  ///    <br/>
  ///    Length:  EDAM_USER_NAME_LEN_MIN - EDAM_USER_NAME_LEN_MAX
  ///    <br/>
  ///    Regex:  EDAM_USER_NAME_REGEX
  ///    </dd>
  /// 
  ///  <dt>timezone</dt>
  ///    <dd>The zone ID for the user's default location.  If present,
  ///    this may be used to localize the display of any timestamp for which no
  ///    other timezone is available.
  ///    The format must be encoded as a standard zone ID such as
  ///    "America/Los_Angeles" or "GMT+08:00"
  ///    <br/>
  ///    Length:  EDAM_TIMEZONE_LEN_MIN - EDAM_TIMEZONE_LEN_MAX
  ///    <br/>
  ///    Regex:  EDAM_TIMEZONE_REGEX
  ///    </dd>
  /// 
  ///  <dt>serviceLevel</dt>
  ///    <dd>The level of service the user currently receives. This will always be populated
  ///        for users retrieved from the Evernote service.
  ///    </dd>
  /// 
  ///  <dt>created</dt>
  ///    <dd>The date and time when this user account was created in the
  ///    service.
  ///    </dd>
  /// 
  ///  <dt>updated</dt>
  ///    <dd>The date and time when this user account was last modified
  ///    in the service.
  ///    </dd>
  /// 
  ///  <dt>deleted</dt>
  ///    <dd>If the account has been deleted from the system (e.g. as
  ///    the result of a legal request by the user), the date and time of the
  ///    deletion will be represented here.  If not, this value will not be set.
  ///    </dd>
  /// 
  ///  <dt>active</dt>
  ///    <dd>If the user account is available for login and
  ///    synchronization, this flag will be set to true.
  ///    </dd>
  /// 
  ///  <dt>shardId</dt>
  ///    <dd>DEPRECATED - Client applications should have no need to use this field.
  ///    </dd>
  /// 
  ///  <dt>attributes</dt>
  ///    <dd>If present, this will contain a list of the attributes
  ///    for this user account.
  ///    </dd>
  /// 
  ///  <dt>accounting</dt>
  ///    <dd>Bookkeeping information for the user's subscription.
  ///    </dd>
  /// 
  ///  <dt>businessUserInfo</dt>
  ///    <dd>If present, this will contain a set of business information
  ///    relating to the user's business membership.  If not present, the
  ///    user is not currently part of a business.
  ///    </dd>
  /// 
  ///  <dt>photoUrl</dt>
  ///    <dd>The URL of the photo that represents this User. This field is filled in by the
  ///    service and is read-only to clients. If <code>photoLastUpdated</code> is
  ///    not set, this url will point to a placeholder user photo generated by the
  ///    service.</dd>
  /// 
  ///  <dt>photoLastUpdated</dt>
  ///    <dd>The time at which the photo at 'photoUrl' was last updated by this User. This
  ///    field will be null if the User never set a profile photo. This field is filled in by
  ///    the service and is read-only to clients.</dd>
  /// 
  ///  <dt>accountLimits</dt>
  ///    <dd>Account limits applicable for this user.</dd>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class User : TBase
  {
    private int _id;
    private string _username;
    private string _email;
    private string _name;
    private string _timezone;
    private PrivilegeLevel _privilege;
    private ServiceLevel _serviceLevel;
    private long _created;
    private long _updated;
    private long _deleted;
    private bool _active;
    private string _shardId;
    private UserAttributes _attributes;
    private Accounting _accounting;
    private BusinessUserInfo _businessUserInfo;
    private string _photoUrl;
    private long _photoLastUpdated;
    private AccountLimits _accountLimits;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.username = true;
        this._username = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Timezone
    {
      get
      {
        return _timezone;
      }
      set
      {
        __isset.timezone = true;
        this._timezone = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="PrivilegeLevel"/>
    /// </summary>
    public PrivilegeLevel Privilege
    {
      get
      {
        return _privilege;
      }
      set
      {
        __isset.privilege = true;
        this._privilege = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ServiceLevel"/>
    /// </summary>
    public ServiceLevel ServiceLevel
    {
      get
      {
        return _serviceLevel;
      }
      set
      {
        __isset.serviceLevel = true;
        this._serviceLevel = value;
      }
    }

    public long Created
    {
      get
      {
        return _created;
      }
      set
      {
        __isset.created = true;
        this._created = value;
      }
    }

    public long Updated
    {
      get
      {
        return _updated;
      }
      set
      {
        __isset.updated = true;
        this._updated = value;
      }
    }

    public long Deleted
    {
      get
      {
        return _deleted;
      }
      set
      {
        __isset.deleted = true;
        this._deleted = value;
      }
    }

    public bool Active
    {
      get
      {
        return _active;
      }
      set
      {
        __isset.active = true;
        this._active = value;
      }
    }

    public string ShardId
    {
      get
      {
        return _shardId;
      }
      set
      {
        __isset.shardId = true;
        this._shardId = value;
      }
    }

    public UserAttributes Attributes
    {
      get
      {
        return _attributes;
      }
      set
      {
        __isset.attributes = true;
        this._attributes = value;
      }
    }

    public Accounting Accounting
    {
      get
      {
        return _accounting;
      }
      set
      {
        __isset.accounting = true;
        this._accounting = value;
      }
    }

    public BusinessUserInfo BusinessUserInfo
    {
      get
      {
        return _businessUserInfo;
      }
      set
      {
        __isset.businessUserInfo = true;
        this._businessUserInfo = value;
      }
    }

    public string PhotoUrl
    {
      get
      {
        return _photoUrl;
      }
      set
      {
        __isset.photoUrl = true;
        this._photoUrl = value;
      }
    }

    public long PhotoLastUpdated
    {
      get
      {
        return _photoLastUpdated;
      }
      set
      {
        __isset.photoLastUpdated = true;
        this._photoLastUpdated = value;
      }
    }

    public AccountLimits AccountLimits
    {
      get
      {
        return _accountLimits;
      }
      set
      {
        __isset.accountLimits = true;
        this._accountLimits = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool username;
      public bool email;
      public bool name;
      public bool timezone;
      public bool privilege;
      public bool serviceLevel;
      public bool created;
      public bool updated;
      public bool deleted;
      public bool active;
      public bool shardId;
      public bool attributes;
      public bool accounting;
      public bool businessUserInfo;
      public bool photoUrl;
      public bool photoLastUpdated;
      public bool accountLimits;
    }

    public User() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Id = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Timezone = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                Privilege = (PrivilegeLevel)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.I32) {
                ServiceLevel = (ServiceLevel)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                Created = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                Updated = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I64) {
                Deleted = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Bool) {
                Active = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.String) {
                ShardId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Struct) {
                Attributes = new UserAttributes();
                Attributes.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.Struct) {
                Accounting = new Accounting();
                Accounting.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.Struct) {
                BusinessUserInfo = new BusinessUserInfo();
                BusinessUserInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.String) {
                PhotoUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.I64) {
                PhotoLastUpdated = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 22:
              if (field.Type == TType.Struct) {
                AccountLimits = new AccountLimits();
                AccountLimits.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("User");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.id) {
          field.Name = "id";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Id);
          oprot.WriteFieldEnd();
        }
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Timezone != null && __isset.timezone) {
          field.Name = "timezone";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Timezone);
          oprot.WriteFieldEnd();
        }
        if (__isset.privilege) {
          field.Name = "privilege";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Privilege);
          oprot.WriteFieldEnd();
        }
        if (__isset.created) {
          field.Name = "created";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Created);
          oprot.WriteFieldEnd();
        }
        if (__isset.updated) {
          field.Name = "updated";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Updated);
          oprot.WriteFieldEnd();
        }
        if (__isset.deleted) {
          field.Name = "deleted";
          field.Type = TType.I64;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Deleted);
          oprot.WriteFieldEnd();
        }
        if (__isset.active) {
          field.Name = "active";
          field.Type = TType.Bool;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Active);
          oprot.WriteFieldEnd();
        }
        if (ShardId != null && __isset.shardId) {
          field.Name = "shardId";
          field.Type = TType.String;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ShardId);
          oprot.WriteFieldEnd();
        }
        if (Attributes != null && __isset.attributes) {
          field.Name = "attributes";
          field.Type = TType.Struct;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          Attributes.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Accounting != null && __isset.accounting) {
          field.Name = "accounting";
          field.Type = TType.Struct;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          Accounting.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (BusinessUserInfo != null && __isset.businessUserInfo) {
          field.Name = "businessUserInfo";
          field.Type = TType.Struct;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          BusinessUserInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PhotoUrl != null && __isset.photoUrl) {
          field.Name = "photoUrl";
          field.Type = TType.String;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PhotoUrl);
          oprot.WriteFieldEnd();
        }
        if (__isset.photoLastUpdated) {
          field.Name = "photoLastUpdated";
          field.Type = TType.I64;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(PhotoLastUpdated);
          oprot.WriteFieldEnd();
        }
        if (__isset.serviceLevel) {
          field.Name = "serviceLevel";
          field.Type = TType.I32;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ServiceLevel);
          oprot.WriteFieldEnd();
        }
        if (AccountLimits != null && __isset.accountLimits) {
          field.Name = "accountLimits";
          field.Type = TType.Struct;
          field.ID = 22;
          oprot.WriteFieldBegin(field);
          AccountLimits.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("User(");
      bool __first = true;
      if (__isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (Username != null && __isset.username) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Username: ");
        __sb.Append(Username);
      }
      if (Email != null && __isset.email) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Email: ");
        __sb.Append(Email);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Timezone != null && __isset.timezone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timezone: ");
        __sb.Append(Timezone);
      }
      if (__isset.privilege) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Privilege: ");
        __sb.Append(Privilege);
      }
      if (__isset.serviceLevel) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ServiceLevel: ");
        __sb.Append(ServiceLevel);
      }
      if (__isset.created) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Created: ");
        __sb.Append(Created);
      }
      if (__isset.updated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Updated: ");
        __sb.Append(Updated);
      }
      if (__isset.deleted) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Deleted: ");
        __sb.Append(Deleted);
      }
      if (__isset.active) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Active: ");
        __sb.Append(Active);
      }
      if (ShardId != null && __isset.shardId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ShardId: ");
        __sb.Append(ShardId);
      }
      if (Attributes != null && __isset.attributes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Attributes: ");
        __sb.Append(Attributes== null ? "<null>" : Attributes.ToString());
      }
      if (Accounting != null && __isset.accounting) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Accounting: ");
        __sb.Append(Accounting== null ? "<null>" : Accounting.ToString());
      }
      if (BusinessUserInfo != null && __isset.businessUserInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BusinessUserInfo: ");
        __sb.Append(BusinessUserInfo== null ? "<null>" : BusinessUserInfo.ToString());
      }
      if (PhotoUrl != null && __isset.photoUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PhotoUrl: ");
        __sb.Append(PhotoUrl);
      }
      if (__isset.photoLastUpdated) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PhotoLastUpdated: ");
        __sb.Append(PhotoLastUpdated);
      }
      if (AccountLimits != null && __isset.accountLimits) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AccountLimits: ");
        __sb.Append(AccountLimits== null ? "<null>" : AccountLimits.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
