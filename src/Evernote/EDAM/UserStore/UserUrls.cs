/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.UserStore
{

  /// <summary>
  /// <dl>
  /// <dt>noteStoreUrl:</dt>
  ///   <dd>
  ///   This field will contain the full URL that clients should use to make
  ///   NoteStore requests to the server shard that contains that user's data.
  ///   I.e. this is the URL that should be used to create the Thrift HTTP client
  ///   transport to send messages to the NoteStore service for the account.
  ///   </dd>
  /// <dt>webApiUrlPrefix:</dt>
  ///   <dd>
  ///   This field will contain the initial part of the URLs that should be used
  ///   to make requests to Evernote's thin client "web API", which provide
  ///   optimized operations for clients that aren't capable of manipulating
  ///   the full contents of accounts via the full Thrift data model. Clients
  ///   should concatenate the relative path for the various servlets onto the
  ///   end of this string to construct the full URL, as documented on our
  ///   developer web site.
  ///   </dd>
  /// <dt>userStoreUrl:</dt>
  ///   <dd>
  ///   This field will contain the full URL that clients should use to make UserStore
  ///   requests after successfully authenticating. I.e. this is the URL that should be used
  ///   to create the Thrift HTTP client transport to send messages to the UserStore service
  ///   for this account.
  ///   </dd>
  /// <dt>utilityUrl:</dt>
  ///   <dd>
  ///   This field will contain the full URL that clients should use to make Utility requests
  ///   to the server shard that contains that user's data. I.e. this is the URL that should
  ///   be used to create the Thrift HTTP client transport to send messages to the Utility
  ///   service for the account.
  ///   </dd>
  /// <dt>messageStoreUrl:</dt>
  ///   <dd>
  ///   This field will contain the full URL that clients should use to make MessageStore
  ///   requests to the server. I.e. this is the URL that should be used to create the
  ///   Thrift HTTP client transport to send messages to the MessageStore service for the
  ///   account.
  ///   </dd>
  /// <dt>userWebSocketUrl:</dt>
  ///   <dd>
  ///   This field will contain the full URL that clients should use when opening a
  ///   persistent web socket to recieve notification of events for the authenticated user.
  ///   </dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class UserUrls : TBase
  {
    private string _noteStoreUrl;
    private string _webApiUrlPrefix;
    private string _userStoreUrl;
    private string _utilityUrl;
    private string _messageStoreUrl;
    private string _userWebSocketUrl;

    public string NoteStoreUrl
    {
      get
      {
        return _noteStoreUrl;
      }
      set
      {
        __isset.noteStoreUrl = true;
        this._noteStoreUrl = value;
      }
    }

    public string WebApiUrlPrefix
    {
      get
      {
        return _webApiUrlPrefix;
      }
      set
      {
        __isset.webApiUrlPrefix = true;
        this._webApiUrlPrefix = value;
      }
    }

    public string UserStoreUrl
    {
      get
      {
        return _userStoreUrl;
      }
      set
      {
        __isset.userStoreUrl = true;
        this._userStoreUrl = value;
      }
    }

    public string UtilityUrl
    {
      get
      {
        return _utilityUrl;
      }
      set
      {
        __isset.utilityUrl = true;
        this._utilityUrl = value;
      }
    }

    public string MessageStoreUrl
    {
      get
      {
        return _messageStoreUrl;
      }
      set
      {
        __isset.messageStoreUrl = true;
        this._messageStoreUrl = value;
      }
    }

    public string UserWebSocketUrl
    {
      get
      {
        return _userWebSocketUrl;
      }
      set
      {
        __isset.userWebSocketUrl = true;
        this._userWebSocketUrl = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool noteStoreUrl;
      public bool webApiUrlPrefix;
      public bool userStoreUrl;
      public bool utilityUrl;
      public bool messageStoreUrl;
      public bool userWebSocketUrl;
    }

    public UserUrls() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                NoteStoreUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                WebApiUrlPrefix = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                UserStoreUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                UtilityUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                MessageStoreUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                UserWebSocketUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("UserUrls");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (NoteStoreUrl != null && __isset.noteStoreUrl) {
          field.Name = "noteStoreUrl";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NoteStoreUrl);
          oprot.WriteFieldEnd();
        }
        if (WebApiUrlPrefix != null && __isset.webApiUrlPrefix) {
          field.Name = "webApiUrlPrefix";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(WebApiUrlPrefix);
          oprot.WriteFieldEnd();
        }
        if (UserStoreUrl != null && __isset.userStoreUrl) {
          field.Name = "userStoreUrl";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserStoreUrl);
          oprot.WriteFieldEnd();
        }
        if (UtilityUrl != null && __isset.utilityUrl) {
          field.Name = "utilityUrl";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UtilityUrl);
          oprot.WriteFieldEnd();
        }
        if (MessageStoreUrl != null && __isset.messageStoreUrl) {
          field.Name = "messageStoreUrl";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageStoreUrl);
          oprot.WriteFieldEnd();
        }
        if (UserWebSocketUrl != null && __isset.userWebSocketUrl) {
          field.Name = "userWebSocketUrl";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserWebSocketUrl);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("UserUrls(");
      bool __first = true;
      if (NoteStoreUrl != null && __isset.noteStoreUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NoteStoreUrl: ");
        __sb.Append(NoteStoreUrl);
      }
      if (WebApiUrlPrefix != null && __isset.webApiUrlPrefix) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("WebApiUrlPrefix: ");
        __sb.Append(WebApiUrlPrefix);
      }
      if (UserStoreUrl != null && __isset.userStoreUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserStoreUrl: ");
        __sb.Append(UserStoreUrl);
      }
      if (UtilityUrl != null && __isset.utilityUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UtilityUrl: ");
        __sb.Append(UtilityUrl);
      }
      if (MessageStoreUrl != null && __isset.messageStoreUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageStoreUrl: ");
        __sb.Append(MessageStoreUrl);
      }
      if (UserWebSocketUrl != null && __isset.userWebSocketUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserWebSocketUrl: ");
        __sb.Append(UserWebSocketUrl);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
