/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.UserStore
{

  /// <summary>
  ///  This structure describes a collection of bootstrap settings.
  /// <dl>
  ///  <dt>name:</dt>
  ///    <dd>
  ///    The unique name of the profile, which is guaranteed to remain consistent across
  ///    calls to getBootstrapInfo.
  ///    </dd>
  ///  <dt>settings:</dt>
  ///    <dd>
  ///    The settings for this profile.
  ///    </dd>
  ///  </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BootstrapProfile : TBase
  {

    public string Name { get; set; }

    public BootstrapSettings Settings { get; set; }

    public BootstrapProfile() {
    }

    public BootstrapProfile(string name, BootstrapSettings settings) : this() {
      this.Name = name;
      this.Settings = settings;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_name = false;
        bool isset_settings = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
                isset_name = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Settings = new BootstrapSettings();
                Settings.Read(iprot);
                isset_settings = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_name)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        if (!isset_settings)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Settings not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("BootstrapProfile");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Name not set");
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
        if (Settings == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Settings not set");
        field.Name = "settings";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Settings.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BootstrapProfile(");
      __sb.Append(", Name: ");
      __sb.Append(Name);
      __sb.Append(", Settings: ");
      __sb.Append(Settings== null ? "<null>" : Settings.ToString());
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
