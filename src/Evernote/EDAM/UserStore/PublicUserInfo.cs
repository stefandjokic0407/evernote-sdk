/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.UserStore
{

  /// <summary>
  ///  This structure is used to provide publicly-available user information
  ///  about a particular account.
  /// <dl>
  ///  <dt>userId:</dt>
  ///    <dd>
  ///    The unique numeric user identifier for the user account.
  ///    </dd>
  ///  <dt>serviceLevel:</dt>
  ///    <dd>
  ///    The service level of the account.
  ///    </dd>
  ///  <dt>noteStoreUrl:</dt>
  ///    <dd>
  ///    This field will contain the full URL that clients should use to make
  ///    NoteStore requests to the server shard that contains that user's data.
  ///    I.e. this is the URL that should be used to create the Thrift HTTP client
  ///    transport to send messages to the NoteStore service for the account.
  ///    </dd>
  ///  <dt>webApiUrlPrefix:</dt>
  ///    <dd>
  ///    This field will contain the initial part of the URLs that should be used
  ///    to make requests to Evernote's thin client "web API", which provide
  ///    optimized operations for clients that aren't capable of manipulating
  ///    the full contents of accounts via the full Thrift data model. Clients
  ///    should concatenate the relative path for the various servlets onto the
  ///    end of this string to construct the full URL, as documented on our
  ///    developer web site.
  ///    </dd>
  ///  </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PublicUserInfo : TBase
  {
    private Evernote.EDAM.Type.ServiceLevel _serviceLevel;
    private string _username;
    private string _noteStoreUrl;
    private string _webApiUrlPrefix;

    public int UserId { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="Evernote.EDAM.Type.ServiceLevel"/>
    /// </summary>
    public Evernote.EDAM.Type.ServiceLevel ServiceLevel
    {
      get
      {
        return _serviceLevel;
      }
      set
      {
        __isset.serviceLevel = true;
        this._serviceLevel = value;
      }
    }

    public string Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.username = true;
        this._username = value;
      }
    }

    public string NoteStoreUrl
    {
      get
      {
        return _noteStoreUrl;
      }
      set
      {
        __isset.noteStoreUrl = true;
        this._noteStoreUrl = value;
      }
    }

    public string WebApiUrlPrefix
    {
      get
      {
        return _webApiUrlPrefix;
      }
      set
      {
        __isset.webApiUrlPrefix = true;
        this._webApiUrlPrefix = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool serviceLevel;
      public bool username;
      public bool noteStoreUrl;
      public bool webApiUrlPrefix;
    }

    public PublicUserInfo() {
    }

    public PublicUserInfo(int userId) : this() {
      this.UserId = userId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_userId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                UserId = iprot.ReadI32();
                isset_userId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                ServiceLevel = (Evernote.EDAM.Type.ServiceLevel)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Username = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                NoteStoreUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                WebApiUrlPrefix = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_userId)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field UserId not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("PublicUserInfo");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "userId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UserId);
        oprot.WriteFieldEnd();
        if (Username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Username);
          oprot.WriteFieldEnd();
        }
        if (NoteStoreUrl != null && __isset.noteStoreUrl) {
          field.Name = "noteStoreUrl";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NoteStoreUrl);
          oprot.WriteFieldEnd();
        }
        if (WebApiUrlPrefix != null && __isset.webApiUrlPrefix) {
          field.Name = "webApiUrlPrefix";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(WebApiUrlPrefix);
          oprot.WriteFieldEnd();
        }
        if (__isset.serviceLevel) {
          field.Name = "serviceLevel";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ServiceLevel);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("PublicUserInfo(");
      __sb.Append(", UserId: ");
      __sb.Append(UserId);
      if (__isset.serviceLevel) {
        __sb.Append(", ServiceLevel: ");
        __sb.Append(ServiceLevel);
      }
      if (Username != null && __isset.username) {
        __sb.Append(", Username: ");
        __sb.Append(Username);
      }
      if (NoteStoreUrl != null && __isset.noteStoreUrl) {
        __sb.Append(", NoteStoreUrl: ");
        __sb.Append(NoteStoreUrl);
      }
      if (WebApiUrlPrefix != null && __isset.webApiUrlPrefix) {
        __sb.Append(", WebApiUrlPrefix: ");
        __sb.Append(WebApiUrlPrefix);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
