/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.UserStore
{

  /// <summary>
  ///  This structure describes a collection of bootstrap settings.
  /// <dl>
  ///  <dt>serviceHost:</dt>
  ///    <dd>
  ///    The hostname and optional port for composing Evernote web service URLs.
  ///    This URL can be used to access the UserStore and related services,
  ///    but must not be used to compose the NoteStore URL. Client applications
  ///    must handle serviceHost values that include only the hostname
  ///    (e.g. www.evernote.com) or both the hostname and port (e.g. www.evernote.com:8080).
  ///    If no port is specified, or if port 443 is specified, client applications must
  ///    use the scheme "https" when composing URLs. Otherwise, a client must use the
  ///    scheme "http".
  ///  </dd>
  ///  <dt>marketingUrl:</dt>
  ///    <dd>
  ///    The URL stem for the Evernote corporate marketing website, e.g. http://www.evernote.com.
  ///    This stem can be used to compose website URLs. For example, the URL of the Evernote
  ///    Trunk is composed by appending "/about/trunk/" to the value of marketingUrl.
  ///    </dd>
  ///  <dt>supportUrl:</dt>
  ///    <dd>
  ///    The full URL for the Evernote customer support website, e.g. https://support.evernote.com.
  ///    </dd>
  ///  <dt>accountEmailDomain:</dt>
  ///    <dd>
  ///    The domain used for an Evernote user's incoming email address, which allows notes to
  ///    be emailed into an account. E.g. m.evernote.com.
  ///    </dd>
  ///  <dt>enableFacebookSharing:</dt>
  ///    <dd>
  ///    Whether the client application should enable sharing of notes on Facebook.
  ///    </dd>
  ///  <dt>enableGiftSubscriptions:</dt>
  ///    <dd>
  ///    Whether the client application should enable gift subscriptions.
  ///    </dd>
  ///  <dt>enableSupportTickets:</dt>
  ///    <dd>
  ///    Whether the client application should enable in-client creation of support tickets.
  ///    </dd>
  ///  <dt>enableSharedNotebooks:</dt>
  ///    <dd>
  ///    Whether the client application should enable shared notebooks.
  ///    </dd>
  ///  <dt>enableSingleNoteSharing:</dt>
  ///    <dd>
  ///    Whether the client application should enable single note sharing.
  ///    </dd>
  ///  <dt>enableSponsoredAccounts:</dt>
  ///    <dd>
  ///    Whether the client application should enable sponsored accounts.
  ///    </dd>
  ///  <dt>enableTwitterSharing:</dt>
  ///    <dd>
  ///    Whether the client application should enable sharing of notes on Twitter.
  ///    </dd>
  ///  <dt>enableGoogle:</dt>
  ///    <dd>
  ///    Whether the client application should enable authentication with Google,
  ///    for example to allow integration with a user's Gmail contacts.
  ///  </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BootstrapSettings : TBase
  {
    private bool _enableFacebookSharing;
    private bool _enableGiftSubscriptions;
    private bool _enableSupportTickets;
    private bool _enableSharedNotebooks;
    private bool _enableSingleNoteSharing;
    private bool _enableSponsoredAccounts;
    private bool _enableTwitterSharing;
    private bool _enableLinkedInSharing;
    private bool _enablePublicNotebooks;
    private bool _enableGoogle;

    public string ServiceHost { get; set; }

    public string MarketingUrl { get; set; }

    public string SupportUrl { get; set; }

    public string AccountEmailDomain { get; set; }

    public bool EnableFacebookSharing
    {
      get
      {
        return _enableFacebookSharing;
      }
      set
      {
        __isset.enableFacebookSharing = true;
        this._enableFacebookSharing = value;
      }
    }

    public bool EnableGiftSubscriptions
    {
      get
      {
        return _enableGiftSubscriptions;
      }
      set
      {
        __isset.enableGiftSubscriptions = true;
        this._enableGiftSubscriptions = value;
      }
    }

    public bool EnableSupportTickets
    {
      get
      {
        return _enableSupportTickets;
      }
      set
      {
        __isset.enableSupportTickets = true;
        this._enableSupportTickets = value;
      }
    }

    public bool EnableSharedNotebooks
    {
      get
      {
        return _enableSharedNotebooks;
      }
      set
      {
        __isset.enableSharedNotebooks = true;
        this._enableSharedNotebooks = value;
      }
    }

    public bool EnableSingleNoteSharing
    {
      get
      {
        return _enableSingleNoteSharing;
      }
      set
      {
        __isset.enableSingleNoteSharing = true;
        this._enableSingleNoteSharing = value;
      }
    }

    public bool EnableSponsoredAccounts
    {
      get
      {
        return _enableSponsoredAccounts;
      }
      set
      {
        __isset.enableSponsoredAccounts = true;
        this._enableSponsoredAccounts = value;
      }
    }

    public bool EnableTwitterSharing
    {
      get
      {
        return _enableTwitterSharing;
      }
      set
      {
        __isset.enableTwitterSharing = true;
        this._enableTwitterSharing = value;
      }
    }

    public bool EnableLinkedInSharing
    {
      get
      {
        return _enableLinkedInSharing;
      }
      set
      {
        __isset.enableLinkedInSharing = true;
        this._enableLinkedInSharing = value;
      }
    }

    public bool EnablePublicNotebooks
    {
      get
      {
        return _enablePublicNotebooks;
      }
      set
      {
        __isset.enablePublicNotebooks = true;
        this._enablePublicNotebooks = value;
      }
    }

    public bool EnableGoogle
    {
      get
      {
        return _enableGoogle;
      }
      set
      {
        __isset.enableGoogle = true;
        this._enableGoogle = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool enableFacebookSharing;
      public bool enableGiftSubscriptions;
      public bool enableSupportTickets;
      public bool enableSharedNotebooks;
      public bool enableSingleNoteSharing;
      public bool enableSponsoredAccounts;
      public bool enableTwitterSharing;
      public bool enableLinkedInSharing;
      public bool enablePublicNotebooks;
      public bool enableGoogle;
    }

    public BootstrapSettings() {
    }

    public BootstrapSettings(string serviceHost, string marketingUrl, string supportUrl, string accountEmailDomain) : this() {
      this.ServiceHost = serviceHost;
      this.MarketingUrl = marketingUrl;
      this.SupportUrl = supportUrl;
      this.AccountEmailDomain = accountEmailDomain;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_serviceHost = false;
        bool isset_marketingUrl = false;
        bool isset_supportUrl = false;
        bool isset_accountEmailDomain = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ServiceHost = iprot.ReadString();
                isset_serviceHost = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                MarketingUrl = iprot.ReadString();
                isset_marketingUrl = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SupportUrl = iprot.ReadString();
                isset_supportUrl = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                AccountEmailDomain = iprot.ReadString();
                isset_accountEmailDomain = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                EnableFacebookSharing = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                EnableGiftSubscriptions = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Bool) {
                EnableSupportTickets = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                EnableSharedNotebooks = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Bool) {
                EnableSingleNoteSharing = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Bool) {
                EnableSponsoredAccounts = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.Bool) {
                EnableTwitterSharing = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.Bool) {
                EnableLinkedInSharing = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.Bool) {
                EnablePublicNotebooks = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.Bool) {
                EnableGoogle = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_serviceHost)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ServiceHost not set");
        if (!isset_marketingUrl)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MarketingUrl not set");
        if (!isset_supportUrl)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SupportUrl not set");
        if (!isset_accountEmailDomain)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AccountEmailDomain not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("BootstrapSettings");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ServiceHost == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ServiceHost not set");
        field.Name = "serviceHost";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ServiceHost);
        oprot.WriteFieldEnd();
        if (MarketingUrl == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field MarketingUrl not set");
        field.Name = "marketingUrl";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MarketingUrl);
        oprot.WriteFieldEnd();
        if (SupportUrl == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field SupportUrl not set");
        field.Name = "supportUrl";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SupportUrl);
        oprot.WriteFieldEnd();
        if (AccountEmailDomain == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AccountEmailDomain not set");
        field.Name = "accountEmailDomain";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccountEmailDomain);
        oprot.WriteFieldEnd();
        if (__isset.enableFacebookSharing) {
          field.Name = "enableFacebookSharing";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(EnableFacebookSharing);
          oprot.WriteFieldEnd();
        }
        if (__isset.enableGiftSubscriptions) {
          field.Name = "enableGiftSubscriptions";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(EnableGiftSubscriptions);
          oprot.WriteFieldEnd();
        }
        if (__isset.enableSupportTickets) {
          field.Name = "enableSupportTickets";
          field.Type = TType.Bool;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(EnableSupportTickets);
          oprot.WriteFieldEnd();
        }
        if (__isset.enableSharedNotebooks) {
          field.Name = "enableSharedNotebooks";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(EnableSharedNotebooks);
          oprot.WriteFieldEnd();
        }
        if (__isset.enableSingleNoteSharing) {
          field.Name = "enableSingleNoteSharing";
          field.Type = TType.Bool;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(EnableSingleNoteSharing);
          oprot.WriteFieldEnd();
        }
        if (__isset.enableSponsoredAccounts) {
          field.Name = "enableSponsoredAccounts";
          field.Type = TType.Bool;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(EnableSponsoredAccounts);
          oprot.WriteFieldEnd();
        }
        if (__isset.enableTwitterSharing) {
          field.Name = "enableTwitterSharing";
          field.Type = TType.Bool;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(EnableTwitterSharing);
          oprot.WriteFieldEnd();
        }
        if (__isset.enableLinkedInSharing) {
          field.Name = "enableLinkedInSharing";
          field.Type = TType.Bool;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(EnableLinkedInSharing);
          oprot.WriteFieldEnd();
        }
        if (__isset.enablePublicNotebooks) {
          field.Name = "enablePublicNotebooks";
          field.Type = TType.Bool;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(EnablePublicNotebooks);
          oprot.WriteFieldEnd();
        }
        if (__isset.enableGoogle) {
          field.Name = "enableGoogle";
          field.Type = TType.Bool;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(EnableGoogle);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BootstrapSettings(");
      __sb.Append(", ServiceHost: ");
      __sb.Append(ServiceHost);
      __sb.Append(", MarketingUrl: ");
      __sb.Append(MarketingUrl);
      __sb.Append(", SupportUrl: ");
      __sb.Append(SupportUrl);
      __sb.Append(", AccountEmailDomain: ");
      __sb.Append(AccountEmailDomain);
      if (__isset.enableFacebookSharing) {
        __sb.Append(", EnableFacebookSharing: ");
        __sb.Append(EnableFacebookSharing);
      }
      if (__isset.enableGiftSubscriptions) {
        __sb.Append(", EnableGiftSubscriptions: ");
        __sb.Append(EnableGiftSubscriptions);
      }
      if (__isset.enableSupportTickets) {
        __sb.Append(", EnableSupportTickets: ");
        __sb.Append(EnableSupportTickets);
      }
      if (__isset.enableSharedNotebooks) {
        __sb.Append(", EnableSharedNotebooks: ");
        __sb.Append(EnableSharedNotebooks);
      }
      if (__isset.enableSingleNoteSharing) {
        __sb.Append(", EnableSingleNoteSharing: ");
        __sb.Append(EnableSingleNoteSharing);
      }
      if (__isset.enableSponsoredAccounts) {
        __sb.Append(", EnableSponsoredAccounts: ");
        __sb.Append(EnableSponsoredAccounts);
      }
      if (__isset.enableTwitterSharing) {
        __sb.Append(", EnableTwitterSharing: ");
        __sb.Append(EnableTwitterSharing);
      }
      if (__isset.enableLinkedInSharing) {
        __sb.Append(", EnableLinkedInSharing: ");
        __sb.Append(EnableLinkedInSharing);
      }
      if (__isset.enablePublicNotebooks) {
        __sb.Append(", EnablePublicNotebooks: ");
        __sb.Append(EnablePublicNotebooks);
      }
      if (__isset.enableGoogle) {
        __sb.Append(", EnableGoogle: ");
        __sb.Append(EnableGoogle);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
