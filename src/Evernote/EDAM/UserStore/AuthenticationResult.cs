/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.UserStore
{

  /// <summary>
  ///  When an authentication (or re-authentication) is performed, this structure
  ///  provides the result to the client.
  /// <dl>
  ///  <dt>currentTime:</dt>
  ///    <dd>
  ///    The server-side date and time when this result was
  ///    generated.
  ///    </dd>
  ///  <dt>authenticationToken:</dt>
  ///    <dd>
  ///    Holds an opaque, ASCII-encoded token that can be
  ///    used by the client to perform actions on a NoteStore.
  ///    </dd>
  ///  <dt>expiration:</dt>
  ///    <dd>
  ///    Holds the server-side date and time when the
  ///    authentication token will expire.
  ///    This time can be compared to "currentTime" to produce an expiration
  ///    time that can be reconciled with the client's local clock.
  ///    </dd>
  ///  <dt>user:</dt>
  ///    <dd>
  ///    Holds the information about the account which was
  ///    authenticated if this was a full authentication.  May be absent if this
  ///    particular authentication did not require user information.
  ///    </dd>
  ///  <dt>publicUserInfo:</dt>
  ///    <dd>
  ///    If this authentication result was achieved without full permissions to
  ///    access the full User structure, this field may be set to give back
  ///    a more limited public set of data.
  ///    </dd>
  ///  <dt>noteStoreUrl:</dt>
  ///    <dd>
  ///    DEPRECATED - Client applications should use urls.noteStoreUrl.
  ///    </dd>
  ///  <dt>webApiUrlPrefix:</dt>
  ///    <dd>
  ///    DEPRECATED - Client applications should use urls.webApiUrlPrefix.
  ///    </dd>
  ///  <dt>secondFactorRequired:</dt>
  ///    <dd>
  ///    If set to true, this field indicates that the user has enabled two-factor
  ///    authentication and must enter their second factor in order to complete
  ///    authentication. In this case the value of authenticationResult will be
  ///    a short-lived authentication token that may only be used to make a
  ///    subsequent call to completeTwoFactorAuthentication.
  ///    </dd>
  ///  <dt>secondFactorDeliveryHint:</dt>
  ///    <dd>
  ///    When secondFactorRequired is set to true, this field may contain a string
  ///    describing the second factor delivery method that the user has configured.
  ///    This will typically be an obfuscated mobile device number, such as
  ///    "(xxx) xxx-x095". This string can be displayed to the user to remind them
  ///    how to obtain the required second factor.
  ///    </dd>
  ///  <dt>urls</dt>
  ///    <dd>
  ///    This structure will contain all of the URLs that clients need to make requests to the
  ///    Evernote service on behalf of the authenticated User.
  ///    </dd>
  ///  </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AuthenticationResult : TBase
  {
    private Evernote.EDAM.Type.User _user;
    private PublicUserInfo _publicUserInfo;
    private string _noteStoreUrl;
    private string _webApiUrlPrefix;
    private bool _secondFactorRequired;
    private string _secondFactorDeliveryHint;
    private UserUrls _urls;

    public long CurrentTime { get; set; }

    public string AuthenticationToken { get; set; }

    public long Expiration { get; set; }

    public Evernote.EDAM.Type.User User
    {
      get
      {
        return _user;
      }
      set
      {
        __isset.user = true;
        this._user = value;
      }
    }

    public PublicUserInfo PublicUserInfo
    {
      get
      {
        return _publicUserInfo;
      }
      set
      {
        __isset.publicUserInfo = true;
        this._publicUserInfo = value;
      }
    }

    public string NoteStoreUrl
    {
      get
      {
        return _noteStoreUrl;
      }
      set
      {
        __isset.noteStoreUrl = true;
        this._noteStoreUrl = value;
      }
    }

    public string WebApiUrlPrefix
    {
      get
      {
        return _webApiUrlPrefix;
      }
      set
      {
        __isset.webApiUrlPrefix = true;
        this._webApiUrlPrefix = value;
      }
    }

    public bool SecondFactorRequired
    {
      get
      {
        return _secondFactorRequired;
      }
      set
      {
        __isset.secondFactorRequired = true;
        this._secondFactorRequired = value;
      }
    }

    public string SecondFactorDeliveryHint
    {
      get
      {
        return _secondFactorDeliveryHint;
      }
      set
      {
        __isset.secondFactorDeliveryHint = true;
        this._secondFactorDeliveryHint = value;
      }
    }

    public UserUrls Urls
    {
      get
      {
        return _urls;
      }
      set
      {
        __isset.urls = true;
        this._urls = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool user;
      public bool publicUserInfo;
      public bool noteStoreUrl;
      public bool webApiUrlPrefix;
      public bool secondFactorRequired;
      public bool secondFactorDeliveryHint;
      public bool urls;
    }

    public AuthenticationResult() {
    }

    public AuthenticationResult(long currentTime, string authenticationToken, long expiration) : this() {
      this.CurrentTime = currentTime;
      this.AuthenticationToken = authenticationToken;
      this.Expiration = expiration;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_currentTime = false;
        bool isset_authenticationToken = false;
        bool isset_expiration = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                CurrentTime = iprot.ReadI64();
                isset_currentTime = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                AuthenticationToken = iprot.ReadString();
                isset_authenticationToken = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                Expiration = iprot.ReadI64();
                isset_expiration = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                User = new Evernote.EDAM.Type.User();
                User.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                PublicUserInfo = new PublicUserInfo();
                PublicUserInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                NoteStoreUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                WebApiUrlPrefix = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Bool) {
                SecondFactorRequired = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                SecondFactorDeliveryHint = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Struct) {
                Urls = new UserUrls();
                Urls.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_currentTime)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field CurrentTime not set");
        if (!isset_authenticationToken)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AuthenticationToken not set");
        if (!isset_expiration)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Expiration not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("AuthenticationResult");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "currentTime";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CurrentTime);
        oprot.WriteFieldEnd();
        if (AuthenticationToken == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field AuthenticationToken not set");
        field.Name = "authenticationToken";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AuthenticationToken);
        oprot.WriteFieldEnd();
        field.Name = "expiration";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Expiration);
        oprot.WriteFieldEnd();
        if (User != null && __isset.user) {
          field.Name = "user";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          User.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (PublicUserInfo != null && __isset.publicUserInfo) {
          field.Name = "publicUserInfo";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          PublicUserInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (NoteStoreUrl != null && __isset.noteStoreUrl) {
          field.Name = "noteStoreUrl";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NoteStoreUrl);
          oprot.WriteFieldEnd();
        }
        if (WebApiUrlPrefix != null && __isset.webApiUrlPrefix) {
          field.Name = "webApiUrlPrefix";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(WebApiUrlPrefix);
          oprot.WriteFieldEnd();
        }
        if (__isset.secondFactorRequired) {
          field.Name = "secondFactorRequired";
          field.Type = TType.Bool;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(SecondFactorRequired);
          oprot.WriteFieldEnd();
        }
        if (SecondFactorDeliveryHint != null && __isset.secondFactorDeliveryHint) {
          field.Name = "secondFactorDeliveryHint";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SecondFactorDeliveryHint);
          oprot.WriteFieldEnd();
        }
        if (Urls != null && __isset.urls) {
          field.Name = "urls";
          field.Type = TType.Struct;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          Urls.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("AuthenticationResult(");
      __sb.Append(", CurrentTime: ");
      __sb.Append(CurrentTime);
      __sb.Append(", AuthenticationToken: ");
      __sb.Append(AuthenticationToken);
      __sb.Append(", Expiration: ");
      __sb.Append(Expiration);
      if (User != null && __isset.user) {
        __sb.Append(", User: ");
        __sb.Append(User== null ? "<null>" : User.ToString());
      }
      if (PublicUserInfo != null && __isset.publicUserInfo) {
        __sb.Append(", PublicUserInfo: ");
        __sb.Append(PublicUserInfo== null ? "<null>" : PublicUserInfo.ToString());
      }
      if (NoteStoreUrl != null && __isset.noteStoreUrl) {
        __sb.Append(", NoteStoreUrl: ");
        __sb.Append(NoteStoreUrl);
      }
      if (WebApiUrlPrefix != null && __isset.webApiUrlPrefix) {
        __sb.Append(", WebApiUrlPrefix: ");
        __sb.Append(WebApiUrlPrefix);
      }
      if (__isset.secondFactorRequired) {
        __sb.Append(", SecondFactorRequired: ");
        __sb.Append(SecondFactorRequired);
      }
      if (SecondFactorDeliveryHint != null && __isset.secondFactorDeliveryHint) {
        __sb.Append(", SecondFactorDeliveryHint: ");
        __sb.Append(SecondFactorDeliveryHint);
      }
      if (Urls != null && __isset.urls) {
        __sb.Append(", Urls: ");
        __sb.Append(Urls== null ? "<null>" : Urls.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
