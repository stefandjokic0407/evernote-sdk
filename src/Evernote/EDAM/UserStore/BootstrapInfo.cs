/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.UserStore
{

  /// <summary>
  ///  This structure describes a collection of bootstrap profiles.
  /// <dl>
  ///  <dt>profiles:</dt>
  ///    <dd>
  ///    List of one or more bootstrap profiles, in descending
  ///    preference order.
  ///    </dd>
  ///  </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class BootstrapInfo : TBase
  {

    public List<BootstrapProfile> Profiles { get; set; }

    public BootstrapInfo() {
    }

    public BootstrapInfo(List<BootstrapProfile> profiles) : this() {
      this.Profiles = profiles;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_profiles = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Profiles = new List<BootstrapProfile>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    BootstrapProfile _elem2;
                    _elem2 = new BootstrapProfile();
                    _elem2.Read(iprot);
                    Profiles.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
                isset_profiles = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_profiles)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Profiles not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("BootstrapInfo");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Profiles == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Profiles not set");
        field.Name = "profiles";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Profiles.Count));
          foreach (BootstrapProfile _iter3 in Profiles)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("BootstrapInfo(");
      __sb.Append(", Profiles: ");
      __sb.Append(Profiles);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
