/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Error
{

  /// <summary>
  /// An exception thrown when the provided Contacts fail validation. For instance,
  /// email domains could be invalid, phone numbers might not be valid for SMS,
  /// etc.
  /// 
  /// We will not provide individual reasons for each Contact's validation failure.
  /// The presence of the Contact in this exception means that the user must figure
  /// out how to take appropriate action to fix this Contact.
  /// 
  /// <dl>
  ///   <dt>contacts</dt>
  ///   <dd>The list of Contacts that are considered invalid by the service</dd>
  /// 
  ///   <dt>parameter</dt>
  ///   <dd>If the error applied to a particular input parameter, this will
  ///   indicate which parameter.</dd>
  /// 
  ///   <dt>reasons</dt>
  ///   <dd>If supplied, the list of reasons why the server considered a contact invalid,
  ///   matching, in order, the list returned in the contacts field.</dd>
  /// </dl>
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class EDAMInvalidContactsException : TException, TBase
  {
    private string _parameter;
    private List<EDAMInvalidContactReason> _reasons;

    public List<Evernote.EDAM.Type.Contact> Contacts { get; set; }

    public string Parameter
    {
      get
      {
        return _parameter;
      }
      set
      {
        __isset.parameter = true;
        this._parameter = value;
      }
    }

    public List<EDAMInvalidContactReason> Reasons
    {
      get
      {
        return _reasons;
      }
      set
      {
        __isset.reasons = true;
        this._reasons = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool parameter;
      public bool reasons;
    }

    public EDAMInvalidContactsException() {
    }

    public EDAMInvalidContactsException(List<Evernote.EDAM.Type.Contact> contacts) : this() {
      this.Contacts = contacts;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_contacts = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Contacts = new List<Evernote.EDAM.Type.Contact>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    Evernote.EDAM.Type.Contact _elem2;
                    _elem2 = new Evernote.EDAM.Type.Contact();
                    _elem2.Read(iprot);
                    Contacts.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
                isset_contacts = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Parameter = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Reasons = new List<EDAMInvalidContactReason>();
                  TList _list3 = iprot.ReadListBegin();
                  for( int _i4 = 0; _i4 < _list3.Count; ++_i4)
                  {
                    EDAMInvalidContactReason _elem5;
                    _elem5 = (EDAMInvalidContactReason)iprot.ReadI32();
                    Reasons.Add(_elem5);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_contacts)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Contacts not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("EDAMInvalidContactsException");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Contacts == null)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field Contacts not set");
        field.Name = "contacts";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Contacts.Count));
          foreach (Evernote.EDAM.Type.Contact _iter6 in Contacts)
          {
            _iter6.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        if (Parameter != null && __isset.parameter) {
          field.Name = "parameter";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Parameter);
          oprot.WriteFieldEnd();
        }
        if (Reasons != null && __isset.reasons) {
          field.Name = "reasons";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Reasons.Count));
            foreach (EDAMInvalidContactReason _iter7 in Reasons)
            {
              oprot.WriteI32((int)_iter7);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("EDAMInvalidContactsException(");
      __sb.Append(", Contacts: ");
      __sb.Append(Contacts);
      if (Parameter != null && __isset.parameter) {
        __sb.Append(", Parameter: ");
        __sb.Append(Parameter);
      }
      if (Reasons != null && __isset.reasons) {
        __sb.Append(", Reasons: ");
        __sb.Append(Reasons);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
