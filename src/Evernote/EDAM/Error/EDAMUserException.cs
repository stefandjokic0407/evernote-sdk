/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Evernote.EDAM.Error
{

  /// <summary>
  /// This exception is thrown by EDAM procedures when a call fails as a result of
  /// a problem that a caller may be able to resolve.  For example, if the user
  /// attempts to add a note to their account which would exceed their storage
  /// quota, this type of exception may be thrown to indicate the source of the
  /// error so that they can choose an alternate action.
  /// 
  /// This exception would not be used for internal system errors that do not
  /// reflect user actions, but rather reflect a problem within the service that
  /// the user cannot resolve.
  /// 
  /// errorCode:  The numeric code indicating the type of error that occurred.
  ///   must be one of the values of EDAMErrorCode.
  /// 
  /// parameter:  If the error applied to a particular input parameter, this will
  ///   indicate which parameter. For some errors (USER_NOT_ASSOCIATED, USER_NOT_REGISTERED,
  ///   SSO_AUTHENTICATION_REQUIRED), this is the user's email.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class EDAMUserException : TException, TBase
  {
    private string _parameter;

    /// <summary>
    /// 
    /// <seealso cref="EDAMErrorCode"/>
    /// </summary>
    public EDAMErrorCode ErrorCode { get; set; }

    public string Parameter
    {
      get
      {
        return _parameter;
      }
      set
      {
        __isset.parameter = true;
        this._parameter = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool parameter;
    }

    public EDAMUserException() {
    }

    public EDAMUserException(EDAMErrorCode errorCode) : this() {
      this.ErrorCode = errorCode;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_errorCode = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ErrorCode = (EDAMErrorCode)iprot.ReadI32();
                isset_errorCode = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Parameter = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_errorCode)
          throw new TProtocolException(TProtocolException.INVALID_DATA, "required field ErrorCode not set");
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("EDAMUserException");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "errorCode";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ErrorCode);
        oprot.WriteFieldEnd();
        if (Parameter != null && __isset.parameter) {
          field.Name = "parameter";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Parameter);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("EDAMUserException(");
      __sb.Append(", ErrorCode: ");
      __sb.Append(ErrorCode);
      if (Parameter != null && __isset.parameter) {
        __sb.Append(", Parameter: ");
        __sb.Append(Parameter);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
